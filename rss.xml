<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Pype's mental data lake</title><link>https://pype.dev/rss.xml</link><description>Pypeaday posts</description><atom:link href="https://pype.dev/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>bitmoji.png</url><title>Pype's mental data lake</title><link>https://pype.dev/rss.xml</link></image><language>en</language><lastBuildDate>Sat, 25 Jun 2022 12:28:37 +0000</lastBuildDate><item><title>Ubuntu-Static-Ip</title><link>https://pype.dev/til/ubuntu-static-ip</link><description>Sometimes I need to manually set a static IP of a Linux machine. I generally run the latest version of Ubuntu server in my VMs at home. In Ubuntu 20 I gateway4 </description><content:encoded>&lt;p&gt;Sometimes I need to manually set a static IP of a Linux machine. I generally run the latest version of Ubuntu server in my VMs at home.&lt;/p&gt;&lt;p&gt;In Ubuntu 20 I'm able to change up &lt;code&gt;/etc/netplan/&amp;lt;something&amp;gt;.yml&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;network&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ethernets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enp0s4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;192.168.1.&lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;Static IP&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;/24&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;gateway4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.1.1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;nameservers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;192.168.1.1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;1.1.1.1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;gateway4&lt;/code&gt; is your router address&lt;code&gt;nameservers&lt;/code&gt; is a list of desired DNS servers for that machine to use. I  usually use my router which is configured to use my pi-hole as my primary DNS, then set  &lt;code&gt;1.1.1.1&lt;/code&gt; (CloudFlare) as a backup&lt;/p&gt;&lt;p&gt;Hit it with the &lt;code&gt;sudo netplan apply&lt;/code&gt; and you should be good to go!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/ubuntu-static-ip</guid><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Stow</title><link>https://pype.dev/til/stow</link><description>Stow is a great tool for managing dotfiles. My usage looks like cloning my dotfiles to my home directory, setting some environment variables via a script, then </description><content:encoded>&lt;p&gt;Stow is a great tool for managing dotfiles. My usage looks like cloning my dotfiles to my home directory, setting some environment variables via a script, then stowing relevant packages and boom my config is good to go...&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~git clone &amp;lt;my dotfiles repo&amp;gt;&lt;span class="nb"&gt;cd&lt;/span&gt; dotfiles&lt;span class="c1"&gt;# env variable stuff ignored here&lt;/span&gt;stow zsh  &lt;span class="c1"&gt;# This will symlink my .zshrc file which is in ~/dotfiles/zsh to ~/.zshrc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;By default stow will stow packages up one directory from the root directory. In this example the root directory is &lt;code&gt;~/dotfiles&lt;/code&gt; and the package is &lt;code&gt;zsh&lt;/code&gt;.So the files in the &lt;code&gt;zsh&lt;/code&gt; package will symlinked into &lt;code&gt;~/&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;stow&lt;/code&gt; makes it easy to share dotfiles across machines, or safely experiment with config changes while always being protected by &lt;code&gt;git&lt;/code&gt; since your dotfiles are in a git repo!...They are in a git repo... right?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/stow</guid><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Vim-Auto-Space</title><link>https://pype.dev/til/vim-auto-space</link><description>I ran into an issue where I had some copy-pasta markdown tables in a docstring but the generator I used to make the table gave me tabs instead of spaces in odd </description><content:encoded>&lt;p&gt;I ran into an issue where I had some copy-pasta markdown tables in a docstring but the generator I used to make the table gave me tabs instead of spaces in odd places which caused &lt;code&gt;black&lt;/code&gt; to throw a fit.Instead of manually changing all tabs to spaes, or trying some goofy &lt;code&gt;:%s/&amp;lt;magic tab character&amp;gt;/&amp;lt;%20 maybe?&amp;gt;/g&lt;/code&gt; I learned that Vim has my back...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:retab&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/vim-auto-space</guid><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Stow-Target</title><link>https://pype.dev/til/stow-target</link><description>Check out  What if I want to stow a package somewhere else? Maybe I don</description><content:encoded>&lt;p&gt;Check out &lt;a href="/stow"&gt;stow&lt;/a&gt; for a brief introduction to &lt;code&gt;stow&lt;/code&gt;&lt;/p&gt;&lt;p&gt;What if I want to stow a package somewhere else?Boom, that's where &lt;code&gt;-t&lt;/code&gt; comes in...&lt;/p&gt;&lt;p&gt;Maybe I don't like having my &lt;code&gt;dotfiles&lt;/code&gt; repo at &lt;code&gt;$HOME&lt;/code&gt; and instead I want it in &lt;code&gt;~/git&lt;/code&gt; or &lt;code&gt;~/personal&lt;/code&gt; just to stay organized...Well then I could have the same workflow except the &lt;code&gt;stow&lt;/code&gt; command looks like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;stow zsh -t ~/&lt;span class="c1"&gt;#or&lt;/span&gt;stow zsh -t &lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/stow-target</guid><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Git ammend to a commit</title><link>https://pype.dev/til/git-ammend-no-edit</link><description>After carefully staging only lines related to a specific change and comitting I suddenly realized I missed one... darn, what do I do? Old me would have soft res</description><content:encoded>&lt;p&gt;After carefully staging only lines related to a specific change and comitting I suddenly realized I missed one... darn, what do I do?&lt;/p&gt;&lt;p&gt;Old me would have soft reset my branch to the previous commit and redone all my careful staging... what a PIA...&lt;/p&gt;&lt;p&gt;New me (credit: ThePrimeagen)...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# stage other changes I missed&lt;/span&gt;git commit --amend --no-edit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/git-ammend-no-edit</guid><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Tiddly-Wiki</title><link>https://pype.dev/tiddly-wiki</link><description>The tiddlywiki is just an  Taking notes in the tidlywiki is nice because it supports a format similar to Markdown although it is specific to tidlywiki. Here The</description><content:encoded>&lt;p&gt;&lt;a href="https://tiddlywiki.com/"&gt;Tiddly Wiki&lt;/a&gt; is a great note taking utility for organizing non-linear notes.I used it to replace my OneNote workflow and my only complaint is I don't have an easy way to access and edit my tiddlers (posts) if I'm not at home.&lt;/p&gt;&lt;p&gt;The tiddlywiki is just an &lt;code&gt;html&lt;/code&gt; file with a ton of stuff above my head baked in. I have a barebones repo with some notes and a nice starter tiddly wiki init on &lt;a href="https://github.com/nicpayne713/tiddlywiki-tutorial"&gt;my github&lt;/a&gt;.Usage is pretty basic... Just grab the &lt;code&gt;notebook/template.htlm&lt;/code&gt; and save it to anywhere convenient on your computer.I put mine on my NAS to have the security of backups since I don't keep my tidldlywiki in a git repo (I don't really want to look at the diff).&lt;/p&gt;&lt;p&gt;Taking notes in the tidlywiki is nice because it supports a format similar to Markdown although it is specific to tidlywiki. Tiddlers (each post in the wiki) can be tagged and linked together and it's really easy to send notes to someone by just exporting an html file and emailing it since it'll open up by default in a broswer with all the nice formatting already apart of it.I was using it primarily for taking notes for a small group I lead and sending those notes each week.The group benefited from nicely formatted notes and I benefited from a centralized place to keep them all that Microsoft didn't own!&lt;/p&gt;&lt;p&gt;Here's an example of the body of a tiddler with some tiddlywiki specific formatting:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;! Static IPs on Linux//Ubuntu 20//Setting static IP on Ubuntu 20.04# Navigate to /etc/netplan# Open the yaml file (the name seems to be kind of random but it seems to starts with 00 or 05)# Change the file as below with your desired settings# Run `sudo netplan apply` to have changes reflected    ```yaml    network:      version: 2      ethernets:        enp0s4:          addresses: [192.168.1.{Static IP}/24]          gateway4: 192.168.1.1          nameservers:            addresses: [8.8.4.4, 8.8.8.8]    ```&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Alt text" src="/images/tiddlywiki-example.png" title="A Tiddler" /&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;#&lt;/code&gt; create a numbered list, &lt;code&gt;//&lt;/code&gt; creates an italicized heading, and &lt;code&gt;!&lt;/code&gt; creates headings similar to Markdown's &lt;code&gt;#&lt;/code&gt;. The differences aren't too bad to keep in mind and what renders out is totally depenent on the tidlywiki itself. My template has a nice nord feel to it, feel free to download from my github and try it out!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I have moved away from my tiddlywiki workflow in favor of sites like this since I can git commit markdown files and build with &lt;a href="https://markata.dev/"&gt;markata&lt;/a&gt; pretty easily (credit &lt;a href="www.waylonwalker.com"&gt;waylon walker&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;I still use tiddlywiki for tracking some todo items and questions --- I may have another solution in the future&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/tiddly-wiki</guid><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Pandas-Select-Dtypes</title><link>https://pype.dev/til/pandas-select-dtypes</link><description>On my team we often have to change data types of columns in a  A handy way to do this is by using  Here is an example of finding columns read in as  Here is the</description><content:encoded>&lt;p&gt;On my team we often have to change data types of columns in a &lt;code&gt;pandas.DataFrame&lt;/code&gt; for a variety of reasons.The main one is it tends to be an artifact of EDA whereby a file is read in via &lt;code&gt;pandas&lt;/code&gt; but the data types are somewhat wonky (ie. dates show up as strings, or a column that &lt;em&gt;should&lt;/em&gt; be a integer comes in as float, etc.).The best solution I think is to leverage the &lt;code&gt;dtypes&lt;/code&gt; keyword argument in which &lt;code&gt;pd.read_X&lt;/code&gt; method is used. However there is another way which is to coerce the data types at runtime instead of loadtime.&lt;/p&gt;&lt;p&gt;A handy way to do this is by using &lt;code&gt;pandas.DataFrame.select_dtypes&lt;/code&gt;...&lt;/p&gt;&lt;p&gt;Here is an example of finding columns read in as &lt;code&gt;datetime64&lt;/code&gt; and the developer would prefer to use pandas datetimes.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./file-with-confusing-dtypes.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;datetime64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the difference in code flow between &lt;code&gt;select_dtypes&lt;/code&gt; and manually finding the &lt;code&gt;datetype64&lt;/code&gt; columns:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./file-with-confusing-dtypes.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_dtypes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference isn't huge but it's the little steps in leveling up that turn script-kitty scripts into clean looking functions.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/pandas-select-dtypes</guid><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Traefik-01</title><link>https://pype.dev/traefik-01</link><description>If you don I like Traefik a lot because once I get some basic config up it In 2022 I A simple docker-compose file for traefik might look like this: I use Ansibl</description><content:encoded>&lt;h1 id="traefik"&gt;Traefik&lt;/h1&gt;&lt;p&gt;If you don't know about &lt;a href="https://doc.traefik.io/traefik/"&gt;traefik&lt;/a&gt; and you need a reverse-proxy then you might want to check it out.I used to use nginx for my reverse proxy but the config was over my head, and once it was working I was afraid to touch it.Traefik brings a lot to the table, my main uses are reverse proxy and ip whitelisting, but it's doing even more under the hood that I don't have a full-grasp of yet.&lt;/p&gt;&lt;p&gt;I like Traefik a lot because once I get some basic config up it's incredibly easy to add services into my homelab whether they run on my primary server or not.This will not be exhaustive but I'll outline my simple setup process of traefik and how I add services whether they are in docker or not.&lt;/p&gt;&lt;h1 id="docker"&gt;Docker&lt;/h1&gt;&lt;p&gt;In 2022 I'm still a docker fan-boy and I run my traefik instance in a docker container. This isn't necessary but I love the portability since my homelab is very dynamic at the moment.And even if it wasn't I'd still want to keep traefik in docker because deployment and updating are just so flipping easy&lt;/p&gt;&lt;p&gt;A simple docker-compose file for traefik might look like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;traefik&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;traefik:v2.4&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;network_mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;host&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker-data/traefik/traefik.toml:/etc/traefik/traefik.toml:ro&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker-data/traefik/config.yml:/etc/traefik/config.yml:ro&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker-data/traefik/letsencrypt:/letsencrypt:rw&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/var/run/docker.sock:/var/run/docker.sock:ro&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# for auto-discovery&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;restart_policy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unless-stopped&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1g&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="ansible-deployment"&gt;Ansible deployment&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;I plan to have more on my homelab and Ansible on this site eventually...&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I use Ansible to deploy most of my services at home, including traefik. My main homelab repo is &lt;a href="https://github.com/nicpayne713/ansible-nas"&gt;here&lt;/a&gt; which is a fork of &lt;a href="https://github.com/davestephens/ansible-nas"&gt;Ansible NAS&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you want my stuff then be sure to go to the &lt;code&gt;user/nic&lt;/code&gt; branch on my fork&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You can see the ansible stuff for traefik &lt;a href="https://github.com/davestephens/ansible-nas/tree/master/roles/traefik"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;h1 id="config"&gt;Config&lt;/h1&gt;&lt;p&gt;I use a &lt;code&gt;traefik.toml&lt;/code&gt; as the main config and it looks something like this.With ansible a lot of this is done through template variables but this is the general idea.This config tells traefik what ports to listen and forward on, and gives the names to be referenced by docker labels (down below). &lt;/p&gt;&lt;p&gt;Traefik also has a handy web ui that with this config you can find on port &lt;code&gt;8080&lt;/code&gt;.There is a &lt;code&gt;providers&lt;/code&gt; section - which is one of the biggest selling points of traefik for me.I have a docker provider configured  and a static file. &lt;/p&gt;&lt;p&gt;The docker provider lets traefik auto-discover new services that I deploy and automatically handle the routing!The static file lets me easily add non-dockerized service routing, or routing to dockerized services on another host (I think traefik has an easier way to do this automatically but I don't do it often enough to need that kind of automation).Then at the bottom is the SSL cert stuff. Using Let's Encrypt is pretty easy and I use Cloudflare as my DNS provider&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[entryPoints]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[entryPoints.web]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:80&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[entryPoints.web.http.redirections.entryPoint]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;websecure&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[entryPoints.websecure]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:443&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[entryPoints.websecure.http.tls]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;certResolver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;letsencrypt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[entryPoints.websecure.http.tls.domains]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;sans&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*.example.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[entryPoints.traefik]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[providers]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;providersThrottleDuration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1s&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[providers.docker]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;exposedbydefault&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[providers.file]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/etc/traefik/config.yml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[api]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;insecure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;dashboard&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[log]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[ping]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;terminatingStatusCode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[certificatesResolvers]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[certificatesResolvers.letsencrypt]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[certificatesResolvers.letsencrypt.acme]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my_email@example.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/letsencrypt/acme.json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;caserver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://acme-staging-v02.api.letsencrypt.org/directory&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# le staging, not prod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[certificatesResolvers.letsencrypt.acme.dnsChallenge]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cloudflare&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="providersfile"&gt;Providers.file&lt;/h1&gt;&lt;p&gt;To my knowledge there isn't much to configure on the docker provider side of things until you deploy a service.But the provider config file should get a little screen time here.&lt;/p&gt;&lt;p&gt;The file defines a traefik http router for each service you define, in this case just &lt;code&gt;pihole&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Here I am adding my pihole instance which is not run inside docker but is inside a VM on another host.I want the &lt;code&gt;entryPoints&lt;/code&gt; to be set to &lt;code&gt;websecure&lt;/code&gt; which is configured above in the http redirects.I want some middlewares, &lt;code&gt;addprefix-pihole&lt;/code&gt; and &lt;code&gt;default-headers&lt;/code&gt;, which I'll explain below.I set letsencrypt as the cert certResolver.Finally I name the service &lt;code&gt;pihole&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Then in the &lt;code&gt;services&lt;/code&gt; section I configure where pihole is located by just giving the internal IP for traefik to route to.Finally I define my middlewares. To get to the pihole homepage you need to use the route &lt;code&gt;/admin&lt;/code&gt; so I want that added automatically when I go to &lt;code&gt;pihole.example.com&lt;/code&gt; so I come to &lt;code&gt;pihole.example.com/admin&lt;/code&gt;.And I wanted to restrict access to just my internal network and my wireguard network - this is done with the &lt;code&gt;default-whitelist&lt;/code&gt;. The last thing is to configure a chain of middlewares that I called &lt;code&gt;secured&lt;/code&gt; which is just easier for the docker labels later on.&lt;/p&gt;&lt;p&gt;With this config in play though, traefik will know about the route &lt;code&gt;pihole.example.com&lt;/code&gt; and handle the ip whitelisting and load balancing for me.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#region routers &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;routers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pihole&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;entryPoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;websecure&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Host(`pihole.example.com`)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;middlewares&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# - default-headers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;addprefix-pihole&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-whitelist&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;tls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;certResolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;letsencrypt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pihole&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;#region services&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pihole&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;loadBalancer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://192.168.1.3:80&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;passHostHeader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;#endregion&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;middlewares&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;addprefix-pihole&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;addPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/admin&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;https-redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;redirectScheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;default-headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;frameDeny&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;sslRedirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;browserXssFilter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;contentTypeNosniff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;forceSTSHeader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;stsIncludeSubdomains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;stsPreload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;stsSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;15552000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;customFrameOptionsValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;SAMEORIGIN&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;default-whitelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ipWhiteList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;sourceRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10.6.0.0/24&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# wg&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;192.168.1.0/24&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# lan&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;172.17.0.0/16&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# docker&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;secured&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;middlewares&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-whitelist&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-headers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="docker-labels"&gt;Docker labels&lt;/h1&gt;&lt;p&gt;Now the real magic is with Docker.Here is an example docker-compose file for spinning up a &lt;a href="https://jellyfin.org/"&gt;jellyfin&lt;/a&gt; server that you want to expose to the world, or at least access at home with &lt;code&gt;jellyfin.example.com&lt;/code&gt; instead of &lt;code&gt;http://192.168.1.N:8096&lt;/code&gt;...&lt;/p&gt;&lt;p&gt;I left some of the ansible variable stuff in here, but the main part to be concerned with is the &lt;code&gt;labels&lt;/code&gt; section...&lt;/p&gt;&lt;p&gt;We define just a few labels to throw onto this docker container which let's traefik discover it automatically and apply any settings necessary (like my &lt;code&gt;ipWhiteList&lt;/code&gt;).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;traefik.enable&lt;/code&gt; is either True or False. &lt;/li&gt;&lt;li&gt;&lt;code&gt;traefik.http.router.jellyfin.rule&lt;/code&gt; defines an http router called jellyfin and sets the url to &lt;code&gt;jellyfin.example.com&lt;/code&gt; (if example.com was my &lt;code&gt;ansible_nas_domain&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;traefik.http.routers.jellyfin.tls.certresolver&lt;/code&gt; is set to letsencrypt since I use LE for my wildcard certs.&lt;/li&gt;&lt;li&gt;&lt;code&gt;traefik.http.routers.jellyfin.tls.domains[0].main&lt;/code&gt; will just be &lt;code&gt;example.com&lt;/code&gt; -&amp;gt; and this should remind you of the toml file above&lt;/li&gt;&lt;li&gt;&lt;code&gt;traefik.http.routers.jellyfin.tls.domains[0].sans&lt;/code&gt; is set to &lt;code&gt;*.example.com&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;traefik.http.services.jellyfin.loadbalancer.server.port&lt;/code&gt; is set to jellyfin's default http port of 8096, which tells traefik which port to point to for this service.&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jellyfin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;linuxserver/jellyfin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:/config:rw&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:/movies:&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:/music:&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:/photos:&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:/tv:&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:/books:&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:/audiobooks:&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8096&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8920&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;TZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;PUID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;PGID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;restart_policy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;unless-stopped&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1g&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;traefik.enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;traefik.http.routers.jellyfin.rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Host(`jellyfin.`)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;traefik.http.routers.jellyfin.tls.certresolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;letsencrypt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;traefik.http.routers.jellyfin.tls.domains[0].main&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;traefik.http.routers.jellyfin.tls.domains[0].sans&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*.&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;traefik.http.services.jellyfin.loadbalancer.server.port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8096&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And just like that traefik will automagically find your jellyfin container and route &lt;code&gt;jellyfin.example.com&lt;/code&gt; to it!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/traefik-01</guid><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Tree</title><link>https://pype.dev/til/tree</link><description>I wanted a quick way to generate an  tree Say I have a file structure like this: To generate a barebones simple  tree ./html-files -H "." -L 1 -P "*.html" and g</description><content:encoded>&lt;p&gt;I wanted a quick way to generate an &lt;code&gt;index.html&lt;/code&gt; for a directory of html files that grows by 1 or 2 files a week.I don't know any html (the files are exports from my &lt;a href="/tiddly-wiki"&gt;tiddlywiki&lt;/a&gt;)...&lt;/p&gt;&lt;p&gt;&lt;code&gt;tree&lt;/code&gt; is just the answer.&lt;/p&gt;&lt;p&gt;Say I have a file structure like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./html-files├── file1.html└── file2.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To generate a barebones simple &lt;code&gt;index.html&lt;/code&gt; we can use tree as follows:&lt;/p&gt;&lt;p&gt;&lt;code&gt;tree ./html-files -H "." -L 1 -P "*.html"&lt;/code&gt;&lt;/p&gt;&lt;p&gt;and get the following:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html; charset=UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Author&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Made by &amp;#39;tree&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GENERATOR&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$Version: $ tree v1.8.0 (c) 1996 - 2018 by Steve Baker, Thomas Moore, Francesc Rocher, Florian Sesser, Kyosuke Tokoro $&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Directory Tree&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;BODY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ariel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;P&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ariel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;visited&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;link&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;active&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;small&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NORM&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FIFO&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CHAR&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DIR&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;BLOCK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LINK&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;aqua&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SOCK&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;fuchsia&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EXEC&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Directory Tree&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        ├── &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./file1.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;file1.html&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        └── &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./file2.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;file2.html&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;0 directories, 2 files        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;VERSION&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                 tree v1.8.0 © 1996 - 2018 by Steve Baker and Thomas Moore &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                 HTML output hacked and copyleft © 1998 by Francesc Rocher &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                 JSON output hacked and copyleft © 2014 by Florian Sesser &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                 Charsets / OS/2 support © 2001 by Kyosuke Tokoro        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which &lt;a href="/tree-index-example.html"&gt;looks like this&lt;/a&gt; when you serve it up with &lt;code&gt;python -m http.server&lt;/code&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/tree</guid><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Webservers-And-Indexes</title><link>https://pype.dev/til/webservers-and-indexes</link><description>I host a lot of services in my homelab, but they A  Something that confused the heck out of me when I first started down the road of having a server was what a </description><content:encoded>&lt;p&gt;I host a lot of services in my homelab, but they're mostly dockerized applications so I have never had to care much about how content gets served up.Today I had several little concepts click into place regarding webservers, and it was a similar experience to when I started homelabing and didn't know what a "server" was in the first place.&lt;/p&gt;&lt;h1 id="servers"&gt;Servers&lt;/h1&gt;&lt;p&gt;A "server" can have a lot of different meanings but specifically in my world it was a physical server, like my PowerEdge R610 which acts as my main "home server".But then on my server, I have other servers... Jellyfin is my main media server - but that's obviously not a hardware thing, that's software. This is certainly not a groundbreaking thing but it was a tiny piece to the puzzle that I was missing... that "server" is highly contextual.&lt;/p&gt;&lt;h1 id="webservers"&gt;Webservers&lt;/h1&gt;&lt;p&gt;Something that confused the heck out of me when I first started down the road of having a server was what a webserver even was...I always thought the "webserver" was just "a server that hosts a website"... and yes, that's true, but also it wasn't true in how I understood "server".It turns out that across my 40-odd dockerized services I have at home that I must have about 40-odd web servers running, each docker container is spinning up its own!&lt;/p&gt;&lt;p&gt;So something I have wanted to do for a long time is put my theology notes online for my small group to access whenever they might want... it doesn't need to be fancy or anything.My issue was not knowing what to even Google. I tried "How to serve up static html" but that kind of search is for people who know what a "static" site is - I am not one of those people.I kept running across nginx and apache things, wordpress and other website building tools, etc.In fact I only recently learned that JavaScript assets cann still be considered static so I am a complete baby in the web-dev space.&lt;/p&gt;&lt;p&gt;What I really wanted was just a simple landing page with a link to each of my "posts" which are in the form of a single html file each that I can easily export from my tiddlywiki (I have a post about tiddlywiki &lt;a href="/tiddly-wiki"&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;The first win &lt;code&gt;python -m http.server&lt;/code&gt; right in the directory I kept my html files in and that got me what I wanted functionally. But then I wanted just a hair more organization...I started looking for a way to dynamically generate an index for a directory of html files but again the verbiage of that Google search just wasn't helping me - I didn't want anything complicated and I knew that what I wanted had to be easy...&lt;/p&gt;&lt;h1 id="the-index"&gt;The Index&lt;/h1&gt;&lt;p&gt;Luckily I randomly came across a SO that mentioned a Linux utility called &lt;code&gt;tree&lt;/code&gt; which does exactly what I wanted!&lt;/p&gt;&lt;p&gt;See my TIL on &lt;code&gt;tree&lt;/code&gt; &lt;a href="" title="/tree"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;So now it goes like this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Take notes on X in my tiddlywiki&lt;/li&gt;&lt;li&gt;Export that tiddler to a html file &lt;/li&gt;&lt;li&gt;Put that html file into a &lt;code&gt;notes&lt;/code&gt; folder in my github repo for small group notes &lt;/li&gt;&lt;li&gt;Use &lt;code&gt;tree&lt;/code&gt; to generate an &lt;code&gt;index.html&lt;/code&gt; of each of those files in the &lt;code&gt;notes&lt;/code&gt; directory&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;python -m http.server&lt;/code&gt; to start a web server that lands me at the &lt;code&gt;index.html&lt;/code&gt; and now I can click through to any post!&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It's not fancy but it's functional... This site/blog is built with markdown and &lt;a href="https://www.markata.dev"&gt;markata&lt;/a&gt; and I wanted way more functionality in my tech notes.But for this simple use case I learned a ton about &lt;em&gt;how&lt;/em&gt; content gets served up on a webpage and my small group benefits from the easy access as well!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/webservers-and-indexes</guid><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Dataframe-Memory-Usage</title><link>https://pype.dev/til/dataframe-memory-usage</link><description>I have often wanted to dive into memory usage for pandas DataFrames when it comes to cloud deployment. I didn</description><content:encoded>&lt;p&gt;I have often wanted to dive into memory usage for pandas DataFrames when it comes to cloud deployment.If I have a python process running on a server at home I can use &lt;code&gt;glances&lt;/code&gt; or a number of other tools to diagnose a memory issue...However at work I normally deploy dockerized processes on AWS Batch and it's much more challenging to get info on the dockerized process without more AWS integration that my team isn't quite ready for.So TIL that I can get some of the info I want from pandas directly!&lt;/p&gt;&lt;h1 id="dataframeinfo"&gt;DataFrame.info()&lt;/h1&gt;&lt;p&gt;I didn't realize that &lt;code&gt;df.info()&lt;/code&gt; was able to give me more info than just dtypes and some summary stats...There is a kwarg &lt;code&gt;memory_usage&lt;/code&gt; that can configure what you need to get back, so &lt;code&gt;df.memory_usage="deep"&lt;/code&gt; will give you how much RAM any given DataFrame is using!Amazing tool for finding issues with joins or renegade source data files.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cars.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memory_usage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;deep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Alt text" src="/images/df-memory-usage.png" title="DF memory" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/dataframe-memory-usage</guid><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Adblock-Coverage</title><link>https://pype.dev/til/adblock-coverage</link><description>I run pi-hole at home for ad blocking and some internal DNS/DHCP handling. One thing I Credits to </description><content:encoded>&lt;p&gt;I run pi-hole at home for ad blocking and some internal DNS/DHCP handling.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;pi hole posts on the way&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;One thing I've never put too much thought in is asking "how well am I doing at blocking?"There's lots of ways to measure that depending on what you care about but I just learned of &lt;a href="https://d3ward.github.io/toolz/adblock"&gt;adblock tester&lt;/a&gt;.It's awesome and gave me a quick glimpse into how my pi-hole is performing on keeping my webpages clean and my DNS history private!&lt;/p&gt;&lt;p&gt;Credits to &lt;a href="https://github.com/d3ward/toolz"&gt;d3ward&lt;/a&gt; for the awesome tool!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/adblock-coverage</guid><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Python-Builtin-Calendar</title><link>https://pype.dev/til/python-builtin-calendar</link><description>I almost exclusively use Python for my job and have been eye-balls deep in it for almost 5 years but I really lack in-depth knowledge of builtins. I only needed</description><content:encoded>&lt;h2 id="being-lazy"&gt;Being lazy&lt;/h2&gt;&lt;p&gt;I almost exclusively use Python for my job and have been eye-balls deep in it for almost 5 years but I really lack in-depth knowledge of builtins.I recently learned of an awesome builtin called &lt;code&gt;calendar&lt;/code&gt;  that has way more than I know about for sure but I'm glad I know it's here now!&lt;/p&gt;&lt;p&gt;I only needed it because I was too lazy to hard code the 7 weekdays into my module but it turns out there's a lot of useful things like &lt;code&gt;calendar.isleap()&lt;/code&gt;!&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt text" src="/images/builtin-calendar.png" title="calendar" /&gt;&lt;/p&gt;&lt;h2 id="future-use"&gt;Future use&lt;/h2&gt;&lt;p&gt;I'm not exactly sure what will come my way where &lt;code&gt;calendar&lt;/code&gt; will be super relevant but like anything, I'm just glad to know it exists for when the time arises!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/python-builtin-calendar</guid><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Python-F-String-Align</title><link>https://pype.dev/til/python-f-string-align</link><description>I am personally trying to use  This little python script shows how options in the </description><content:encoded>&lt;p&gt;I am personally trying to use &lt;code&gt;logger&lt;/code&gt; instead of &lt;code&gt;print&lt;/code&gt; in all of my code, however I learned from [@Python-Hub] that you can align printouts using &lt;code&gt;print&lt;/code&gt; with &lt;code&gt;f&lt;/code&gt;-strings!.&lt;/p&gt;&lt;p&gt;This little python script shows how options in the &lt;code&gt;f&lt;/code&gt;-string can format the printout.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Foo Bar Baz Bing&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;With &amp;#39;varable&amp;#39; left aligned&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;varable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;varable&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;10&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;With &amp;#39;varable&amp;#39; right aligned&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;varable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;varable&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;15&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;With &amp;#39;varable&amp;#39; center aligned&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;varable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;varable&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;^5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Alt text" src="/images/py-print-align.png" title="python print" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/python-f-string-align</guid><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Abstract-Base-Class</title><link>https://pype.dev/til/abstract-base-class</link><description>I don If you are creating a library with classes that you expect your users to extend, but you want to ensure that any extension has explicit methods defined th</description><content:encoded>&lt;h2 id="abcmeta"&gt;ABCMeta&lt;/h2&gt;&lt;p&gt;I don't do a lot of OOP currently, but I have been on a few heavy OOP projects and this &lt;code&gt;ABCMeta&lt;/code&gt; and &lt;code&gt;abstractmethod&lt;/code&gt; from &lt;code&gt;abc&lt;/code&gt; would've been super nice to know about!&lt;/p&gt;&lt;p&gt;If you are creating a library with classes that you expect your users to extend, but you want to ensure that any extension has explicit methods defined then this is for you!.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Family&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_dad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Any extension of the Family class must implement a `get_dad` method&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyFamily&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I try to instantiate &lt;code&gt;MyFamily&lt;/code&gt; I will not be allowed:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;my_fam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyFamily&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;╭───────────────────────────────&lt;/span&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;────────────────────────────────╮&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ecb8e21ce815&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                                                     &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;╰──────────────────────────────────────────────────────────────────────────────────────────────────╯&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t instantiate abstract class MyFamily with abstract methods get_dad&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt text" src="/images/py-abc-meta.png" title="abcmeta" /&gt;&lt;/p&gt;&lt;p&gt;In order for me to extend &lt;code&gt;Family&lt;/code&gt; I have to implement the method &lt;code&gt;get_dad&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyFamily&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_dad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Me&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now everything works as expected and I can sleep well knowing no one can extend my base class without creating methods I know they need.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_fam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyFamily&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;my_fam&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Me&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/abstract-base-class</guid><pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Wireguard</title><link>https://pype.dev/wireguard</link><description>Virtual Private Networks are a big deal, and this shouldn Wireguard is an awesome peer-to-peer VPN tunnel that makes it really easy for me to get into my home n</description><content:encoded>&lt;h2 id="vpn"&gt;VPN&lt;/h2&gt;&lt;p&gt;Virtual Private Networks are a big deal, and this shouldn't be considered anything even close to a guide on using them.Here are just my notes and some setup for how I use &lt;a href="https://www.wireguard.com/"&gt;wireguard&lt;/a&gt; at home.&lt;/p&gt;&lt;h2 id="wireguard"&gt;Wireguard&lt;/h2&gt;&lt;p&gt;Wireguard is an awesome peer-to-peer VPN tunnel that makes it really easy for me to get into my home network when I'm out and about.My main reasons for this are 1. I don't trust public wi-fi and 2. I want to use pi-hole for ad blocking when I'm not at home&lt;/p&gt;&lt;p&gt;Wireguard can be configured as a "peer-to-site" VPN tunnel as well.My vpn setup let's me jump to various machines on my network from anywhere!&lt;/p&gt;&lt;p&gt;I use &lt;a href="https://pivpn.io/"&gt;pivpn&lt;/a&gt; in a VM that's already running &lt;code&gt;pi-hole&lt;/code&gt; to host my wireguard server.It's super easy to setup just by following the instructions on the pivpn site.&lt;/p&gt;&lt;p&gt;The reason I like it is that I have a nice &lt;code&gt;cli&lt;/code&gt; for managing wireguard configs.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dumbledore@pihole-vpn:~$ pivpn::: Control all PiVPN specific functions!:::::: Usage: pivpn &amp;lt;command&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;option&lt;span class="o"&gt;]&lt;/span&gt;:::::: Commands::::    -a, add              Create a client conf profile:::    -c, clients          List any connected clients to the server:::    -d, debug            Start a debugging session &lt;span class="k"&gt;if&lt;/span&gt; having trouble:::    -l, list             List all clients:::   -qr, qrcode           Show the qrcode of a client &lt;span class="k"&gt;for&lt;/span&gt; use with the mobile app:::    -r, remove           Remove a client:::  -off, off              Disable a user:::   -on, on               Enable a user:::    -h, &lt;span class="nb"&gt;help&lt;/span&gt;             Show this &lt;span class="nb"&gt;help&lt;/span&gt; dialog:::    -u, uninstall        Uninstall pivpn from your system!:::   -up, update           Updates PiVPN Scripts:::   -bk, backup           Backup VPN configs and user profiles&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When I'm ready to add a new client to my &lt;code&gt;wg&lt;/code&gt; network, it's as easy as &lt;code&gt;pivpn add&lt;/code&gt; and follow the instructions.The easiest part here is that you'll be given a QR code in the terminal that you can just scan with the client (like a smart phone) and you'll have your wireguard config handled by the app (oh right, download the wireguard app) in no time!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/wireguard</guid><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Mu</title><link>https://pype.dev/til/mu</link><description>If you work with a template for several projects then you might sometimes need to do the same action across all repos. mu status mu sh mu stash There mu As you </description><content:encoded>&lt;p&gt;If you work with a template for several projects then you might sometimes need to do the same action across all repos.A good example of this is updating a package in &lt;code&gt;requirements.txt&lt;/code&gt; in every project, or refactoring a common module.If you have several repos to do this across then it can be time consuming... enter &lt;code&gt;mu-repo&lt;/code&gt;&lt;/p&gt;&lt;h2 id="mu"&gt;Mu&lt;/h2&gt;&lt;p&gt;&lt;a href="https://fabioz.github.io/mu-repo/"&gt;mu-repo&lt;/a&gt; is an awesome cli tool for working with multiple git repositories at the same time. There are several things you can do:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;mu status&lt;/code&gt; will give you the &lt;code&gt;git status&lt;/code&gt; of every registered repo (see below)&lt;/li&gt;&lt;li&gt;&lt;code&gt;mu sh&lt;/code&gt; will let you execute system level commands in every repo&lt;/li&gt;&lt;li&gt;&lt;code&gt;mu stash&lt;/code&gt; will stash all changes across all registered repos&lt;/li&gt;&lt;li&gt;There's literally a ton more but these are some handy ones&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="registration"&gt;Registration&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mu&lt;/code&gt; tracks its own &lt;code&gt;groups&lt;/code&gt;, and there is a default group when no particular one is active.It's as simple as &lt;code&gt;mu register proj1 prog2 ...&lt;/code&gt; to get repos registered&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ mu register proj1 proj2Repository: proj1 registeredRepository: proj2 registered❯ mu status  proj1 : git status    On branch main    No commits yet    Untracked files:    &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to include &lt;span class="k"&gt;in&lt;/span&gt; what will be committed&lt;span class="o"&gt;)&lt;/span&gt;    requirements.txt    nothing added to commit but untracked files present &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add&amp;quot;&lt;/span&gt; to track&lt;span class="o"&gt;)&lt;/span&gt;  proj2 : git status    On branch main    No commits yet    Changes to be committed:    &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git rm --cached &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to unstage&lt;span class="o"&gt;)&lt;/span&gt;    new file:   requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="working-with-mu"&gt;Working with mu&lt;/h2&gt;&lt;p&gt;As you can see above I have two projects each with a &lt;code&gt;requirements.txt&lt;/code&gt; added but not committed yet.Using &lt;code&gt;mu&lt;/code&gt; I can stage this change across both repos at once.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ mu add requirements.txt  proj1 : git add requirements.txt  proj2 : git add requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then as you might imagine, I can make the commit in each repo&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ mu commit -m &lt;span class="s2"&gt;&amp;quot;Add requirements.txts&amp;quot;&lt;/span&gt;  proj1 : git commit -m Add requirements.txts    &lt;span class="o"&gt;[&lt;/span&gt;main &lt;span class="o"&gt;(&lt;/span&gt;root-commit&lt;span class="o"&gt;)&lt;/span&gt; 18376d7&lt;span class="o"&gt;]&lt;/span&gt; Add requirements.txts    &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;1&lt;/span&gt; insertion&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;    create mode &lt;span class="m"&gt;100644&lt;/span&gt; requirements.txt  proj2 : git commit -m Add requirements.txts    &lt;span class="o"&gt;[&lt;/span&gt;main &lt;span class="o"&gt;(&lt;/span&gt;root-commit&lt;span class="o"&gt;)&lt;/span&gt; 18376d7&lt;span class="o"&gt;]&lt;/span&gt; Add requirements.txts    &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;1&lt;/span&gt; insertion&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;    create mode &lt;span class="m"&gt;100644&lt;/span&gt; requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="mu-groups"&gt;mu groups&lt;/h2&gt;&lt;p&gt;The other thing I got a lot of use out of recently was &lt;code&gt;mu&lt;/code&gt;'s groups.At work I have about 40 repos cloned that are all based on the same kedro pipeline template.Some of these projects have been deprecated.I also have several more repos that are not kedro template - custom libraries or something.&lt;code&gt;group&lt;/code&gt; let me utilize &lt;code&gt;mu&lt;/code&gt; across different groups of repos.&lt;/p&gt;&lt;p&gt;Say &lt;code&gt;proj2&lt;/code&gt; is a deprecated project that I don't need to worry about making changes to anymore.I don't just have to unregister it, instead I can make a group called "active" and register &lt;code&gt;proj1&lt;/code&gt; in that group&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ mu group add active --empty~/personal❯ mu group add deprecated --empty~/personal❯ mu group  active* deprecated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; tells me which group is active. The &lt;code&gt;--empty&lt;/code&gt; flag tells &lt;code&gt;mu&lt;/code&gt; to not add all registered repos to that group.If I don't want to use any groups then &lt;code&gt;mu group reset&lt;/code&gt; will go back to the default group with all registered repos.&lt;/p&gt;&lt;p&gt;With groups I can register only the repos that I want to be working across in their own group and not worry about affecting other repos with my batch changes!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/mu</guid><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Psutil-01</title><link>https://pype.dev/til/psutils-01</link><description>Here Bonus Ipython tip</description><content:encoded>&lt;p&gt;&lt;a href="https://twitter.com/driscollis"&gt;Mike Driscoll&lt;/a&gt; has been posting some awesome posts about &lt;code&gt;psutil&lt;/code&gt; lately.I'm interested in making my own system monitoring dashboard now using this library.I don't expect it to compete with Netdata or Glances but it'll just be for fun to see how Python can solve this problem!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Repo coming soon&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="example-code"&gt;Example code:&lt;/h2&gt;&lt;p&gt;Here's a short snippit to get used/available/total RAM and disk space (on partitions that you probably care about)&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;System Memory used: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtual_memory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; GB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;System Memory available: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtual_memory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; GB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;System Memory total: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtual_memory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; GB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hostname: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethostname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;partitions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disk_partitions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;partitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;mnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mountpoint&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;snap&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mnt&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;boot&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="k"&gt;continue&lt;/span&gt;    &lt;span class="n"&gt;disk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disk_usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Usage at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; on &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; GB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Free at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; on &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;GB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; on &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;GB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Bonus Ipython tip! Save this to a script called my_script.py and in Ipython you can %run -m my_script to run it!&lt;/p&gt;&lt;/blockquote&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;project ↪ main v3.8.11 ipython❯ %run -m system-monitor-psutilsSystem Memory used: &lt;span class="m"&gt;25&lt;/span&gt; GBSystem Memory available: &lt;span class="m"&gt;5&lt;/span&gt; GBSystem Memory total: &lt;span class="m"&gt;31&lt;/span&gt; GBHostname: ryzen-3600xUsage at / on /dev/nvme1n1p2: &lt;span class="m"&gt;81&lt;/span&gt; GBFree at / on /dev/nvme1n1p2: &lt;span class="m"&gt;351&lt;/span&gt; GBTotal at / on /dev/nvme1n1p2: &lt;span class="m"&gt;456&lt;/span&gt; GB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/psutils-01</guid><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Pyclean</title><link>https://pype.dev/til/pyclean</link><description>I like to keep my workspace clean and one thing that I don The easiest way ( You could accomplish something similar with </description><content:encoded>&lt;p&gt;I like to keep my workspace clean and one thing that I don't personally love looking at is the &lt;code&gt;__pycache__&lt;/code&gt; directory that pops up after running some code.The &lt;code&gt;*.pyc&lt;/code&gt; files that show up there are python bytecode and they are cached to make subsequent runs a tad faster. My stuff never really needs this bonus speed boost and so I came across a neat tool called &lt;code&gt;pyclean&lt;/code&gt;!&lt;/p&gt;&lt;h2 id="pyclean"&gt;Pyclean&lt;/h2&gt;&lt;p&gt;The easiest way (&lt;strong&gt;in my opinion&lt;/strong&gt;) to run &lt;code&gt;pyclean&lt;/code&gt; is to just use &lt;code&gt;pipx run&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox/src  🌱 main 🗑️  ×3🛤️  ×2via 🐍 v3.8.11 &lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  took 9s❯ lsabcmeta.py  __pycache__  python-print-align.py  system-monitor-psutils.pysandbox/src  🌱 main 🗑️  ×3🛤️  ×2via 🐍 v3.8.11 &lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;❯ pipx run pyclean .⚠️  pyclean is already on your PATH and installed at /usr/bin/pyclean. Downloading and running anyway.Cleaning directory .Total &lt;span class="m"&gt;1&lt;/span&gt; files, &lt;span class="m"&gt;1&lt;/span&gt; directories removed.sandbox/src  🌱 main 🗑️  ×3🛤️  ×2via 🐍 v3.8.11 &lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;❯ lsabcmeta.py  python-print-align.py  system-monitor-psutils.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="why-not-bash"&gt;Why not bash?&lt;/h2&gt;&lt;p&gt;You could accomplish something similar with &lt;code&gt;rm **/*.pyc&lt;/code&gt; or &lt;code&gt;find -n '*.py?' -delete&lt;/code&gt; but there's a chance you'll find something you don't love gone.Also this won't help our poor Windows friends out there!&lt;code&gt;pyclean&lt;/code&gt; is fully python so it's OS independent.&lt;/p&gt;&lt;h2 id="credits"&gt;Credits!&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/bittner/pyclean"&gt;repo&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/pyclean</guid><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Truenas-And-Wireguard</title><link>https://pype.dev/truenas-and-wireguard</link><description>One of the most common use cases for self-hosting anything is a file share system. I don I finally have a need to put my TrueNAS box on my wireguard network in </description><content:encoded>&lt;h2 id="nas"&gt;NAS&lt;/h2&gt;&lt;p&gt;One of the most common use cases for self-hosting anything is a file share system. I have been a fan of &lt;a href="https://www.truenas.com/"&gt;TrueNAS&lt;/a&gt; for a while. I currently use TrueNAS Core at home, and plan to consider transitioning to TrueNAS Scale soon.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Blog post forthcoming on that!&lt;/strong&gt; &lt;/p&gt;&lt;h2 id="vpn"&gt;VPN&lt;/h2&gt;&lt;p&gt;I don't write a ton about homelabbing yet but one of the first things to set up whether you have a massive homelab or a little raspberry pi would be a self-hosted VPN.I have notes on wireguard &lt;a href="" title="/wireguard"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I finally have a need to put my TrueNAS box on my wireguard network in order to transfer files to other devices that are outside my LAN.&lt;/p&gt;&lt;p&gt;There is a handy tutorial on setting this up via the GUI &lt;a href="https://www.truenas.com/docs/core/network/wireguard/"&gt;here&lt;/a&gt;.They walk you through setting up 2 tunables wireguard. One to enable the the connection and one to setup the network interface.Next you create a &lt;code&gt;Post Init&lt;/code&gt; script which will check that the right directories exist and will copy the wireguard config that hasn't been made yet to the proper location and finally starts wireguard.&lt;/p&gt;&lt;p&gt;The above is just copy/paste from the tutorial but the final step, although not super tricky, isn't the same for everyone as it depends on your wireguard config and network setup.&lt;/p&gt;&lt;p&gt;The final step is for you create the relevant wireguard config (see my post but I just use &lt;code&gt;pivpn -a&lt;/code&gt;) and send that config over to your TrueNAS box!&lt;/p&gt;&lt;p&gt;For me this final work flow looked like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh user@vpn-serverpivpn -a&amp;lt;follow prompts&amp;gt;scp ~/configs/truenas.conf root@&amp;lt;truenas ip&amp;gt;:/root/wg0.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="bug"&gt;Bug?&lt;/h2&gt;&lt;p&gt;The script in the tutorial for starting the wireguard service is straight forward enough however my TrueNAS box didn't get the wireguard interface up and running on reboot.&lt;/p&gt;&lt;p&gt;Easy enough solution:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh root@&amp;lt;truenas ip&amp;gt;/usr/local/etc/rc.d/wireguard start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can check that the interface is now working with &lt;code&gt;ifconfig&lt;/code&gt; and should see something like the following:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wg0: &lt;span class="nv"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8051&lt;/span&gt;&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; metric &lt;span class="m"&gt;0&lt;/span&gt; mtu &lt;span class="m"&gt;1420&lt;/span&gt;        &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;80000&lt;/span&gt;&amp;lt;LINKSTATE&amp;gt;        inet x.x.x.x --&amp;gt; x.x.x.x netmask 0xffffff00        groups: tun        nd6 &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;101&lt;/span&gt;&amp;lt;PERFORMNUD,NO_DAD&amp;gt;        Opened by PID &lt;span class="m"&gt;1325&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="gotcha"&gt;Gotcha!&lt;/h2&gt;&lt;p&gt;Here's another thing I had to navigate when setting this up.&lt;/p&gt;&lt;p&gt;My &lt;code&gt;pivpn&lt;/code&gt; configuration sets the endpoint for my wireguard clients to &lt;code&gt;paynepride.com:&amp;lt;port forwarded to wireguard server&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;What this means is that when I check the wireguard config for TrueNAS which is on my home network it resolves &lt;code&gt;paynepride.com&lt;/code&gt; to the server I have running my reverse proxy.However! My reverse proxy is not responsible for my vpn traffic and so the traffic was just getting dropped - instead I needed to change the wireguard config just for my truenas box to piont to the local address of my vpn server.This really threw me for a loop today but is just another reminder that if you have network problems it's probably DNS...&lt;/p&gt;&lt;p&gt;Give her the 'ol reboot and now if I check &lt;code&gt;wg&lt;/code&gt; I should see some traffic on my wireguard tunnel!&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt text" src="/images/truenas-wireguard.png" title="truenas-wireguard" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/truenas-and-wireguard</guid><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Skimpy</title><link>https://pype.dev/til/skimpy</link><description>I work with data a lot, but the nature of my job isn When I However, Visidata is a terminal based application and I First thing to do is  This is super nice for</description><content:encoded>&lt;h2 id="eda"&gt;EDA&lt;/h2&gt;&lt;p&gt;I work with data a lot, but the nature of my job isn't to dive super deep into a small amount of datasets,I'm often jumping between several projects every day and need to just get a super quick glance at some tables to get a high level view.&lt;/p&gt;&lt;p&gt;When I'm doing more interactive exploration I've graduated from Jupyter cells with &lt;code&gt;df_N.head()&lt;/code&gt; to using an amazing tool called &lt;a href="https://www.visidata.org/"&gt;visidata&lt;/a&gt;&lt;/p&gt;&lt;p&gt;However, Visidata is a terminal based application and I'm often in an iPython console... so is there a way to move even faster for my super quick summary views?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;yes!&lt;/strong&gt; &lt;/p&gt;&lt;h2 id="skimpy"&gt;Skimpy&lt;/h2&gt;&lt;p&gt;First thing to do is &lt;code&gt;pip install skimpy&lt;/code&gt; and then it's as easy to get some summary stats with &lt;code&gt;skimpy &amp;lt;data&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/skimpy-zsh.png" title="skimpy-zsh" /&gt;&lt;/p&gt;&lt;p&gt;This is super nice for seeing missing values in particular as well as the distribution shape of the data.&lt;/p&gt;&lt;h2 id="ipython"&gt;iPython&lt;/h2&gt;&lt;p&gt;But wait... I just said I'm normally in an iPython session but that was called from zsh.. If I'm hoping back into zsh I might as well use visidata to have more powerful exploration at my fingertips.So... can I see this table quickly without breaking my iPython workflow?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Of course you can with magic!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/skimpy-ipython.png" title="skimpy-ipython" /&gt;&lt;/p&gt;&lt;p&gt;The above assumes you're looking at a file, like you would in the terminal. &lt;code&gt;skimpy&lt;/code&gt; works even better in iPython with &lt;code&gt;from skimpy import skim&lt;/code&gt; then pass any DataFrame to &lt;code&gt;skim&lt;/code&gt;!&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/skimpy-ipython2.png" title="skimpy-ipython2" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/skimpy</guid><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate></item><item><title>self-hosted-media</title><link>https://pype.dev/self-hosted-media</link><description>Self-hosting 1 or several media servers is another common homelab use-case. you-get pip install you-get For example if I wanted to catch up on ancient Chinese m</description><content:encoded>&lt;p&gt;Self-hosting 1 or several media servers is another common homelab use-case.Getting content for your media servers is up to you, but I'll show a few ways here to get content somewhat easily!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;YouTube Disclaimer at Bottom&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="you-get"&gt;you-get&lt;/h2&gt;&lt;p&gt;&lt;code&gt;you-get&lt;/code&gt; is a nice cli for grabbing media content off the web. &lt;/p&gt;&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pip install you-get&lt;/code&gt; or use ad-hoc with &lt;code&gt;pipx run you-get &amp;lt;url&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;&lt;p&gt;For example if I wanted to catch up on ancient Chinese military tactics I may go for &lt;code&gt;The Art of War&lt;/code&gt; off the Internet Archive...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox  🌱 main 🗑️  ×3🛤️  ×6via 🐍 v3.8.11 &lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  took 15s❯ you-get https://archive.org/details/art_of_war_librivox -iSite:       Archive.orgTitle:      The Art of War : Sun Tzu : Free Download, Borrow, and Streaming : Internet ArchiveType:       MP3 &lt;span class="o"&gt;(&lt;/span&gt;audio/mpeg&lt;span class="o"&gt;)&lt;/span&gt;Size:       &lt;span class="m"&gt;3&lt;/span&gt;.87 MiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4055167&lt;/span&gt; Bytes&lt;span class="o"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the &lt;code&gt;-i&lt;/code&gt; is showing me the info of what would be downloaded without the flag (it's like a dry run)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox  🌱 main 🗑️  ×3🛤️  ×6via 🐍 v3.8.11 &lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;❯ you-get https://archive.org/details/art_of_war_librivoxSite:       Archive.orgTitle:      The Art of War : Sun Tzu : Free Download, Borrow, and Streaming : Internet ArchiveType:       MP3 &lt;span class="o"&gt;(&lt;/span&gt;audio/mpeg&lt;span class="o"&gt;)&lt;/span&gt;Size:       &lt;span class="m"&gt;3&lt;/span&gt;.87 MiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4055167&lt;/span&gt; Bytes&lt;span class="o"&gt;)&lt;/span&gt;Downloading The Art of War : Sun Tzu : Free Download, Borrow, and Streaming : Internet Archi.mp3 ... &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;.9/  &lt;span class="m"&gt;3&lt;/span&gt;.9MB&lt;span class="o"&gt;)&lt;/span&gt; ├████████████████████████████████████████████████████████████┤&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/1&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;917&lt;/span&gt; kB/s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now I can toss that mp3 onto my &lt;code&gt;booksonic&lt;/code&gt; server and study for world domination while I do the dishes!&lt;/p&gt;&lt;h2 id="pytube"&gt;pytube&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pytube&lt;/code&gt; is a python implementation of a &lt;a href="##YouTube"&gt;youtube downloader &lt;/a&gt; that works at the command line or in python!&lt;/p&gt;&lt;h3 id="installation_1"&gt;Installation&lt;/h3&gt;&lt;p&gt;&lt;a href="https://pytube.io/en/latest/"&gt;docs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;pip install pytube&lt;/code&gt;&lt;/p&gt;&lt;h3 id="usage_1"&gt;Usage&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pytube&lt;/code&gt; has a lot of functionality, but a quick one would be the &lt;code&gt;--list&lt;/code&gt; so you can see what qualities are available&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox   main ️  ×3️  ×7via  v3.8.11 &lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  took 2m49s❯ pytube https://www.youtube.com/watch&lt;span class="se"&gt;\?&lt;/span&gt;v&lt;span class="se"&gt;\=&lt;/span&gt;LDU_Txk06tM  --listLoading video...&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;17&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/3gpp&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;144p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;8fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4v.20.3&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.2&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;18&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;360p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.42001E&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.2&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;22&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;720p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.64001F&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.2&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;313&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2160p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;401&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2160p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.12M.08&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;271&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1440p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1440p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.12M.08&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;137&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1080p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.640028&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;248&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1080p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;399&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1080p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.08M.08&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;136&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;720p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d401f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;247&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;720p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;398&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;720p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.05M.08&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;135&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;480p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d401f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;244&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;480p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;397&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;480p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.04M.08&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;134&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;360p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d401e&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;243&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;360p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;396&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;360p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.01M.08&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;133&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;240p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d4015&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;242&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;240p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;395&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;240p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.00M.08&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;160&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;144p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d400c&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;278&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;144p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;394&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;144p&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.00M.08&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;139&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;48kbps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.5&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;140&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/mp4&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;128kbps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.2&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;249&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;50kbps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opus&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;250&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;70kbps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opus&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;Stream: &lt;span class="nv"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;251&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/webm&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;160kbps&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opus&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pytube &amp;lt;url&amp;gt; --itag &amp;lt;&amp;gt;&lt;/code&gt; will download the specific &lt;code&gt;itag&lt;/code&gt; from the list.&lt;/p&gt;&lt;p&gt;Notice that some &lt;code&gt;itags&lt;/code&gt; are videos and others audio - so you can download just the music of a YT video.&lt;/p&gt;&lt;p&gt;&lt;code&gt;pytube&lt;/code&gt; also works in python...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;↪&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="mf"&gt;.8.11&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;↪&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="mf"&gt;.8.11&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.youtube.com/watch?v=LDU_Txk06tM&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;17&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/3gpp&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;144p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;8fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4v.20.3&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.2&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;18&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;360p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.42001E&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.2&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;22&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;720p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.64001F&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.2&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;313&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2160p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;401&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2160p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.12M.08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;271&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1440p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1440p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.12M.08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;137&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1080p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.640028&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;248&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1080p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;399&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1080p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.08M.08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;136&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;720p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d401f&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;247&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;720p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;398&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;720p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.05M.08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;135&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;480p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d401f&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;244&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;480p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;397&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;480p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.04M.08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;134&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;360p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d401e&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;243&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;360p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;396&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;360p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.01M.08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;133&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;240p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d4015&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;242&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;240p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;395&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;240p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.00M.08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;160&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;144p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;avc1.4d400c&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;278&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;144p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vp9&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;394&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;144p&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30fps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;vcodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;av01.0.00M.08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;139&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;48kbps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.5&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;140&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/mp4&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;128kbps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4a.40.2&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;249&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;50kbps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opus&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;250&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;70kbps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opus&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;251&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio/webm&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;abr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;160kbps&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;acodec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opus&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="youtube-frontends"&gt;YouTube Frontends&lt;/h2&gt;&lt;p&gt;There's 2 really good options for self-hosting a YT front-end...&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/bbilly1/tubearchivist"&gt;Tube Archivist&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/Tzahi12345/YoutubeDL-Material"&gt;YouTubeDL-Material&lt;/a&gt;&lt;/p&gt;&lt;p&gt;They have their pros and cons.You can also build yourself with the above utilities and use Plex or Jellyfin to serve up videos...&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Your self-hosting journey is up to you!&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="youtube"&gt;YouTube&lt;/h2&gt;&lt;p&gt;Downloading YouTube videos is a bit of a sore topic... Mainly you don't to hurt creators who rely on YT ad revenue for their livlihood.&lt;/p&gt;&lt;p&gt;Then again, maybe you're a vigilante who knows that YT also monetizes videos for their &lt;em&gt;own&lt;/em&gt; gain and that the creators don't see that money either!&lt;/p&gt;&lt;p&gt;The solution is pretty easy and is 2-fold...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Download YT videos&lt;/li&gt;&lt;li&gt;Personally support the content creators you follow via paypall, patreon, or whatever else they might have set-up.... even a buck or two a month is more than they'd get from your ad revenue explicitly plus it all goes to them!&lt;/li&gt;&lt;/ol&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/self-hosted-media</guid><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Starship</title><link>https://pype.dev/starship</link><description>If you spend time in the terminal then you One of the first steps for me loving my terminal was a beautiful prompt... The default sh/bash/zsh prompts are... to </description><content:encoded>&lt;p&gt;If you spend time in the terminal then you'll want it to look somewhat pleasing to the eye.I used to ssh into servers with no customization, use &lt;code&gt;vi&lt;/code&gt;  to edit a file or two, then get back to my regularly scheduled programming in VS C**e...&lt;/p&gt;&lt;p&gt;One of the first steps for me loving my terminal was a beautiful prompt... &lt;/p&gt;&lt;h2 id="prompt"&gt;Prompt&lt;/h2&gt;&lt;p&gt;The default sh/bash/zsh prompts are... to put it lightly... garbage... I can't speak for other shells like fish simply because I do not use them but let me justify my trash talk.&lt;/p&gt;&lt;p&gt;Here's the default &lt;code&gt;sh&lt;/code&gt; prompt...&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/sh-prompt.png" /&gt;&lt;/p&gt;&lt;p&gt;Then switching to &lt;code&gt;zsh&lt;/code&gt; you get something marginally better (plus tab completion!)&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/zsh-prompt.png" /&gt;&lt;/p&gt;&lt;p&gt;But this still is super gross... there's nothing to indicate file types and no status information readily available (ie. &lt;code&gt;git status&lt;/code&gt; etc.)&lt;/p&gt;&lt;h2 id="oh-my-zsh"&gt;Oh-My-Zsh!&lt;/h2&gt;&lt;p&gt;Now there are several ways to make your prmompt nicer depending on your shell (terminal emulator plays a role too).Now I use &lt;code&gt;zsh&lt;/code&gt; and there's a great tool out there &lt;a href="https://ohmyz.sh/"&gt;oh-my-zsh&lt;/a&gt; that brings a crazy amount of customization to the terminal experience.&lt;/p&gt;&lt;p&gt;I do not use &lt;code&gt;oh-my-zsh&lt;/code&gt; for theming though and that's simply because of my other choices - I use &lt;code&gt;kitty&lt;/code&gt; themes since I understood the implementation better.Kitty themes though - do not give me a nice prompt.&lt;/p&gt;&lt;p&gt;The default prompt you get with &lt;code&gt;oh-my-zsh&lt;/code&gt; themes isn't bad though (and you can pick from several default themes)...&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/zsh-oh-my-zsh-prompt.png" /&gt;&lt;/p&gt;&lt;p&gt;Notice that you get some nice coloring and some default &lt;code&gt;git&lt;/code&gt; status stuff, mainly the branch you are on.There's plugins to show you more and that's all well and good, but again it's not my choice...&lt;/p&gt;&lt;p&gt;If I don't use this then what's my goto?&lt;/p&gt;&lt;h2 id="starship"&gt;Starship&lt;/h2&gt;&lt;p&gt;&lt;a href="https://starship.rs/"&gt;starship&lt;/a&gt; is a cross-shell prompt with nice default and super easy customizaton!&lt;/p&gt;&lt;p&gt;To get started click that link and follow the "Getting Started" button - it's incredibly fast to get up and running with sane defaults.&lt;/p&gt;&lt;p&gt;The default starship config is plenty nice but I got a little tired of emojis in my prompt and wanted to switch to icons instead...&lt;/p&gt;&lt;p&gt;To get started with your own customizaton you add a &lt;code&gt;starship.toml&lt;/code&gt; file to &lt;code&gt;~/.config&lt;/code&gt; My starship config is found &lt;a href="https://github.com/nicpayne713/dotfiles/blob/main/starship/.config/starship.toml"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note you need a font installed patched with nerdfonts - I use JetBrains Mono&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now I have a beautiful prompt with relevant information that's a dream to look at!&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/zsh-starship-prompt.png" /&gt;&lt;/p&gt;&lt;p&gt;I have configured my starship to show me relevant &lt;code&gt;git status&lt;/code&gt; options (stashes, untracked files, etc etc.)I also have starship show me if I'm in a git repo, what branch I'm on, if I'm in a python project and if so what virtual environment is active.I do some work in AWS at work and so I have starship show me if my &lt;code&gt;aws cli&lt;/code&gt; is configured to the right region for whichever project I'm in!&lt;/p&gt;&lt;p&gt;There's a billion more options and after a few minutes of play it becomes really easy and intuitive to customize colors, icons, etc.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/starship</guid><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Plotly-And-Streamlit</title><link>https://pype.dev/plotly-and-streamlit</link><description>I use  At the highest level, streamlit lets you write a python script and call  I I Suffice it to say it For my  See  First step is to initialize some objects t</description><content:encoded>&lt;h2 id="streamlit"&gt;Streamlit&lt;/h2&gt;&lt;p&gt;I use &lt;code&gt;streamlit&lt;/code&gt; for any EDA I ever have to do at work.It's super easy to spin up a small dashboard to filter and view dataframes in, live, without the fallbacks of Jupyter notebooks (kernels dying, memory bloat, a billion "Untitled N.ipynb" files, etc.)&lt;/p&gt;&lt;p&gt;At the highest level, streamlit lets you write a python script and call &lt;code&gt;streamlit run my_script.py&lt;/code&gt; which will open up a web server with your streamlit stuff. The dashboard refreshes whenever you change the script so you can add capabilities in real time, super fast!&lt;/p&gt;&lt;p&gt;I'll show an example of using &lt;code&gt;streamlit&lt;/code&gt; and &lt;code&gt;plotly&lt;/code&gt; to make a live dashboard to monitor system memory usage with &lt;code&gt;psutil&lt;/code&gt;.This is apart of my posts on &lt;a href="/psutil"&gt;psutil&lt;/a&gt; and &lt;a href="/deques"&gt;deques&lt;/a&gt;...&lt;/p&gt;&lt;p&gt;&lt;strong&gt;example at the bottom!&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="plotly"&gt;Plotly&lt;/h2&gt;&lt;p&gt;I'm not going to make a big time intro to plotly here - there's a billion resources on the interwebs and the docs are really good.&lt;/p&gt;&lt;p&gt;Suffice it to say it's my goto plotting library for basically any and all needs.I'm currently exploring it for live data streaming as I'm not sure it's the best solution but it's the one I'm familiar with.&lt;/p&gt;&lt;p&gt;For my &lt;a href="https://github.com/nicpayne713/not-netdata"&gt; not-netdata &lt;/a&gt; project of visualizing live system resource data I  first need a way of appending data and popping data in and out of an array at every data refresh cycle to keep my plots looking nice with a fixed time window.&lt;/p&gt;&lt;p&gt;See &lt;a href="/deques"&gt;deques&lt;/a&gt; for a short intro to the datatype I'm using.&lt;/p&gt;&lt;p&gt;First step is to initialize some objects to store data in.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MutableSequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;arr_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arr_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;used_memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arr_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a dictionary that I'll store deques in. The dictionary keys will be the type of data, in this case &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;used_memory&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I fix an array size, &lt;code&gt;arr_size&lt;/code&gt; to just 10 for now&lt;/p&gt;&lt;p&gt;Then I initialize the values for &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;used_memory&lt;/code&gt; as &lt;code&gt;deque&lt;/code&gt;s of length &lt;code&gt;arr_size&lt;/code&gt;.Simple enough!&lt;/p&gt;&lt;p&gt;Next is to fill those deques with some relevant data.I'm not actually sure if this is the best way to do this but here's what I have done so far:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;refresh_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;    &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtual_memory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;used_memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;used_memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you ignore my usage of &lt;code&gt;global&lt;/code&gt; you'll see that I can just &lt;code&gt;append&lt;/code&gt; to each deque like it was a list.&lt;/p&gt;&lt;p&gt;But then to keep the relevant data in the deque, and to keep the length fixed, I simply &lt;code&gt;popleft&lt;/code&gt; to remove the oldest datapoint!&lt;/p&gt;&lt;h2 id="a-trivial-dashboard"&gt;A trivial dashboard&lt;/h2&gt;&lt;p&gt;Now I'll prove just how easy it is to get a live data dashboard up and running with just a few lines of code thanks to streamlit!&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;memory chart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;refresh_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plotly_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;            &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;used_memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Memory usage stored in a deque!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;               &lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;st&lt;/code&gt; is the streamlit alias (imports shows at the bottom full example).&lt;code&gt;st.header&lt;/code&gt; puts a nice header on the page.&lt;code&gt;st.empty&lt;/code&gt; initializes an empty &lt;code&gt;streamlit container&lt;/code&gt; in which we'll put a &lt;code&gt;plotly.express&lt;/code&gt; figure.&lt;/p&gt;&lt;p&gt;At each iteration we'll &lt;code&gt;refresh_data()&lt;/code&gt; which &lt;code&gt;appends&lt;/code&gt; and &lt;code&gt;pops&lt;/code&gt; data in the deques in the &lt;code&gt;data&lt;/code&gt; dictionary.Then we update the &lt;code&gt;stats&lt;/code&gt; container with a plotly graph and the refresh happens seamlessly.&lt;/p&gt;&lt;p&gt;All in all the script looks like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MutableSequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;express&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;streamlit&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;st&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MutableSequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;arr_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arr_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;used_memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arr_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;refresh_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;    &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtual_memory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;used_memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;used_memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memory_chart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;used_memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Memory usage stored in a deque!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;memory chart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;refresh_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plotly_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memory_chart&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can save this as &lt;code&gt;my_dash.py&lt;/code&gt; and run with &lt;code&gt;streamlit run my_dash.py&lt;/code&gt; and should see something like the following!&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/plotly-streamlit.gif" title="plotly-streamlit-gif" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/plotly-and-streamlit</guid><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Deques</title><link>https://pype.dev/til/deques</link><description>I am working on a project to create a small system monitoring dashboard using the python  The repo is  I I needed a way to refresh my plotly charts with a fixed</description><content:encoded>&lt;p&gt;I am working on a project to create a small system monitoring dashboard using the python &lt;code&gt;psutil&lt;/code&gt; library.&lt;/p&gt;&lt;p&gt;The repo is &lt;a href="https://github.com/nicpayne713/not-netdata"&gt;here&lt;/a&gt; (if you want actual system monitoring please use &lt;a href="https://www.netdata.cloud/"&gt;netdata&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;I'm using &lt;code&gt;streamlit&lt;/code&gt; and &lt;code&gt;plotly&lt;/code&gt; for the webserver, design, and plotting at the moment.&lt;/p&gt;&lt;h2 id="my-use-case"&gt;My Use Case&lt;/h2&gt;&lt;p&gt;I needed a way to refresh my plotly charts with a fixed window of time so that I'm able to just see relevant recent data instead of cramming all data for all time into one plot that's 500 pixels wide...&lt;/p&gt;&lt;p&gt;Checking the length of arrays or lists every time I get a new piece of data feels kind of dumb and I thought "python must have a way to do this"...&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"This" meaning, update values in a fixed length array without reallocating memory or recreating a copy of the list&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="deques"&gt;Deques&lt;/h2&gt;&lt;p&gt;Enter the &lt;code&gt;deque&lt;/code&gt;. It means "double ended queue" and is in general an &lt;code&gt;Iterable&lt;/code&gt; that you can append values to either side or pop values from either side.&lt;/p&gt;&lt;p&gt;The init signature is straightforward enough and I'm sure there's more to them than I know yet but here's how I use it...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="n"&gt;my_deque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us &lt;code&gt;my_deque&lt;/code&gt;, created from an iterable, with several familiar methods like &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;extend&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;, etc.However there's some new ones too such as &lt;code&gt;appendleft&lt;/code&gt; and &lt;code&gt;popleft&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_deque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appendleft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dequqe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;my_deque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_deque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are handy ways to manipulate the iterable that I needed for the arrays I plot with plotly!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;See my follow-up to this on using Deques with plotly and streamlit to create a quick "dashboard" with live streaming data!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="/plotly-and-streamlit"&gt;follow-up&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/deques</guid><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Polybar-01</title><link>https://pype.dev/polybar-01</link><description>I use it with i3-gaps on Ubuntu for work and it makes my day just that much better to have a clean and elegant bar with the things in it that I care about. The </description><content:encoded>&lt;p&gt;&lt;a href="https://github.com/polybar/polybar"&gt;polybar&lt;/a&gt; is an awesome and super customizable status bar for your desktop environment.&lt;/p&gt;&lt;p&gt;I use it with i3-gaps on Ubuntu for work and it makes my day just that much better to have a clean and elegant bar with the things in it that I care about.&lt;/p&gt;&lt;p&gt;The GitHub has all the instructions you'd need to install and get started with an example.&lt;/p&gt;&lt;p&gt;I want to make some notes about how I use polybar and customize it.&lt;/p&gt;&lt;h2 id="organization"&gt;Organization&lt;/h2&gt;&lt;p&gt;First of all, I recently moved my polybar config out of one config file into a modular structure that keeps my config files small and easiser to edit.&lt;/p&gt;&lt;p&gt;You can find my config &lt;a href="https://github.com/nicpayne713/dotfiles/tree/main/polybar"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The apps or services you put into polybar are called &lt;code&gt;modules&lt;/code&gt;.I have moved all of my modules into their own config files and I source them with one centralized &lt;code&gt;include-modules.ini&lt;/code&gt; config.&lt;/p&gt;&lt;p&gt;This separation also makes it easier for me to keep my home and work polybars as in sync as possible without duplicating a ton of config!&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./polybar├── colors.ini├── config.ini├── fonts.ini├── home-modules.ini├── include-modules.ini├── launch.sh├── modules│   ├── aws.ini│   ├── battery.ini│   ├── bluetooth.ini│   ├── cisco.ini│   ├── cpu.ini│   ├── date.ini│   ├── eth.ini│   ├── eth_work.ini│   ├── i3.ini│   ├── memory.ini│   ├── nm-editor.ini│   ├── powermenu.ini│   ├── pulseaudio-control.ini│   ├── pulseaudio.ini│   ├── rofi.ini│   ├── vpn.ini│   └── wlan.ini└── work-modules.ini&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;24&lt;/span&gt; files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To break this down there are several configs to see:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;colors.ini&lt;/code&gt; is what you'd expect - a set of defined colors like &lt;code&gt;foreground&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt;, etc.&lt;/li&gt;&lt;li&gt;&lt;code&gt;config.ini&lt;/code&gt; is the general polybar config file where bars are defined. Currently in mine there is a &lt;code&gt;work&lt;/code&gt; and &lt;code&gt;home&lt;/code&gt; bar defined with the modules sourced in from the explicit config files.&lt;/li&gt;&lt;li&gt;&lt;code&gt;fonts.ini&lt;/code&gt; is like &lt;code&gt;colors.ini&lt;/code&gt; -&amp;gt; you put fonts here. I recommend using a font patched with NerdFont so you get fancy icons! (I use JetBrains Mono)&lt;/li&gt;&lt;li&gt;&lt;code&gt;include-modules.ini&lt;/code&gt; is where I list out all the config files in &lt;code&gt;modules/&lt;/code&gt; so I can basically source just the &lt;code&gt;include-modules.ini&lt;/code&gt; without explicitly sourcing every module's config in every polybar defintion.&lt;/li&gt;&lt;li&gt;&lt;code&gt;launch.sh&lt;/code&gt; is a simple shell script to launch the polybar! You'll see mine takes multiple monitors into consideration which I manage via environment variables setup in my &lt;code&gt;.zshenv&lt;/code&gt; file that is different for my work and home setups.&lt;/li&gt;&lt;li&gt;Finally there are &lt;code&gt;home-modules.ini&lt;/code&gt; and &lt;code&gt;work-modules.ini&lt;/code&gt; which is where, for each of my bars, I define which modules I want!&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="config"&gt;Config&lt;/h2&gt;&lt;p&gt;My &lt;code&gt;config.ini&lt;/code&gt; file has 2 bar definitions in it - here's my home one:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;include-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;$DOTFILES/polybar/include-modules.ini&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[bar/home]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;monitor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;${env:MONITOR:}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;100%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;25&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;radius&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;8.0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;fixed-center&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;${colors.background}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;foreground&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;${colors.foreground}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;include-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;$DOTFILES/polybar/fonts.ini&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;include-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;$DOTFILES/polybar/home-modules.ini&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It should be easy to follow - I bring in the &lt;code&gt;include-modules&lt;/code&gt;, set a few colors for the bar like &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;foreground&lt;/code&gt; which are sourced by the &lt;code&gt;colors.ini&lt;/code&gt;, and finally bring in my fonts and home modules via their config files!&lt;/p&gt;&lt;p&gt;It's super easy to then change one or two things in the appropriate places rather than combing through one massive config. This also makes it easy for me to seperate my work and home setups.&lt;/p&gt;&lt;h2 id="modules"&gt;Modules&lt;/h2&gt;&lt;p&gt;There are several builtin modules, like &lt;code&gt;wlan&lt;/code&gt; which gives your wifi status right there in polybar.&lt;/p&gt;&lt;p&gt;You can also make custom ones. A big-time custom one for me is an indicator of whether or not I have an active AWS token for working with the &lt;code&gt;aws&lt;/code&gt; cli.&lt;/p&gt;&lt;p&gt;This is defined in&lt;code&gt;modules/aws.ini&lt;/code&gt; and it looks like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[module/aws]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;5.0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;custom/script&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;has_aws_token&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;click-left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;$HOME/.local/bin/auto_get_aws_token&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;click-right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;rm -rf ~/.aws/credentials&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every &lt;code&gt;5&lt;/code&gt; seconds my &lt;code&gt;has_aws_token&lt;/code&gt; script is ran.That script looks like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; auto_proxyaws sts get-caller-identity &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%{T5}%{F#00ff00}  %{F-}%{T-}&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;||(&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%{T5}%{F#ff0000} %{F-}%{T-}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See how the script echos out a colored icon to indicate the status of my token -&amp;gt; that icon is displayed in the polybar so I have real-time (5 second latency) status of whether or not I can do things in my AWS environment.&lt;/p&gt;&lt;p&gt;In the module I also configured actions for &lt;code&gt;click-left&lt;/code&gt; and &lt;code&gt;click-right&lt;/code&gt; which are as straight forward as could be.&lt;/p&gt;&lt;h2 id="my-issues-with-i3"&gt;My issues with i3&lt;/h2&gt;&lt;p&gt;There's a few things to be considerate of if you use &lt;code&gt;i3&lt;/code&gt; such as needing a workaround for a centered bar that &lt;strong&gt;is not&lt;/strong&gt; the full width of the monitor.Polybar can look really nice by not taking up the full width of the bar which you can configure in &lt;code&gt;config.ini&lt;/code&gt; with these options:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;90%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="na"&gt;offset-x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;5%  # set to (100 - width) / 2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However due to an issue with polybar and i3 you need to also set &lt;code&gt;override-redirect = true&lt;/code&gt;. BUT then you'll notice that the bar overlaps your i3 windows... ARGH! what do we do?&lt;/p&gt;&lt;p&gt;Quick work around is to set &lt;code&gt;gaps top&lt;/code&gt; in your i3 config if you use i3-gaps... if not? well, idk... use gaps... lol&lt;/p&gt;&lt;p&gt;However this introduces another issue - which is then full screen windows will  have polybar sitting on top of them...&lt;/p&gt;&lt;p&gt;This isn't necessarily a deal breaker, but for me it's worth it to just have the bar go 100% width.&lt;/p&gt;&lt;h2 id="fin"&gt;FIN&lt;/h2&gt;&lt;p&gt;There's a tiny intro to polybar and how I organize my config files so things are easy to edit and manage!Feel free to grab mine and try it out!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/polybar-01</guid><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Vim-Spell-Check</title><link>https://pype.dev/til/vim-spell-check</link><description>set: spell spelllang=en_us Sometimes there Common example: package names plotly You can easily add these to your vim config by hitting </description><content:encoded>&lt;p&gt;&lt;strong&gt;Did you know you can spell check in Vim?!&lt;/strong&gt;&lt;/p&gt;&lt;!DOCTYPE html&gt;&lt;p&gt;&lt;html&gt;   &lt;head&gt;      &lt;title&gt;Vim Spell check&lt;/title&gt;   &lt;/head&gt;&lt;/p&gt;&lt;body&gt;      &lt;h3&gt;Without...&lt;/h3&gt;      &lt;p&gt;Here is a missspelled word.&lt;/p&gt;      &lt;h3&gt;With!&lt;/h3&gt;      &lt;p&gt;Here is a &lt;u&gt;missspelled&lt;/u&gt; word.&lt;/p&gt;   &lt;/body&gt;&lt;p&gt;&lt;/html&gt;&lt;/p&gt;&lt;h2 id="what-is-this-magic"&gt;What is this magic???&lt;/h2&gt;&lt;p&gt;&lt;code&gt;set: spell spelllang=en_us&lt;/code&gt;&lt;/p&gt;&lt;h2 id="custom-words"&gt;Custom words?&lt;/h2&gt;&lt;p&gt;Sometimes there's things that are words to you but not the default spell checker...&lt;/p&gt;&lt;p&gt;Common example: package names!&lt;/p&gt;&lt;p&gt;&lt;code&gt;plotly&lt;/code&gt;, &lt;code&gt;streamlit&lt;/code&gt;, &lt;code&gt;psutil&lt;/code&gt;, etc etc...&lt;/p&gt;&lt;p&gt;You can easily add these to your vim config by hitting &lt;code&gt;zw&lt;/code&gt; ontop of the word!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/vim-spell-check</guid><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Ipython-Prompt</title><link>https://pype.dev/ipython-prompt</link><description>I have a  Now... I spend quite a bit of time in ipython every day and I got kind of sick of the vanilla experience and wanted something that more closely matche</description><content:encoded>&lt;p&gt;I have a &lt;a href="/starship"&gt;post on starship&lt;/a&gt; where I have some notes on how I use starship to make my zsh experience great with a sweet terminal prompt.&lt;/p&gt;&lt;p&gt;Now... I spend quite a bit of time in ipython every day and I got kind of sick of the vanilla experience and wanted something that more closely matched my starship prompt.&lt;/p&gt;&lt;p&gt;There's more to customizing ipython I know for sure but here's 2 things I have going for me...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;I use &lt;a href="https://pypi.org/project/rich/"&gt;&lt;code&gt;rich&lt;/code&gt;&lt;/a&gt; authored by @&lt;a href="https://twitter.com/willmcgugan"&gt;Will McGugan&lt;/a&gt; which makes much of my ipython experience great.I won't write about that here but you can find my &lt;code&gt;rich&lt;/code&gt; config &lt;a href="https://github.com/nicpayne713/dotfiles/blob/main/ipython/.ipython/profile_default/startup/01-rich_init.py"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;I used &lt;code&gt;pygments&lt;/code&gt; to customize the ipython prompt with my &lt;code&gt;ipython_config.py&lt;/code&gt; and a startup script, next to my &lt;code&gt;rich&lt;/code&gt; one, called &lt;code&gt;99-prompt.py&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;The scripts inside &lt;code&gt;~/.ipython/&amp;lt;profile&amp;gt;/startup&lt;/code&gt; are executed in lexigraphical order, so it's nice to name things in the 10's to give room for adding scripts in between others down the line.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="my-prompt"&gt;My prompt&lt;/h2&gt;&lt;p&gt;My zsh prompt looks a little something like this:&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/zsh-starship-prompt.png" /&gt;&lt;/p&gt;&lt;p&gt;And after my ipython customiztion it currently (subject to much change but this is as of my dotfiles commit #d22088f6be81a58b5f7dfb73b7a4088cbdd9fece on &lt;code&gt;main&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/ipython-prompt.png" /&gt;&lt;/p&gt;&lt;p&gt;Now in ipython I have an indicator of my working directory, git branch, python environment, and a note that I'm in &lt;code&gt;ipython&lt;/code&gt; and not &lt;code&gt;zsh&lt;/code&gt;.I also configured my prompt to warn me if I'm &lt;em&gt;not&lt;/em&gt; in a git directory!&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt Text" src="/images/ipython-prompt-no-git.png" /&gt;&lt;/p&gt;&lt;p&gt;All in all the customization isn't too bad with just 2 specific files.&lt;/p&gt;&lt;h2 id="ipython_configpy"&gt;ipython_config.py&lt;/h2&gt;&lt;p&gt;There's several use cases for &lt;code&gt;ipython_config.py&lt;/code&gt; files in several areas on a pc - sometimes you want a common config across users, so you'd drop one in &lt;code&gt;/etc/ipython&lt;/code&gt; and othertimes you have your own which is probably at &lt;code&gt;~/.ipython&lt;/code&gt;&lt;/p&gt;&lt;p&gt;My ipython config mostly has colors defined on &lt;code&gt;pygment tokens&lt;/code&gt; plus a few autorun commands and &lt;code&gt;pyflyby&lt;/code&gt; (see my friend Waylon's post on pyflyby &lt;a href="https://waylonwalker.com/pyflyby/"&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;I wanted to match my ipython somewhat to my tmux and vim color schemes, which I model after the vim-airline theme &lt;code&gt;night owl&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;After picking some some colors and saving variables it's a matter of setting colors per token and then referencing those tokens in your version of &lt;code&gt;99-prompt.py&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can check out my &lt;code&gt;ipython_config.py&lt;/code&gt; &lt;a href="https://github.com/nicpayne713/dotfiles/blob/home/ipython/.ipython/profile_default/ipython_config.py"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For example, I can set &lt;code&gt;Token.Name.Function&lt;/code&gt; to black, and in &lt;code&gt;ipython&lt;/code&gt; then a function's definition will appear in black text. I set mine to cyan to match my theme.&lt;/p&gt;&lt;p&gt;For the prompt colors just match the keyword in &lt;code&gt;c.TerminalInteractiveShell.highlighting_style_overrides&lt;/code&gt; with what is referenced inside &lt;a href="https://github.com/nicpayne713/dotfiles/blob/home/ipython/.ipython/profile_default/startup/99-prompt.py"&gt;99-prompt.py&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For example, &lt;code&gt;Token.Prompt&lt;/code&gt; is set to &lt;code&gt;bold grey&lt;/code&gt; which gives me the bold chevron symbol you see in the above image that looks like my zsh prompt &lt;/p&gt;&lt;p&gt;Then in &lt;code&gt;99-prompt.py&lt;/code&gt; I have this set for the prompt:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prompt&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;❯ &amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="99-promptpy"&gt;99-prompt.py&lt;/h2&gt;&lt;p&gt;You don't need to name your script &lt;code&gt;99-prompt.py&lt;/code&gt;, but I wanted to know that it was for my prompt and I wanted it executed last so it made sense.&lt;/p&gt;&lt;p&gt;Here I have &lt;code&gt;MyPrompt&lt;/code&gt; class with the prompt symbol defined as above and several other things... &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Prompts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;in_prompt_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OutPrompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subheading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_branch&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_branch&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;via &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;get_venv&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ipython&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;            &lt;span class="p"&gt;(&lt;/span&gt;                &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prompt&lt;/span&gt;                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_execution_succeeded&lt;/span&gt;                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s2"&gt;&amp;quot;❯ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice I have 2 custom functions here, &lt;code&gt;get_branch&lt;/code&gt; and &lt;code&gt;get_venv&lt;/code&gt; which grab some git info and python env info and return strings I can dump into my prompt as shown above.&lt;/p&gt;&lt;p&gt;To finish you drop &lt;code&gt;ip = get_ipython()&lt;/code&gt; and &lt;code&gt;ip.prompts = MyPrompt(ip)&lt;/code&gt; at the bottom of your prompt script and you should be in custom prompt city!&lt;/p&gt;&lt;h2 id="end"&gt;End&lt;/h2&gt;&lt;p&gt;This is more or less notes for myself on how this works - drop by my &lt;a href="https://github.com/nicpayne713/dotfiles/tree/home/ipython"&gt;ipython config&lt;/a&gt; in my dotfiles repo to see my full configs for ipython!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/ipython-prompt</guid><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate></item><item><title>File-Length</title><link>https://pype.dev/til/file-length</link><description>I have a specific need for counting the number of lines in a file quickly. To get that list I run an internal tool like this: This simply parses our internal li</description><content:encoded>&lt;p&gt;I have a specific need for counting the number of lines in a file quickly.At work we use S3 for data storage during our Kedro pipeline development, and in the development process we may end up orphaning several datasets.In order to keep our workspace clean I have a short utility that compares the datasets in a Kedro DataCatalog with the files in the relevant S3 location.&lt;/p&gt;&lt;p&gt;To get that list I run an internal tool like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kedro our-liter &lt;span class="p"&gt;|&lt;/span&gt; grep s3 &amp;gt;&amp;gt; orphaned_datasets.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This simply parses our internal linter for the lines releated to my s3 linter utility and pipes those lines to a file.&lt;/p&gt;&lt;p&gt;To get a quick idea of how out of wack a pipeline is I could open the text file in vim, git it with the &lt;code&gt;G&lt;/code&gt; and see what line number I'm on but I'm way too lazy for that...&lt;/p&gt;&lt;h2 id="awk"&gt;AWK&lt;/h2&gt;&lt;p&gt;&lt;code&gt;awk 'END {print NR}' orphaned_datasets.txt&lt;/code&gt; gives me the number of lines and I can alias this to whatever feels appropriate in my &lt;code&gt;zshrc&lt;/code&gt;!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;built-ins for the win!&lt;/strong&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/file-length</guid><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate></item><item><title>And-vs-&amp;</title><link>https://pype.dev/and-vs-&amp;</link><description>I often struggle to remember the correct way to do  I remember learning long long ago that  Python  However we can use  Here If we compare  Let bool(my_list) So</description><content:encoded>&lt;p&gt;I often struggle to remember the correct way to do &lt;code&gt;and&lt;/code&gt; type comparisons when working in pandas.&lt;/p&gt;&lt;p&gt;I remember learning long long ago that &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; are different, the former being lazy boolean evaluation whereas the latter is a bitwise operation.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;I learned a lot from &lt;a href="https://stackoverflow.com/questions/22646463/and-boolean-vs-bitwise-why-difference-in-behavior-with-lists-vs-nump"&gt;this SO post&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="lists"&gt;Lists&lt;/h2&gt;&lt;p&gt;Python &lt;code&gt;list&lt;/code&gt; objects can contain unlike elements - ie. &lt;code&gt;[True, 'foo', 1, '1', [1,2,3]]&lt;/code&gt; is a valid list with booleans, strings, integers, and another list.Because of this, we can't use &lt;code&gt;&amp;amp;&lt;/code&gt; to compare two lists since they can't be combined in a consistent and meaningful way.&lt;/p&gt;&lt;p&gt;However we can use &lt;code&gt;and&lt;/code&gt; since it doesn't do bitwise operations, it just evaluates the boolean value of the list (basically if it's non-empty then &lt;code&gt;bool(my_list)&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;Here's an example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we compare &lt;code&gt;my_list&lt;/code&gt; with &lt;code&gt;another_list&lt;/code&gt; using &lt;code&gt;and&lt;/code&gt; then the comparision will go:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if bool(my_list):    if bool(another_list):       &amp;lt;operation&amp;gt;     else:       break&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let's see another example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;another_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;another_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;bool(my_list)&lt;/code&gt; evaluated to &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;bool(another_list)&lt;/code&gt; &lt;em&gt;also&lt;/em&gt; evaluated to &lt;code&gt;True&lt;/code&gt; even though it's full of &lt;code&gt;False&lt;/code&gt; values because the object is non-empty.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;another_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So using &lt;code&gt;and&lt;/code&gt; in this case results in a &lt;code&gt;True&lt;/code&gt; conditional, so the &lt;code&gt;print&lt;/code&gt; statement is executed.&lt;/p&gt;&lt;p&gt;Feels kind of counter-intuitive at first glance, to me anyways...&lt;/p&gt;&lt;p&gt;However, we can't use &lt;code&gt;&amp;amp;&lt;/code&gt; because there isn't a meaningful to do bitwise operations over these two lists:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;another_list&lt;/span&gt;&lt;span class="err"&gt;╭───────────────────────────────&lt;/span&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;────────────────────────────────╮&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a2a16cebb3da&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                                              &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;╰──────────────────────────────────────────────────────────────────────────────────────────────────╯&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unsupported&lt;/span&gt; &lt;span class="n"&gt;operand&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;list&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="numpy"&gt;Numpy&lt;/h2&gt;&lt;p&gt;&lt;code&gt;numpy&lt;/code&gt; arrays are special and they have a lot of fancy vectorization utilities built-in which make them great and fast for mathematical operations but now our logical comparisons need to be handled with a different kind of care.&lt;/p&gt;&lt;p&gt;First thing though - without some trickery they do not hold mixed data types like a &lt;code&gt;list&lt;/code&gt; does (necessary, I think, for the vectorized optimization that numpy is built on top of)&lt;/p&gt;&lt;p&gt;With that out of the way here's the main thing for this post, we can't just evaluate the &lt;code&gt;bool&lt;/code&gt; of an array - numpy says no no no.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;True&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;False&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;U21&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;╭───────────────────────────────&lt;/span&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;────────────────────────────────╮&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4e8&lt;/span&gt;&lt;span class="n"&gt;c5dd85b93&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                                              &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;╰──────────────────────────────────────────────────────────────────────────────────────────────────╯&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;truth&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ambiguous&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;This means that using &lt;code&gt;and&lt;/code&gt; with &lt;code&gt;numpy&lt;/code&gt; arrays doesn't really make sense because we probably care about the truth value of each element (bitwise), not the truth value of the array.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Notice that when I print &lt;code&gt;arr&lt;/code&gt; all the elements are a string - and the &lt;code&gt;dtype&lt;/code&gt; is &lt;code&gt;&amp;lt;U21&lt;/code&gt; for all elements.&lt;/p&gt;&lt;p&gt;This is not how I instantiated the array so be aware of that behavior with numpy.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;&amp;lt;U21&lt;/code&gt; is a dtype expressing the values are 'Little Endian', Unicode, 12 characters. See &lt;a href="https://numpy.org/doc/stable/reference/arrays.dtypes.html#specifying-and-constructing-data-types"&gt;here&lt;/a&gt; for docs for docs&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So for logical comparisions we should look at the error message then...Our handy error message says to try &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Because the datatypes in this example are basically strings, using &lt;code&gt;arr.any()&lt;/code&gt; will result in an error that I do not fully understand, but &lt;code&gt;any(arr)&lt;/code&gt; and &lt;code&gt;all(arr)&lt;/code&gt; work...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;╭───────────────────────────────&lt;/span&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;────────────────────────────────╮&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="n"&gt;ecac52db96&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                                              &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u_paynen3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;personal&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="mf"&gt;.8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_methods&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_any&lt;/span&gt;                                                                                     &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;                                                                                                  &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;54&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keepdims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;               &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="c1"&gt;# Parsing keyword arguments is currently fairly slow, so avoid it for now              │&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;56&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                      &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="err"&gt;❱&lt;/span&gt;  &lt;span class="mi"&gt;57&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;umr_any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keepdims&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                      &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;58&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;umr_any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keepdims&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;59&lt;/span&gt;                                                                                            &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keepdims&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;               &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;╰──────────────────────────────────────────────────────────────────────────────────────────────────╯&lt;/span&gt;&lt;span class="n"&gt;UFuncTypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ufunc&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;logical_or&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="n"&gt;matching&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;str_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;) -&amp;gt; None&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let's change the example to just use integers and see what happens:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ah, now some sanity...First, the booleans are stored as integers, which based on this discussion makes sense.Next we check if &lt;code&gt;any&lt;/code&gt; values (this is a bitwise operation) are &lt;code&gt;True&lt;/code&gt;, which we see they are so the conditional evaluates to &lt;code&gt;True&lt;/code&gt;.Howver, if we check that &lt;code&gt;all&lt;/code&gt; values are &lt;code&gt;True&lt;/code&gt; we see they aren't, the last value is &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; so the conditional fails.&lt;/p&gt;&lt;p&gt;This is a different way to evaluate logical conditions than with lists and it's because of the special nature of numpy arrays that allows them to be compared bitwise but on the flip side, there isn't a meaningful way to evaluate the &lt;code&gt;truth value&lt;/code&gt; of an array.&lt;/p&gt;&lt;h2 id="pandas"&gt;Pandas&lt;/h2&gt;&lt;p&gt;Now for &lt;code&gt;pandas&lt;/code&gt;, which under the hood is a lot of &lt;code&gt;numpy&lt;/code&gt; but not fully. &lt;code&gt;pandas.Series&lt;/code&gt; objects can hold mixed data types like lists, however to logically evaluate truth values we have to treat them like numpy arrays.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;╭───────────────────────────────&lt;/span&gt; &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;────────────────────────────────╮&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;68e48&lt;/span&gt;&lt;span class="n"&gt;e81da14&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                                              &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u_paynen3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;personal&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="mf"&gt;.8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1527&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__nonzero__&lt;/span&gt;                                                                            &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;                                                                                                  &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;1524&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;                                                                                        &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;1525&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="nd"&gt;@final&lt;/span&gt;                                                                               &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;1526&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__nonzero__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                               &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt; &lt;span class="err"&gt;❱&lt;/span&gt;  &lt;span class="mi"&gt;1527&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                                &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;1528&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The truth value of a &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is ambiguous. &amp;quot;&lt;/span&gt;                 &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;1529&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;Use a.empty, a.bool(), a.item(), a.any() or a.all().&amp;quot;&lt;/span&gt;                       &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;    &lt;span class="mi"&gt;1530&lt;/span&gt; &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;                                                                                &lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="err"&gt;╰──────────────────────────────────────────────────────────────────────────────────────────────────╯&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;truth&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Series&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ambiguous&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just like with numpy, we can't evaluate the truth value of the series in a meaningful way, but bitwise operations make perfect sense...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;I thought this was about &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt;...&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Right, so recall that &lt;code&gt;and&lt;/code&gt; is a lazy boolean evaluation (ie. it evaluates the 'truth value' an object) whereas &lt;code&gt;&amp;amp;&lt;/code&gt; does bitwise comparison.&lt;/p&gt;&lt;p&gt;What we see then with &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;numpy&lt;/code&gt; is that if we want to do logical comparisons, we need to do them bitwise, ie. use &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Keep in mind though that the data types make a big deal - we can't use &lt;code&gt;&amp;amp;&lt;/code&gt; with strings  because the bitwise operation isn't supported, for strings we need to use the boolean evaluation.&lt;/p&gt;&lt;h2 id="the-original-point"&gt;The Original Point&lt;/h2&gt;&lt;p&gt;My main use case for this is finding elements in a dataframe/series based on 2 or more columns aligning row values...&lt;/p&gt;&lt;p&gt;Say I have a dataframe like this:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;   &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;   &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="n"&gt;fee&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="n"&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;Example use case is I want to get the values in &lt;code&gt;s3&lt;/code&gt; where &lt;code&gt;s&lt;/code&gt; is 1 and &lt;code&gt;s2&lt;/code&gt; is 'a'. ie. I'm just after &lt;code&gt;bar&lt;/code&gt; for now...&lt;/p&gt;&lt;p&gt;Up until now I've always just tried &lt;code&gt;df.s3[(df.s == 1) and (df.s2 == "a")]&lt;/code&gt; the first time and every single time I've gotten this error that I just haven't ever fully understood:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;truth&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Series&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ambiguous&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But after this deep dive I think I've grasped that &lt;code&gt;and&lt;/code&gt; doesn't actually do what I want here, and in order to do the bitwise comparision I need to use &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="n"&gt;NO&lt;/span&gt; &lt;span class="n"&gt;VCS&lt;/span&gt;  &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="end"&gt;End&lt;/h2&gt;&lt;p&gt;Hopefully this set of ramblings brings some clarity to &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; and you can Google one less error in the future in your logical comparison workflows 😄&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/and-vs-&amp;</guid><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Typeddict</title><link>https://pype.dev/til/typeddict</link><description>Type hinting has helped me write code almost as much, if not more, than unit testing. One thing I love is that with complete type hinting you get a lot more out</description><content:encoded>&lt;p&gt;Type hinting has helped me write code almost as much, if not more, than unit testing.&lt;/p&gt;&lt;p&gt;One thing I love is that with complete type hinting you get a lot more out of your LSP.Typing dictionaries can be tricky and I recently learned about &lt;code&gt;TypedDict&lt;/code&gt; to do exactly what I needed!&lt;/p&gt;&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;&lt;p&gt;It might not be straight up obvious what the problem is, especially if you don't utilize tools like &lt;code&gt;mypy&lt;/code&gt; or &lt;code&gt;flake8&lt;/code&gt; in your development.&lt;/p&gt;&lt;p&gt;My handy-dandy &lt;code&gt;nvim-lsp&lt;/code&gt; gives me a lot of feedback when I'm coding and it's immensely helpful.&lt;/p&gt;&lt;p&gt;So with the LSP giving me constant feedback here's the issue:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;key_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;val_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ls_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the above script you'll get an annoying warning about using &lt;code&gt;pop&lt;/code&gt; on &lt;code&gt;key_2&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img alt="Alt text" src="/images/typed-dict-warning.png" title="dict-warning" /&gt;&lt;/p&gt;&lt;h2 id="the-solution"&gt;The Solution&lt;/h2&gt;&lt;p&gt;Maybe you can stomach getting yelled at by your LSP but I like complete silence if at all possible.&lt;/p&gt;&lt;p&gt;&lt;code&gt;TypedDict&lt;/code&gt;  was the saving grace.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypedDict&lt;/span&gt;&lt;span class="n"&gt;MyDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MyDict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;&lt;span class="n"&gt;my_typed_dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;key_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;val_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ls_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;my_typed_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Alt text" src="/images/typed-dict.png" title="typeddict" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I was able to import TypedDict from typing, mypy_extensions, and typing_extensions&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;With &lt;code&gt;TypedDict&lt;/code&gt; you define your custom type, match the first argument to &lt;code&gt;TypedDict&lt;/code&gt; with the name of the variable (idk why), then type hint each key you expect in the dict!It's super easy and I think puts you into a position of being extremely explicit with your dictionary variables. This isn't always desired or appropriate but in most of my use cases it is.&lt;/p&gt;&lt;h2 id="rtfm"&gt;RTFM&lt;/h2&gt;&lt;p&gt;There's other implementation of &lt;code&gt;TypedDict&lt;/code&gt; and while writing this I saw that most of the docs define a &lt;code&gt;class&lt;/code&gt; for the type like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypedDict&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypedDict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;key_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;    &lt;span class="n"&gt;key_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;val_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;key_2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ls_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://peps.python.org/pep-0589/"&gt;pep docs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://mypy.readthedocs.io/en/latest/more_types.html#typeddict"&gt;mypy docs&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/typeddict</guid><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Jellyfin-Media-Players</title><link>https://pype.dev/jellyfin-media-players</link><description>I use Jellyfin at home for serving up most of our media - movies and shows etc. My dream is to have a GPU capable of transcoding any and all of our media for sm</description><content:encoded>&lt;p&gt;I use Jellyfin at home for serving up most of our media - movies and shows etc.&lt;/p&gt;&lt;p&gt;My dream is to have a GPU capable of transcoding any and all of our media for smooth playback on any device...Now, I thought I'd have that by now with my Nvidia Quadro P400 however I have issues left and right with 4k content.&lt;/p&gt;&lt;p&gt;What can I do to still use Jellyfin but get smooth playback?&lt;/p&gt;&lt;p&gt;THe first answer is figure out why I suck with GPUs, but pausing that there's shorter solutions -&amp;gt; namely, use a media player that's compatabile with the encoded content!&lt;/p&gt;&lt;h2 id="vlc"&gt;VLC&lt;/h2&gt;&lt;p&gt;I'll keep this one short - VLC is great and if you don't need a netflix like experience, I'd recommend just using it to browse your network drives and play whatever you have&lt;/p&gt;&lt;h2 id="jellyfin-web-player"&gt;Jellyfin Web Player&lt;/h2&gt;&lt;p&gt;This is the reason I'm writing this post... the web player is great but not everything is supported on all devices&lt;/p&gt;&lt;h2 id="jellyfin-mpv-shim"&gt;Jellyfin MPV Shim&lt;/h2&gt;&lt;p&gt;This cross-platform cast client is my answer now.You can find the project &lt;a href="https://github.com/jellyfin/jellyfin-mpv-shim/blob/master/README.md#linux-installation"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The installation instrauctions are super straightforward for Windows, Mac OS, or Linux.&lt;/p&gt;&lt;p&gt;I'm on Linux and so my install went like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt updatesudo apt install mpv pipx install jellyfin-mpv-shimpipx inject jellyfin-mpv-shim pystray&lt;span class="c1"&gt;#profit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I used &lt;code&gt;pipx&lt;/code&gt; to install the player as I prefer it for stand alone utilities over pip installing anything globally.&lt;/p&gt;&lt;p&gt;Afer that I just start the player at the terminal with &lt;code&gt;jellyfin-mpv-shim&lt;/code&gt;Then in the web browser I can cast my content to the player and bypass the web player (and thus solve much of my transcoding issues) trivially!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/jellyfin-media-players</guid><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Fx-Json</title><link>https://pype.dev/til/fx-json</link><description>It The installation with go was broken for me - both via the link and direct from the repo. Luckily  Usage is simple... </description><content:encoded>&lt;p&gt;&lt;a href="https://github.com/antonmedv/fx"&gt;fx&lt;/a&gt; is an interactaive JSON viewer for the terminal.&lt;/p&gt;&lt;p&gt;It's a simple tool built with Charmcli's Bubble Tea.&lt;/p&gt;&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;&lt;p&gt;The installation with go was broken for me - both via the link and direct from the repo.Now I'm not a gopher so I don't really know how to fix that.&lt;/p&gt;&lt;p&gt;Luckily &lt;code&gt;npm install fx&lt;/code&gt; also works and got me what I needed!&lt;/p&gt;&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;&lt;p&gt;Usage is simple... &lt;code&gt;fx &amp;lt;json file&amp;gt;&lt;/code&gt;.The Github has a few other ways such as &lt;code&gt;curl ... | fx&lt;/code&gt; etc.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/fx-json</guid><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Pipx</title><link>https://pype.dev/pipx</link><description>pipx pinning formatting tools like  keeping virtual environments clean of things like  python utilities I want system wide but not in the global environment, li</description><content:encoded>&lt;p&gt;&lt;code&gt;pipx&lt;/code&gt; is a tool I've been using to solve a few problems of mine...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;pinning formatting tools like &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;flake8&lt;/code&gt;, &lt;code&gt;isort&lt;/code&gt;, etc. to the same version for all my projects&lt;/li&gt;&lt;li&gt;keeping virtual environments clean of things like &lt;code&gt;cookiecutter&lt;/code&gt;&lt;/li&gt;&lt;li&gt;python utilities I want system wide but not in the global environment, like &lt;code&gt;visidata&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="what-is-it"&gt;What is it?&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; itself is just a package manager like &lt;code&gt;homebrew&lt;/code&gt;, &lt;code&gt;apt&lt;/code&gt;, etc. But it is tied to a python environment.If you aren't using a virtual environment then &lt;code&gt;pip&lt;/code&gt; will operate inside the global installation of python.&lt;/p&gt;&lt;p&gt;Operating within that environment has burned me several times and now I have a strict virtual environment usage policy.&lt;/p&gt;&lt;p&gt;But there are still things I don't want to have to put in every virtual environment - enter &lt;code&gt;pipx&lt;/code&gt;&lt;/p&gt;&lt;h2 id="whats-it-do"&gt;What's it do?&lt;/h2&gt;&lt;p&gt;When you &lt;code&gt;pipx install {package}&lt;/code&gt; a stand alone virtual environment gets created (by default in &lt;code&gt;~/.local/pipx/venvs&lt;/code&gt;).THen you can install extra dependencies with &lt;code&gt;pipx inject {package} {dependency}&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;ex. After &lt;code&gt;pipx install visidata&lt;/code&gt; in order to open Excel files you need to &lt;code&gt;pipx inject visidata xlrd&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In the example with &lt;code&gt;visidata&lt;/code&gt;, I can then use it anywhere, in any project, without re-installing with &lt;code&gt;pip&lt;/code&gt; in every env.&lt;/p&gt;&lt;p&gt;Also for the formatting tools - I configure vim to run the &lt;code&gt;pipx&lt;/code&gt; versions of them on save - this way I don't have to put them in every project's virtual environment!&lt;/p&gt;&lt;h2 id="what-about-pip"&gt;What about pip?&lt;/h2&gt;&lt;p&gt;So obviously you can't &lt;code&gt;pipx&lt;/code&gt; everything, nor do you want to. I see it as a safe and better alternative to global package installation.&lt;/p&gt;&lt;p&gt;How can you then be sure that you never &lt;code&gt;pip install&lt;/code&gt; into the global env?&lt;/p&gt;&lt;p&gt;Add &lt;code&gt;require-virtualenv = True&lt;/code&gt; to your &lt;code&gt;pip.conf&lt;/code&gt; and you're good to go!&lt;/p&gt;&lt;p&gt;With that set, if you try to &lt;code&gt;pip install pandas&lt;/code&gt; into the global env you'll get a message like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~ on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;  NO PYTHON VENV SET❯ pip install pandasERROR: Could not find an activated virtualenv &lt;span class="o"&gt;(&lt;/span&gt;required&lt;span class="o"&gt;)&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="end"&gt;End&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Disable your system &lt;code&gt;pip&lt;/code&gt; to keep your base python safe&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;pipx&lt;/code&gt; for tools you want available everywhere or don't have to need in a virtual environment!&lt;/li&gt;&lt;/ol&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/pipx</guid><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Unpack-Anywhere-With-Star</title><link>https://pype.dev/til/unpack-anywhere-with-star</link><description>Unpacking iterables in python with  But  I</description><content:encoded>&lt;p&gt;Unpacking iterables in python with &lt;code&gt;*&lt;/code&gt; is a pretty handy trick for writing code that is just a tiny bit more pythonic than not.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# the * unpacks the tuple into the individual elements&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;alphas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="c1"&gt;# x = 1, y = 2, z = 3&lt;/span&gt;&lt;span class="c1"&gt;# alphas = [ &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But &lt;a href="https://twitter.com/nedbat"&gt;@Ned Batchelder&lt;/a&gt; showed me via Twitter than you can arbitrarily unpack arguments based on position - it doesn't have to be done at the beginning or the end!&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mixed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="c1"&gt;# x = 1, y = 2&lt;/span&gt;&lt;span class="c1"&gt;# mixed = [3, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]&lt;/span&gt;&lt;span class="c1"&gt;# alpha = &amp;#39;c&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I'm not entirely sure when I'll need this but it definitley shows me another example of how flexible python is!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/unpack-anywhere-with-star</guid><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Htop</title><link>https://pype.dev/til/htop</link><description>htop I Just hit </description><content:encoded>&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; is a common command line tool for seeing interactive output of your system resource utilization, running processes, etc.&lt;/p&gt;&lt;p&gt;I've always been super confused about htop showing seemingly the same process several times though...&lt;/p&gt;&lt;h2 id="the-fix"&gt;The Fix...&lt;/h2&gt;&lt;p&gt;Just hit &lt;code&gt;H&lt;/code&gt;.... makes the view a lot nicer 😀&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/htop</guid><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Pandas-String-Contains</title><link>https://pype.dev/til/pandas-string-contains</link><description>pandas.Series.str.contains We often need to filter pandas DataFrames based on several string values in a Series. Notice that sweet pyflyby import 😁 And this isn</description><content:encoded>&lt;h1 id="tldr"&gt;TL;DR&lt;/h1&gt;&lt;p&gt;&lt;code&gt;pandas.Series.str.contains&lt;/code&gt; accepts regular expressions and this is turned on by &lt;strong&gt;default&lt;/strong&gt;!&lt;/p&gt;&lt;h1 id="use-case"&gt;Use case&lt;/h1&gt;&lt;p&gt;We often need to filter pandas DataFrames based on several string values in a Series.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Notice that sweet pyflyby import 😁!&lt;/p&gt;&lt;/blockquote&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;string1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PYFLYBY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;         &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;string2&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="n"&gt;string3&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;         &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;string2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this isn't the worst thing in the world, especially for such a tiny example...&lt;/p&gt;&lt;p&gt;But what if we had dozens or more values to filter on?&lt;/p&gt;&lt;p&gt;Then it looks so much nicer to create an iterable of the values we want to filter on and join them with an apropriate regex operator (in this case &lt;code&gt;|&lt;/code&gt; for &lt;em&gt;inclusive or&lt;/em&gt;)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# iterable with whatever is appropriate for your use case&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;         &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;string2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="fin"&gt;Fin&lt;/h1&gt;&lt;p&gt;This is a super nice and concise way to do the kind of filtering my team does on a daily basis!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/pandas-string-contains</guid><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate></item><item><title>Git-Bisect</title><link>https://pype.dev/til/git-bisect</link><description>I try to commit a lot, and I also try to write useful tests appropriate for the scope of work I Whether by laziness, ignorance, or accepted tech debt I don Befo</description><content:encoded>&lt;p&gt;I try to commit a lot, and I also try to write useful tests appropriate for the scope of work I'm focusing on, but sometimes I drop the ball...&lt;/p&gt;&lt;p&gt;Whether by laziness, ignorance, or accepted tech debt I don't always code perfectly and recently I was dozens of commits into a new feature before realizing I broke something along the way that none of my tests caught...&lt;/p&gt;&lt;p&gt;Before today I would've manually reviewed every commit to see if something obvious slipped by me (talk about a time suck 😩)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;There must be a better way&lt;/strong&gt;&lt;/p&gt;&lt;h1 id="bisect"&gt;Bisect?&lt;/h1&gt;&lt;p&gt;&lt;code&gt;git bisect&lt;/code&gt; is the magic sauce for this exact problem...&lt;/p&gt;&lt;p&gt;You essentially create a range of commits to consider and let &lt;code&gt;git bisect&lt;/code&gt; guide you through them in a manner akin to Newton's method for finding the root of a continuous function.&lt;/p&gt;&lt;h1 id="how-to-do-it"&gt;How to do it?&lt;/h1&gt;&lt;p&gt;Start with &lt;code&gt;git bisect start&lt;/code&gt; and then choose the first &lt;code&gt;good&lt;/code&gt; commit (ie. a commit you know the bug isn't present in)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox   bisect-post   ×1 via   v3.8.11&lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;❯ git bisect startsandbox   bisect-post &lt;span class="o"&gt;(&lt;/span&gt;BISECTING&lt;span class="o"&gt;)&lt;/span&gt;   ×1 via   v3.8.11&lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;❯ git bisect good 655332bbisect-post  HEAD         main         ORIG_HEAD5b31e1e  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD&lt;span class="o"&gt;]&lt;/span&gt;    add successful print &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;52&lt;/span&gt; seconds ago&lt;span class="o"&gt;)&lt;/span&gt;308247b  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD^&lt;span class="o"&gt;]&lt;/span&gt;   init another loop &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;77&lt;/span&gt; seconds ago&lt;span class="o"&gt;)&lt;/span&gt;4555c59  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD^^&lt;span class="o"&gt;]&lt;/span&gt;  introduce bug &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;9cf6d55  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~3&lt;span class="o"&gt;]&lt;/span&gt;  add successful loop &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;bcb41c3  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~4&lt;span class="o"&gt;]&lt;/span&gt;  change x to &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;3c34aac  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~5&lt;span class="o"&gt;]&lt;/span&gt;  init x to &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;12e53bd  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~6&lt;span class="o"&gt;]&lt;/span&gt;  print cwd &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;655332b  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~7&lt;span class="o"&gt;]&lt;/span&gt;  add example.py &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- I want to start at this commit&lt;/span&gt;59e0048  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~8&lt;span class="o"&gt;]&lt;/span&gt;  gitignore &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt;fb9e1fb  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~9&lt;span class="o"&gt;]&lt;/span&gt;  add reqs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox   bisect-post &lt;span class="o"&gt;(&lt;/span&gt;BISECTING&lt;span class="o"&gt;)&lt;/span&gt;   ×1 via   v3.8.11&lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;❯ git bisect bad 5b31e1ebisect-post                                                ORIG_HEADHEAD                                                       refs/bisect/good-655332b6c384934c2c00c3d4aba3011ccc1e5b57main5b31e1e  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD&lt;span class="o"&gt;]&lt;/span&gt;    add successful print &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- I start here with the &amp;quot;bad&amp;quot; commit&lt;/span&gt;308247b  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD^&lt;span class="o"&gt;]&lt;/span&gt;   init another loop &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;4555c59  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD^^&lt;span class="o"&gt;]&lt;/span&gt;  introduce bug &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;9cf6d55  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~3&lt;span class="o"&gt;]&lt;/span&gt;  add successful loop &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;bcb41c3  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~4&lt;span class="o"&gt;]&lt;/span&gt;  change x to &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;3c34aac  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~5&lt;span class="o"&gt;]&lt;/span&gt;  init x to &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;12e53bd  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~6&lt;span class="o"&gt;]&lt;/span&gt;  print cwd &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;655332b  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~7&lt;span class="o"&gt;]&lt;/span&gt;  add example.py &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt; minutes ago&lt;span class="o"&gt;)&lt;/span&gt;59e0048  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~8&lt;span class="o"&gt;]&lt;/span&gt;  gitignore &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt;fb9e1fb  -- &lt;span class="o"&gt;[&lt;/span&gt;HEAD~9&lt;span class="o"&gt;]&lt;/span&gt;  add reqs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt; hours ago&lt;span class="o"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After starting bisect with a "good" start commit and a "bad" ending commit we can let git to it's thing!&lt;/p&gt;&lt;p&gt;Git checksout a commit somewhere about halfway between the good and bad commit so you can see if your bug is there or not.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox   bisect-post &lt;span class="o"&gt;(&lt;/span&gt;BISECTING&lt;span class="o"&gt;)&lt;/span&gt;   ×1 via   v3.8.11&lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;❯ git bisect bad 5b31e1eBisecting: &lt;span class="m"&gt;3&lt;/span&gt; revisions left to &lt;span class="nb"&gt;test&lt;/span&gt; after this &lt;span class="o"&gt;(&lt;/span&gt;roughly &lt;span class="m"&gt;2&lt;/span&gt; steps&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;bcb41c3854e343eade85353683f2c1c4ddde4e04&lt;span class="o"&gt;]&lt;/span&gt; change x to &lt;span class="m"&gt;10&lt;/span&gt;sandbox   HEAD &lt;span class="o"&gt;(&lt;/span&gt;bcb41c38&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;BISECTING&lt;span class="o"&gt;)&lt;/span&gt;   ×1 via   v3.8.11&lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;❯&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my example here I have a python script with some loops and print statements - they aren't really relevant, I just wanted an easy to follow git history.&lt;/p&gt;&lt;p&gt;So I check to see if the bug is present or not either by running/writing tests or replicating the bug somehow.&lt;/p&gt;&lt;p&gt;In this session commit &lt;code&gt;bcb41c38&lt;/code&gt; is actually just fine, so I do &lt;code&gt;git bisect good&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox   HEAD &lt;span class="o"&gt;(&lt;/span&gt;bcb41c38&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;BISECTING&lt;span class="o"&gt;)&lt;/span&gt;   ×1 via   v3.8.11&lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;❯ git bisect goodBisecting: &lt;span class="m"&gt;1&lt;/span&gt; revision left to &lt;span class="nb"&gt;test&lt;/span&gt; after this &lt;span class="o"&gt;(&lt;/span&gt;roughly &lt;span class="m"&gt;1&lt;/span&gt; step&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;4555c5979268dff6c475365fdc5ce1d4a12bd820&lt;span class="o"&gt;]&lt;/span&gt; introduce bug&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we see that git moves on to checkout another commit...&lt;/p&gt;&lt;p&gt;In this case the next commit is the one where I introduced a bug&lt;/p&gt;&lt;p&gt;&lt;code&gt;git bisect bad&lt;/code&gt; then gives me:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox   HEAD &lt;span class="o"&gt;(&lt;/span&gt;4555c597&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;BISECTING&lt;span class="o"&gt;)&lt;/span&gt;   ×1 via   v3.8.11&lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;❯ git bisect badBisecting: &lt;span class="m"&gt;0&lt;/span&gt; revisions left to &lt;span class="nb"&gt;test&lt;/span&gt; after this &lt;span class="o"&gt;(&lt;/span&gt;roughly &lt;span class="m"&gt;0&lt;/span&gt; steps&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;9cf6d55301560c51e2f55404d0d80b1f1e22a33d&lt;span class="o"&gt;]&lt;/span&gt; add successful loop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At &lt;code&gt;4555c597&lt;/code&gt; the script works as expected so one more &lt;code&gt;git bisect good&lt;/code&gt; yields...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sandbox   HEAD &lt;span class="o"&gt;(&lt;/span&gt;9cf6d553&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;BISECTING&lt;span class="o"&gt;)&lt;/span&gt;   ×1 via   v3.8.11&lt;span class="o"&gt;(&lt;/span&gt;sandbox&lt;span class="o"&gt;)&lt;/span&gt;  on  &lt;span class="o"&gt;(&lt;/span&gt;us-east-1&lt;span class="o"&gt;)&lt;/span&gt;❯ git bisect good4555c5979268dff6c475365fdc5ce1d4a12bd820 is the first bad commitcommit 4555c5979268dff6c475365fdc5ce1d4a12bd820Author: &lt;span class="c1"&gt;########################### &lt;/span&gt;Date:   Tue May &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;09&lt;/span&gt;:00:00 &lt;span class="m"&gt;2022&lt;/span&gt; -0500    introduce bug example.py &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; +- &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;1&lt;/span&gt; insertion&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt; deletion&lt;span class="o"&gt;(&lt;/span&gt;-&lt;span class="o"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="what-happened"&gt;What happened?&lt;/h1&gt;&lt;p&gt;Git sliced up a range of commits based on me saying of the next one was good or bad and localized the commit that introduced a bug into my workflow!&lt;/p&gt;&lt;p&gt;I didn't have to manually review commits, click through logs, etc... I just let git checkout relevant commits and I ran whatever was appropriate for reproducing the bug to learn when it was comitted!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/git-bisect</guid><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate></item><item><title>Wish-List-With-Fastapi</title><link>https://pype.dev/wish-list-with-fastapi</link><description>Amazon has crossed the line with me just one too many times now so we are looking to drop them like every other Big Tech provider.... However, one key feature o</description><content:encoded>&lt;p&gt;Amazon has crossed the line with me just one too many times now so we are looking to drop them like every other Big Tech provider....&lt;/p&gt;&lt;p&gt;However, one key feature of Amazon that has been so useful for us is Lists... We can just maintain a list for each of us and then family members can login anytime and check it out... This really alleviates any last minute gift idea stress right before a birthday or something.&lt;/p&gt;&lt;p&gt;So I need a nice gift list service but I don't want to be locked into one company (like a Target registry or something) and I'd like to host it myself&lt;/p&gt;&lt;p&gt;The internets had a few options but nothing looked/felt like I wanted to I decided to build my own.&lt;/p&gt;&lt;h1 id="the-frontend"&gt;The Frontend&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;I have no idea how to do front end so stay tuned&lt;/strong&gt;&lt;/p&gt;&lt;h1 id="the-backend"&gt;The Backend&lt;/h1&gt;&lt;p&gt;FastAPI for the win on this one... I followed a few examples online and what I was able to build in just a few minutes is pretty impressive thanks to the design of FastAPI.&lt;/p&gt;&lt;p&gt;Some key features are:1. Auto doc generation2. Required typing (which makes #1 possible)3. Built-in api testing in the browser4. Easy integration with sqlalchemy5. Development time so short you won't be done with your coffee before having something up and running!&lt;/p&gt;&lt;h2 id="database"&gt;Database&lt;/h2&gt;&lt;p&gt;Starting with a simple &lt;code&gt;database.py&lt;/code&gt; we can create a sqlalchemy session with a base model with about 7 lines of code...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="n"&gt;SQLALCHEMY_DATABASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sqlite:///wishes.sqlite3&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SQLALCHEMY_DATABASE_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SessionLocal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoflush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="model"&gt;Model&lt;/h2&gt;&lt;p&gt;For my wish list I needed just a simple table:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align="right"&gt;id&lt;/th&gt;&lt;th align="left"&gt;person&lt;/th&gt;&lt;th align="left"&gt;item&lt;/th&gt;&lt;th align="left"&gt;link&lt;/th&gt;&lt;th align="left"&gt;purchased&lt;/th&gt;&lt;th align="left"&gt;purchased_by&lt;/th&gt;&lt;th align="left"&gt;date_added&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align="right"&gt;1&lt;/td&gt;&lt;td align="left"&gt;pypeaday&lt;/td&gt;&lt;td align="left"&gt;A sweet item&lt;/td&gt;&lt;td align="left"&gt;&lt;a href="http://www.mystore.store"&gt;www.mystore.store&lt;/a&gt;&lt;/td&gt;&lt;td align="left"&gt;False&lt;/td&gt;&lt;td align="left"&gt;dad&lt;/td&gt;&lt;td align="left"&gt;2022-05-05 21:55:09&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align="right"&gt;2&lt;/td&gt;&lt;td align="left"&gt;pypeaday&lt;/td&gt;&lt;td align="left"&gt;A bitter item&lt;/td&gt;&lt;td align="left"&gt;&lt;a href="http://www.bitterstore.com"&gt;www.bitterstore.com&lt;/a&gt;&lt;/td&gt;&lt;td align="left"&gt;True&lt;/td&gt;&lt;td align="left"&gt;Mrs. pypeaday&lt;/td&gt;&lt;td align="left"&gt;2022-05-06 06:55:54&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The table is simple enough... A unique key, the person who the wish belongs to, the item (or wish), a link to the item, whether it's been purchased or not and by whom, and the date it was added.&lt;/p&gt;&lt;p&gt;To make this model with sqlalchemy we can make a &lt;code&gt;model.py&lt;/code&gt; like so:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;database&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.schema&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.types&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Wishes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Wishes&amp;quot;&lt;/span&gt;    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;    &lt;span class="n"&gt;purchased&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;    &lt;span class="n"&gt;purchased_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;span class="n"&gt;date_added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="schema"&gt;Schema&lt;/h2&gt;&lt;p&gt;One of the best things about FastAPI is trivial integration with pydantic.We can define a schema to ensure any data posted is not missing anything!&lt;/p&gt;&lt;p&gt;Make a &lt;code&gt;schema.py&lt;/code&gt; with the following:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;wish_schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;    &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;    &lt;span class="n"&gt;purchased&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;    &lt;span class="n"&gt;purchased_by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;    &lt;span class="n"&gt;date_added&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;orm_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;patch_schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;purchased&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;    &lt;span class="n"&gt;purchased_by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;orm_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have 2 schemas - one for a &lt;code&gt;wish&lt;/code&gt; which you'll see down below is used to validate any &lt;code&gt;post&lt;/code&gt; requests.&lt;/p&gt;&lt;p&gt;To simplify things for me I made another schema, &lt;code&gt;patch_schema&lt;/code&gt; which I use for the route that updates the table (ie. marking an existing wish as purchased) &lt;/p&gt;&lt;h2 id="session"&gt;Session&lt;/h2&gt;&lt;p&gt;One of the last things we need is a Session&lt;/p&gt;&lt;p&gt;So make a &lt;code&gt;session.py&lt;/code&gt;...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;database&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SessionLocal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;model&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_get_session&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SessionLocal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our routes will depend on this &lt;code&gt;create_get_session&lt;/code&gt; function that will yield a &lt;code&gt;db&lt;/code&gt; object through which we'll udpate our database&lt;/p&gt;&lt;h1 id="ok-just-do-it-already"&gt;Ok just do it already!&lt;/h1&gt;&lt;p&gt;So our &lt;code&gt;main.py&lt;/code&gt; will have a few routes in it...&lt;/p&gt;&lt;p&gt;What do we want to support?&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Getting all wishes&lt;/li&gt;&lt;li&gt;Getting a specific wish&lt;/li&gt;&lt;li&gt;Updating a specific wish&lt;/li&gt;&lt;li&gt;Deleting a wish&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I think the script is fairly self explanatory but here's a few notes...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;We decorate each function with &lt;code&gt;@app.&amp;lt;method&amp;gt;&lt;/code&gt; and define &lt;code&gt;response_model&lt;/code&gt; as well as &lt;code&gt;status_code&lt;/code&gt;&lt;/li&gt;&lt;li&gt;The functions are defined with &lt;code&gt;async&lt;/code&gt; (this was my first exposure to this so I can't go in depth on it yet)&lt;/li&gt;&lt;li&gt;The functions all take a &lt;code&gt;db&lt;/code&gt; which is from &lt;code&gt;session.py&lt;/code&gt; and that &lt;code&gt;db&lt;/code&gt; depends on the &lt;code&gt;create_get_session&lt;/code&gt; function&lt;/li&gt;&lt;li&gt;If the db is being updtes then we type the object used for the update with the appropriate schema (either &lt;code&gt;wish_schema&lt;/code&gt; or &lt;code&gt;patch_schema&lt;/code&gt;)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;From there we're in true python-land where you can basically guess the methods on &lt;code&gt;db&lt;/code&gt; and you'd probably be right... (like &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;upddate&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; etc.)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Depends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Wishes&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;schema&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wish_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patch_schema&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;session&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_get_session&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_root&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;server is up!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/wishes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wish_schema&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_wishes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Depends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_get_session&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;    &lt;span class="n"&gt;wishes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wishes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wishes&lt;/span&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/wishes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_wish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wish_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Depends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_get_session&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;    &lt;span class="n"&gt;new_wish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Wishes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;        &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;purchased&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchased&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;purchased_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchased_by&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;date_added&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_added&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_wish&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_wish&lt;/span&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/wishes/&lt;/span&gt;&lt;span class="si"&gt;{id}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_wish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Depends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_get_session&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;    &lt;span class="n"&gt;wish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wishes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wish&lt;/span&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/wishes/&lt;/span&gt;&lt;span class="si"&gt;{id}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wish_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_wish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;patch_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Depends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_get_session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;db_wish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wishes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;db_wish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchased&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchased&lt;/span&gt;    &lt;span class="n"&gt;db_wish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchased_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchased_by&lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_wish&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;db_wish&lt;/span&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/wishes/&lt;/span&gt;&lt;span class="si"&gt;{id}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_wish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Depends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_get_session&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;    &lt;span class="n"&gt;db_wish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wishes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;db_wish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;404&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wish id does not exist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_wish&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="my-code"&gt;My Code&lt;/h1&gt;&lt;p&gt;You can find my repo &lt;a href="https://github.com/nicpayne713/wish-lists"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I'll plan to update and maintain for as long as I use it&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/wish-list-with-fastapi</guid><pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate></item><item><title>Dataframe-To-Markdown</title><link>https://pype.dev/til/dataframe-to-markdown</link><description>pandas.DataFrame I do a lot of work with tabular data and one thing I have incorporated into some of that work is automatic data summary reports by throwing the</description><content:encoded>&lt;h1 id="pandas"&gt;Pandas&lt;/h1&gt;&lt;p&gt;&lt;code&gt;pandas.DataFrame&lt;/code&gt;s are pretty sweet data structures in Python.&lt;/p&gt;&lt;p&gt;I do a lot of work with tabular data and one thing I have incorporated into some of that work is automatic data summary reports by throwing the first few, or several relevant, rows of a dataframe at a point in a pipeline into a markdown file.&lt;/p&gt;&lt;p&gt;Pandas has a method on DataFrames that makes this 100% trivial!&lt;/p&gt;&lt;h1 id="the-method"&gt;The Method&lt;/h1&gt;&lt;p&gt;Say we have a dataframe, &lt;code&gt;df&lt;/code&gt;... then it's literally just: &lt;code&gt;df.to_markdown()&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;          &lt;span class="n"&gt;Unnamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="n"&gt;mpg&lt;/span&gt;  &lt;span class="n"&gt;cyl&lt;/span&gt;   &lt;span class="n"&gt;disp&lt;/span&gt;   &lt;span class="n"&gt;hp&lt;/span&gt;  &lt;span class="n"&gt;drat&lt;/span&gt;     &lt;span class="n"&gt;wt&lt;/span&gt;   &lt;span class="n"&gt;qsec&lt;/span&gt;  &lt;span class="n"&gt;vs&lt;/span&gt;  &lt;span class="n"&gt;am&lt;/span&gt;  &lt;span class="n"&gt;gear&lt;/span&gt;  &lt;span class="n"&gt;carb&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.620&lt;/span&gt;  &lt;span class="mf"&gt;16.46&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt; &lt;span class="n"&gt;Wag&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.875&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;         &lt;span class="n"&gt;Datsun&lt;/span&gt; &lt;span class="mi"&gt;710&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;108.0&lt;/span&gt;   &lt;span class="mi"&gt;93&lt;/span&gt;  &lt;span class="mf"&gt;3.85&lt;/span&gt;  &lt;span class="mf"&gt;2.320&lt;/span&gt;  &lt;span class="mf"&gt;18.61&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;Drive&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;258.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.215&lt;/span&gt;  &lt;span class="mf"&gt;19.44&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="n"&gt;Sportabout&lt;/span&gt;  &lt;span class="mf"&gt;18.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In ipython I can call the method and get a markdown table back as a string&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mental&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lake&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mental&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lake&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_markdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|    | Unnamed: 0        |   mpg |   cyl |   disp |   hp |   drat |    wt |   qsec |   vs |   am |   gear |   carb |&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;|---:|:------------------|------:|------:|-------:|-----:|-------:|------:|-------:|-----:|-----:|-------:|-------:|&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;|  0 | Mazda RX4         |  21   |     6 |    160 |  110 |   3.9  | 2.62  |  16.46 |    0 |    1 |      4 |      4 |&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;|  1 | Mazda RX4 Wag     |  21   |     6 |    160 |  110 |   3.9  | 2.875 |  17.02 |    0 |    1 |      4 |      4 |&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;|  2 | Datsun 710        |  22.8 |     4 |    108 |   93 |   3.85 | 2.32  |  18.61 |    1 |    1 |      4 |      1 |&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;|  3 | Hornet 4 Drive    |  21.4 |     6 |    258 |  110 |   3.08 | 3.215 |  19.44 |    1 |    0 |      3 |      1 |&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;|  4 | Hornet Sportabout |  18.7 |     8 |    360 |  175 |   3.15 | 3.44  |  17.02 |    0 |    0 |      3 |      2 |&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can drop that string into a markdown file and using any reader that supports the rendering you'll have a nicely formated table of example data in whatever report you're making!&lt;/p&gt;&lt;h1 id="bonus-method"&gt;Bonus method&lt;/h1&gt;&lt;p&gt;Just like markdown, you can export a dataframe to html with &lt;code&gt;df.to_html()&lt;/code&gt; and use that if it's more appropriate for your use case:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;#39;&amp;lt;table border=&amp;quot;1&amp;quot; class=&amp;quot;dataframe&amp;quot;&amp;gt;\n  &amp;lt;thead&amp;gt;\n    &amp;lt;tr style=&amp;quot;text-align: right;&amp;quot;&amp;gt;\n      &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;Unnamed: 0&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;mpg&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;cyl&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;disp&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;hp&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;drat&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;wt&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;qsec&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;vs&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;am&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;gear&amp;lt;/th&amp;gt;\n      &amp;lt;th&amp;gt;carb&amp;lt;/th&amp;gt;\n    &amp;lt;/tr&amp;gt;\n  &amp;lt;/thead&amp;gt;\n  &amp;lt;tbody&amp;gt;\n    &amp;lt;tr&amp;gt;\n      &amp;lt;th&amp;gt;0&amp;lt;/th&amp;gt;\n      &amp;lt;td&amp;gt;Mazda RX4&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;21.0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;6&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;160.0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;110&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3.90&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;2.620&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;16.46&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;4&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;4&amp;lt;/td&amp;gt;\n    &amp;lt;/tr&amp;gt;\n    &amp;lt;tr&amp;gt;\n      &amp;lt;th&amp;gt;1&amp;lt;/th&amp;gt;\n      &amp;lt;td&amp;gt;Mazda RX4 Wag&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;21.0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;6&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;160.0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;110&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3.90&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;2.875&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;17.02&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;4&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;4&amp;lt;/td&amp;gt;\n    &amp;lt;/tr&amp;gt;\n    &amp;lt;tr&amp;gt;\n      &amp;lt;th&amp;gt;2&amp;lt;/th&amp;gt;\n      &amp;lt;td&amp;gt;Datsun 710&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;22.8&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;4&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;108.0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;93&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3.85&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;2.320&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;18.61&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;4&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;\n    &amp;lt;/tr&amp;gt;\n    &amp;lt;tr&amp;gt;\n      &amp;lt;th&amp;gt;3&amp;lt;/th&amp;gt;\n      &amp;lt;td&amp;gt;Hornet 4 Drive&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;21.4&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;6&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;258.0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;110&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3.08&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3.215&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;19.44&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;\n    &amp;lt;/tr&amp;gt;\n    &amp;lt;tr&amp;gt;\n      &amp;lt;th&amp;gt;4&amp;lt;/th&amp;gt;\n      &amp;lt;td&amp;gt;Hornet Sportabout&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;18.7&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;8&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;360.0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;175&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3.15&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3.440&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;17.02&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;0&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;3&amp;lt;/td&amp;gt;\n      &amp;lt;td&amp;gt;2&amp;lt;/td&amp;gt;\n    &amp;lt;/tr&amp;gt;\n  &amp;lt;/tbody&amp;gt;\n&amp;lt;/table&amp;gt;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My blog will render that html into a nice table! (After removing new line characters)&lt;/p&gt;&lt;table border="1" class="dataframe"&gt;  &lt;thead&gt;    &lt;tr style="text-align: right;"&gt;      &lt;th&gt;Unnamed: 0&lt;/th&gt;      &lt;th&gt;mpg&lt;/th&gt;      &lt;th&gt;cyl&lt;/th&gt;      &lt;th&gt;disp&lt;/th&gt;      &lt;th&gt;hp&lt;/th&gt;      &lt;th&gt;drat&lt;/th&gt;      &lt;th&gt;wt&lt;/th&gt;      &lt;th&gt;qsec&lt;/th&gt;      &lt;th&gt;vs&lt;/th&gt;      &lt;th&gt;am&lt;/th&gt;      &lt;th&gt;gear&lt;/th&gt;      &lt;th&gt;carb&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;Mazda RX4&lt;/td&gt;      &lt;td&gt;21.0&lt;/td&gt;      &lt;td&gt;6&lt;/td&gt;      &lt;td&gt;160.0&lt;/td&gt;      &lt;td&gt;110&lt;/td&gt;      &lt;td&gt;3.90&lt;/td&gt;      &lt;td&gt;2.620&lt;/td&gt;      &lt;td&gt;16.46&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Mazda RX4 Wag&lt;/td&gt;      &lt;td&gt;21.0&lt;/td&gt;      &lt;td&gt;6&lt;/td&gt;      &lt;td&gt;160.0&lt;/td&gt;      &lt;td&gt;110&lt;/td&gt;      &lt;td&gt;3.90&lt;/td&gt;      &lt;td&gt;2.875&lt;/td&gt;      &lt;td&gt;17.02&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Datsun 710&lt;/td&gt;      &lt;td&gt;22.8&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;108.0&lt;/td&gt;      &lt;td&gt;93&lt;/td&gt;      &lt;td&gt;3.85&lt;/td&gt;      &lt;td&gt;2.320&lt;/td&gt;      &lt;td&gt;18.61&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Hornet 4 Drive&lt;/td&gt;      &lt;td&gt;21.4&lt;/td&gt;      &lt;td&gt;6&lt;/td&gt;      &lt;td&gt;258.0&lt;/td&gt;      &lt;td&gt;110&lt;/td&gt;      &lt;td&gt;3.08&lt;/td&gt;      &lt;td&gt;3.215&lt;/td&gt;      &lt;td&gt;19.44&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Hornet Sportabout&lt;/td&gt;      &lt;td&gt;18.7&lt;/td&gt;      &lt;td&gt;8&lt;/td&gt;      &lt;td&gt;360.0&lt;/td&gt;      &lt;td&gt;175&lt;/td&gt;      &lt;td&gt;3.15&lt;/td&gt;      &lt;td&gt;3.440&lt;/td&gt;      &lt;td&gt;17.02&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/dataframe-to-markdown</guid><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate></item><item><title>Dataframe-To-Styled-Html</title><link>https://pype.dev/til/dataframe-to-styled-html</link><description>I wrote up a little on exporting DataFrames to markdown and html  But I Reminder that if you have a dataframe,  Well you can pass some  I don There are several </description><content:encoded>&lt;p&gt;I wrote up a little on exporting DataFrames to markdown and html &lt;a href="/dataframe-to-markdown"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;But I've been playing with a web app for with lists and while I'm toying around I learned you can actually give your tables some style with some simple css classes! &lt;/p&gt;&lt;h1 id="to-html"&gt;To HTML&lt;/h1&gt;&lt;p&gt;Reminder that if you have a dataframe, &lt;code&gt;df&lt;/code&gt;, you can &lt;code&gt;df.to_html()&lt;/code&gt; to get an HTML table of your dataframe.&lt;/p&gt;&lt;p&gt;Well you can pass some &lt;code&gt;classes&lt;/code&gt; to make it look super nice!&lt;/p&gt;&lt;h1 id="classes-and-css"&gt;Classes and CSS&lt;/h1&gt;&lt;p&gt;I don't know anything really about CSS so I won't pretend otherwise, but as I was learning about bootstrap that's where I stumbled upon this...&lt;/p&gt;&lt;p&gt;There are several classes you can pass but I found really good luck with &lt;code&gt;table-bordered&lt;/code&gt; and &lt;code&gt;table-dark&lt;/code&gt; for my use case&lt;/p&gt;&lt;p&gt;&lt;code&gt;df.to_html(classes=["table table-bordered table-dark"])&lt;/code&gt;&lt;/p&gt;&lt;table border="1" class="dataframe table table-bordered table-dark"&gt;  &lt;thead&gt;&lt;tr style="text-align: right;"&gt;      &lt;th&gt;Unnamed: 0&lt;/th&gt;      &lt;th&gt;mpg&lt;/th&gt;&lt;th&gt;cyl&lt;/th&gt;      &lt;th&gt;disp&lt;/th&gt;      &lt;th&gt;hp&lt;/th&gt;      &lt;th&gt;drat&lt;/th&gt;&lt;th&gt;wt&lt;/th&gt;      &lt;th&gt;qsec&lt;/th&gt;      &lt;th&gt;vs&lt;/th&gt;      &lt;th&gt;am&lt;/th&gt;&lt;th&gt;gear&lt;/th&gt;      &lt;th&gt;carb&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;&lt;td&gt;Mazda RX4&lt;/td&gt;      &lt;td&gt;21.0&lt;/td&gt;      &lt;td&gt;6&lt;/td&gt;      &lt;td&gt;160.0&lt;/td&gt;&lt;td&gt;110&lt;/td&gt;      &lt;td&gt;3.90&lt;/td&gt;      &lt;td&gt;2.620&lt;/td&gt;      &lt;td&gt;16.46&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;&lt;td&gt;Mazda RX4 Wag&lt;/td&gt;      &lt;td&gt;21.0&lt;/td&gt;      &lt;td&gt;6&lt;/td&gt;      &lt;td&gt;160.0&lt;/td&gt;&lt;td&gt;110&lt;/td&gt;      &lt;td&gt;3.90&lt;/td&gt;      &lt;td&gt;2.875&lt;/td&gt;      &lt;td&gt;17.02&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;&lt;td&gt;Datsun 710&lt;/td&gt;      &lt;td&gt;22.8&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;108.0&lt;/td&gt;&lt;td&gt;93&lt;/td&gt;      &lt;td&gt;3.85&lt;/td&gt;      &lt;td&gt;2.320&lt;/td&gt;      &lt;td&gt;18.61&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;&lt;td&gt;Hornet 4 Drive&lt;/td&gt;      &lt;td&gt;21.4&lt;/td&gt;      &lt;td&gt;6&lt;/td&gt;      &lt;td&gt;258.0&lt;/td&gt;&lt;td&gt;110&lt;/td&gt;      &lt;td&gt;3.08&lt;/td&gt;      &lt;td&gt;3.215&lt;/td&gt;      &lt;td&gt;19.44&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;&lt;td&gt;Hornet Sportabout&lt;/td&gt;      &lt;td&gt;18.7&lt;/td&gt;      &lt;td&gt;8&lt;/td&gt;&lt;td&gt;360.0&lt;/td&gt;      &lt;td&gt;175&lt;/td&gt;      &lt;td&gt;3.15&lt;/td&gt;      &lt;td&gt;3.440&lt;/td&gt;&lt;td&gt;17.02&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;h1 id="you-try-it"&gt;You try it!&lt;/h1&gt;&lt;p&gt;Crack open ipython and make a dataframe, then &lt;code&gt;df.to_html(classes=["table table-bordered table-dark"])&lt;/code&gt;, copy the output (minus the quote marks ipython uses to denote the string type) that into &lt;code&gt;my-file.html&lt;/code&gt;, open that up in a browser and be amazed!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;For added effeciency try using pyperclip to copy the output right to your clipboard!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;pip install pyperclip&lt;/code&gt; and then &lt;code&gt;pyperclip.copy(df.to_html(classes=["table table-bordered table-dark"]))&lt;/code&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/dataframe-to-styled-html</guid><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate></item><item><title>Python-Eval</title><link>https://pype.dev/til/python-eval</link><description>&lt;h1 id="todo"&gt;TODO&lt;/h1&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my Title&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;my&amp;quot; in title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><guid isPermaLink="false">https://pype.dev/til/python-eval</guid><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate></item><item><title>Forms with FastAPI and Jinja</title><link>https://pype.dev/til/fastapi-jinja-forms</link><description>I just started using FastAPI for a home project and needed to pass back a The jinja templating for rendering HTML based on something like a python iterable is n</description><content:encoded>&lt;p&gt;I just started using FastAPI for a home project and needed to pass back adynamic number of values from a form rendered with jinja...&lt;/p&gt;&lt;h1 id="dynamic-values"&gt;Dynamic Values&lt;/h1&gt;&lt;p&gt;The jinja templating for rendering HTML based on something like a python iterable is nice and easy&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;data is the result of a database query, and item is each row, so the dot notation is the value of each column basically in that row&lt;/p&gt;&lt;/blockquote&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;submit btn btn-xl btn-outline-danger&amp;quot; &amp;gt;Remove&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This form generates a row with a checkbox for every &lt;code&gt;item&lt;/code&gt; in &lt;code&gt;data&lt;/code&gt; (in mycase each &lt;code&gt;item&lt;/code&gt; is an existing row in my table). it?&lt;/p&gt;&lt;p&gt;The way to pass back all those values is pretty straight forward (after hours of messing around that is!)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# I hate it when tutorials don&amp;#39;t show ALL relevant pieces to the blurb&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;starlette.status&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;status&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Depends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.encoders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jsonable_encoder&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTMLResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RedirectResponse&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.templating&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Jinja2Templates&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.session.session&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_get_session&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;APIRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Jinja2Templates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;templates/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;@router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/my_route/do_something_with_form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HTMLResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Depends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_get_session&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;form_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonable_encoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# data = {&amp;quot;item_1&amp;quot;: 1, &amp;quot;item_2&amp;quot;: 2, ... &amp;quot;item_N&amp;quot;: N}&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RedirectResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_302_FOUND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We &lt;code&gt;await request.get_form()&lt;/code&gt; and after encoding the data we get a dictionary with key/value pairs of the name/value from the form!&lt;/p&gt;&lt;p&gt;This took me quite a long time to figure out in part because most of the Google-able resources are still on Flask...&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/fastapi-jinja-forms</guid><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate></item><item><title>Plug Snapshot!</title><link>https://pype.dev/til/plug-snapshot</link><description>:PlugSnapshot, :w ~/dotfiles/nvim/snapshot.vim... keep your config safe with git</description><content:encoded>&lt;p&gt;:PlugSnapshot, :w ~/dotfiles/nvim/snapshot.vim... keep your config safe with git!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/plug-snapshot</guid><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate></item><item><title>Filepath Completion in Neovim</title><link>https://pype.dev/til/filepath-completion-in-neovim</link><description>I Turns out I need to not be a dope and configure nvim-cmp to actually use it... For the sake of completeness here is how I currently (May 2022) configure compl</description><content:encoded>&lt;p&gt;I've had &lt;code&gt;Plug 'hrsh7th/cmp-path'&lt;/code&gt; in my plugins for ever but didn't noticeuntil recently that I wasn't getting any filepath completion in vim!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Fuller setup instructions below the TLDR&lt;/strong&gt;&lt;/p&gt;&lt;h1 id="tldr"&gt;TL;DR&lt;/h1&gt;&lt;p&gt;Turns out I need to not be a dope and configure nvim-cmp to actually use it...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmp&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;    &lt;span class="c1"&gt;-- removed rest of setup - see the rest in my dotfiles&lt;/span&gt;  &lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="c1"&gt;-- This needs to be here!&lt;/span&gt;    &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="my-setup"&gt;My Setup&lt;/h1&gt;&lt;p&gt;For the sake of completeness here is how I currently (May 2022) configure completion in Neovim usin &lt;code&gt;nvim-cmp&lt;/code&gt;&lt;/p&gt;&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;&lt;p&gt;I keep all my plugins in &lt;code&gt;plugins.vim&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;s:plug_dir&lt;span class="p"&gt;)&lt;/span&gt;Plug &lt;span class="s1"&gt;&amp;#39;neovim/nvim-lspconfig&amp;#39;&lt;/span&gt;Plug &lt;span class="s1"&gt;&amp;#39;hrsh7th/cmp-nvim-lsp&amp;#39;&lt;/span&gt;Plug &lt;span class="s1"&gt;&amp;#39;hrsh7th/cmp-buffer&amp;#39;&lt;/span&gt;Plug &lt;span class="s1"&gt;&amp;#39;hrsh7th/cmp-path&amp;#39;&lt;/span&gt;Plug &lt;span class="s1"&gt;&amp;#39;hrsh7th/cmp-cmdline&amp;#39;&lt;/span&gt;Plug &lt;span class="s1"&gt;&amp;#39;hrsh7th/nvim-cmp&amp;#39;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; For ultisnips users.&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; Plug &amp;#39;SirVer/ultisnips&amp;#39; --&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; Plug &amp;#39;quangnguyen30192/cmp-nvim-ultisnips&amp;#39; --&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="vim-settings"&gt;Vim Settings&lt;/h2&gt;&lt;p&gt;My vim settings are also kept in their own file, &lt;code&gt;settings.vim&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;completeopt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;menu&lt;span class="p"&gt;,&lt;/span&gt;menuone&lt;span class="p"&gt;,&lt;/span&gt;noselect&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="nvim-cmp-configuration"&gt;nvim-cmp configuration&lt;/h2&gt;&lt;p&gt;I have a &lt;code&gt;cmp.lua&lt;/code&gt; file that gets sourced in &lt;code&gt;init.lua&lt;/code&gt; (file structure explained below) for configuring cmp.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="c1"&gt;-- Setup nvim-cmp.&lt;/span&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmp&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;  &lt;span class="n"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;-- REQUIRED - you must specify a snippet engine&lt;/span&gt;    &lt;span class="n"&gt;expand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;-- For `ultisnips` user.&lt;/span&gt;      &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UltiSnips#Anon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;      &lt;span class="n"&gt;completion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bordered&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;Down&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_next_item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;Up&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_prev_item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;C-d&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_docs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;C-f&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_docs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;C-Space&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;C-e&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;Tab&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_next_item&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;CR&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;      &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfirmBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="nb"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;})&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nvim_lsp&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ultisnips&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;buffer&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tmux&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;sources&lt;/code&gt; section is what was key for this post...&lt;/p&gt;&lt;h1 id="piecing-it-together"&gt;Piecing it together!&lt;/h1&gt;&lt;p&gt;My &lt;code&gt;init.vim&lt;/code&gt; sources plugins and then settings and then finally calls &lt;code&gt;init.lua&lt;/code&gt;.&lt;code&gt;init.lua&lt;/code&gt; sources my &lt;code&gt;cmp.lua&lt;/code&gt; file and BANG! auto-completion.&lt;/p&gt;&lt;h2 id="more-sources"&gt;More sources&lt;/h2&gt;&lt;p&gt;hrsh7th's wiki for &lt;code&gt;nvim-cmp&lt;/code&gt; is &lt;a href="https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources"&gt;here&lt;/a&gt; and has example configs as well as a list of sources...&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Don't forget to configure and not just install!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/nicpayne713/dotfiles"&gt;my dotfiles&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/filepath-completion-in-neovim</guid><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate></item><item><title>Subset a list based on values in another list with itertools.compress</title><link>https://pype.dev/til/subset-a-list-based-on-values-in-another-list-with-itertools.compress</link><description>I have list </description><content:encoded>&lt;p&gt;I have list [True, False, False, True] and another list [1, 2, 3, 4] and a use case where I want to filter list 2 based on list 1 to remove values that line up with the element False in list 1.... so the outcome will be [1, 4]. list(compress(list2, list1)) will do it. As long as you can create a mask for the filter than itertool.compress will be your friend!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/subset-a-list-based-on-values-in-another-list-with-itertools.compress</guid><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate></item><item><title>Nextcloud permissions with ZFS and Ansible-NAS</title><link>https://pype.dev/til/nextcloud-permissions-with-zfs-and-ansible-nas</link><description>As the nextcloud docs say... if you want to write to an external volume that You want to self-host your own cloud and use a smart file system for convenience...</description><content:encoded>&lt;h1 id="tldr"&gt;TL;DR&lt;/h1&gt;&lt;p&gt;As the nextcloud docs say... if you want to write to an external volume thatlocation has to be writeable by the user/group &lt;code&gt;www-data&lt;/code&gt; on the host system...so if that makes sense to you then this TIL probably isn't a ton of value.. ifnot however, read on :)&lt;/p&gt;&lt;h1 id="case-study"&gt;Case Study&lt;/h1&gt;&lt;p&gt;You want to self-host your own cloud and use a smart file system for convenience...Nextcloud and ZFS are pretty common goto answers for each of those problems.&lt;/p&gt;&lt;p&gt;My home NAS is built on ZFS and among other things I have a &lt;code&gt;zpool&lt;/code&gt; named&lt;code&gt;tank&lt;/code&gt; and nested in there is a &lt;code&gt;tank/nas&lt;/code&gt; dataset with several child zfsdatasets under that.&lt;/p&gt;&lt;p&gt;I want to use nextcloud mainly for auto-uploading photos from my wife's and my phones for automatic backups.The issue is that the nextcloud application (I run in Docker) is fixed as the&lt;code&gt;www-data&lt;/code&gt; user and so any volume/folder that you want nextcloud to write toneeds to be permissioned such that &lt;code&gt;www-data&lt;/code&gt; owns it... but I don't want&lt;code&gt;www-data&lt;/code&gt; to own everything in my NAS... so what's a girl to do?&lt;/p&gt;&lt;h1 id="solution"&gt;Solution&lt;/h1&gt;&lt;p&gt;Well, one way to go is to just utilize docker volumes, write the data in thecontainer to &lt;code&gt;/var/www/html&lt;/code&gt; and let that be the place your data backsup to.&lt;/p&gt;&lt;p&gt;I still wanted nextcloud to automatically write right to my NAS so I created a&lt;code&gt;nextcloud-upload&lt;/code&gt; directory inside of &lt;code&gt;tank/nas/media/photos&lt;/code&gt; (photos causethat's all that gets automatically uploaded)&lt;/p&gt;&lt;p&gt;Then I &lt;code&gt;chown -R www-data:www-data /tank/nas/media/photos/nextcloud-upload&lt;/code&gt; sothat just that sub-folder is owned by &lt;code&gt;www-data&lt;/code&gt;. Now everyone's happy!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/nextcloud-permissions-with-zfs-and-ansible-nas</guid><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate></item><item><title>Netplan change from Focal to Jammy</title><link>https://pype.dev/til/netplan-change-from-focal-to-jammy</link><description>I am revamping my home server and bumped myself early up to Jammy Jellyfish... Turns out Netplan got a little change in how to express the  Old Ubuntu 20.04 way</description><content:encoded>&lt;p&gt;I am revamping my home server and bumped myself early up to Jammy Jellyfish...however to my peril I reused my netplan config and after hitting my server withthe 'ol &lt;code&gt;netplan apply&lt;/code&gt; I lost connection...DNS still seemed to kinda work externally, but internally nothing was up... &lt;/p&gt;&lt;p&gt;Turns out Netplan got a little change in how to express the &lt;code&gt;gateway&lt;/code&gt; key in the netplan config!&lt;/p&gt;&lt;p&gt;Old Ubuntu 20.04 way&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;network&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ethernets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enp0s4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;192.168.1.&lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;Static IP&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;/24&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;gateway4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.1.1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;-- This changes!&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;nameservers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;192.168.1.1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;1.1.1.1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;New jammin way for Jammy Jellyfish (&lt;strong&gt;at least that worked for me&lt;/strong&gt;)&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;network&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ethernets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;enp0s4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;192.168.1.&lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;Static IP&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;/24&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;via&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.1.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;nameservers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;192.168.1.1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;1.1.1.1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/netplan-change-from-focal-to-jammy</guid><pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate></item><item><title>Tdarr worker nodes share the cache!</title><link>https://pype.dev/til/tdarr-worker-nodes-share-the-cache</link><description>When working with tdarr remote nodes, they need to have access not only to the To explain I I have an old Dell PowerEdge R610 as my main server running a live s</description><content:encoded>&lt;p&gt;When working with tdarr remote nodes, they need to have access not only to thesame libraries but also the same transcode cache as the server otherwise thetranscodes will fail...&lt;/p&gt;&lt;h1 id="network-setup"&gt;Network Setup&lt;/h1&gt;&lt;p&gt;To explain I'll give a brief overview of my home setup  &lt;/p&gt;&lt;p&gt;I have an old Dell PowerEdge R610 as my main server running a live server distribution of Ubuntu.I use ZFS for my NAS file system, and most of my datasets are accesible over my home network.I have a Tdarr server running in a docker container on the R610.&lt;/p&gt;&lt;p&gt;In my office I dailyi drive a gaming desktop with an Nvidia 2060 Super running Ubuntu as well.On that desktop I am running a Tdarr node in a docker container. The container has access to the network folders with my media. &lt;/p&gt;&lt;h1 id="initial-magic"&gt;Initial Magic&lt;/h1&gt;&lt;p&gt;When I spun up  a tdarr node on my desktop, the tdarr server running on my R610 automatically registered the node, which was freaking amazing.That magic though spoiled me and I thought that I didn't need to read the rest of the docs...&lt;/p&gt;&lt;h1 id="initial-fail"&gt;Initial Fail&lt;/h1&gt;&lt;p&gt;I setup a transcode cache directory on the R610 locally and a separate transcode cache on my desktop that the remote tdarr node would use.Having them separated led to 2 main issues:1. Transcodes were not being migrated back to my library properly2. I was running out of disk space on my desktop because tdarr wasn't deleting the completed cache files properly.&lt;/p&gt;&lt;h1 id="the-fix"&gt;The Fix&lt;/h1&gt;&lt;p&gt;Make a transcode cache directory accessible on my network, and give access to that directory to the docker container running my remote tdarr node.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/tdarr-worker-nodes-share-the-cache</guid><pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate></item><item><title>Add space to your LVM on Ubuntu</title><link>https://pype.dev/til/add-space-to-your-lvm-on-ubuntu</link><description>I ran out of space on the SSD in my server when doing some file transfers but only 100GB was used of a 256 GB SSD? When installing Ubuntu live server the defaul</description><content:encoded>&lt;p&gt;I ran out of space on the SSD in my server when doing some file transfers but only 100GB was used of a 256 GB SSD?&lt;/p&gt;&lt;h1 id="lvm"&gt;LVM&lt;/h1&gt;&lt;p&gt;When installing Ubuntu live server the default option for how to partition thedisk (in my experience) has been to setup an LVM group that defaults to lessthan the available space. Most recently I put Ubuntu server on a 256 GB SSD butthe main partition was formatted as an LVM group with 100GB of storage... Ididn't think anything of this even though I'm mostly used to EXT4.&lt;/p&gt;&lt;p&gt;I think the reason for LVMs is performance, but in hindsight, I don't reallycare much about the performance differences, I really just want all my storagethat's fast enough&lt;/p&gt;&lt;h1 id="extending-the-lvm"&gt;Extending the LVM&lt;/h1&gt;&lt;p&gt;A moment of googling brought me to Ubuntu's wiki and Ilearned that I can expand my LVM to the space I need...&lt;/p&gt;&lt;p&gt;&lt;code&gt;sudo lvdisplay&lt;/code&gt; and &lt;code&gt;sudo pvdisplay&lt;/code&gt; show detailed views of the logical volumes and physical volumes respectively.&lt;/p&gt;&lt;p&gt;Take a look at those and find the volume you need to extend. For me I found this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  --- Logical volume ---  LV Path                /dev/ubuntu-vg/ubuntu-lv  LV Name                ubuntu-lv  VG Name                ubuntu-vg  LV Write Access        read/write  LV Status              available  ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There's more that you'll see but this is what's relevant - I need to extend the&lt;code&gt;ubuntu-lv&lt;/code&gt; logical volume in the &lt;code&gt;ubuntu-vg&lt;/code&gt; volume group.&lt;/p&gt;&lt;p&gt;&lt;code&gt;sudo lvextend -L +50g ubuntu-vg/ubuntu-lv&lt;/code&gt; gives me 50 more GB of storage which should be enough for at least tonight 🤓&lt;/p&gt;&lt;p&gt;&lt;a href="https://wiki.ubuntu.com/Lvm"&gt;RTFM&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/add-space-to-your-lvm-on-ubuntu</guid><pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate></item><item><title>Reindex Nextcloud After Adding Data via CLI</title><link>https://pype.dev/til/reindex-nextcloud-after-adding-data-via-cli</link><description>I wrote  Because I had a ton of photos on the NAS anyways that I wanted moved over to As www-data I needed to </description><content:encoded>&lt;h1 id="my-nextcloud-woes"&gt;My Nextcloud woes&lt;/h1&gt;&lt;p&gt;I wrote &lt;a href="" title="nextcloud-permissions-with-zfs-and-ansible-nas"&gt;here&lt;/a&gt; about settingup &lt;code&gt;www-data&lt;/code&gt; as the owner of any directories you want nextcloud to manage.However, I regularly struggle wtih permissions issues on my NAS because of theexternal storage app anyways so I've decided to just put our photos in the spotNextcloud would otherwise put them, and use this as healthy pressure on ourfamily to organize our photos and put the ones we care about with the rest ofour family media.&lt;/p&gt;&lt;h1 id="migration"&gt;Migration&lt;/h1&gt;&lt;p&gt;Because I had a ton of photos on the NAS anyways that I wanted moved over toNextcloud I just rsync'd the photos directory on my NAS to the user's photosdirectory in nextcloud but they weren't showing up in the web UI!&lt;/p&gt;&lt;h1 id="the-fix"&gt;The Fix?&lt;/h1&gt;&lt;p&gt;As www-data I needed to &lt;code&gt;php /var/www/nextcloud/occ files:scan --all&lt;/code&gt; inside mynextcloud docker container AFTER moving a bunch of photos off my "NAS" into thefolder mounted to the nextcloud container as its data folder! Before I did thisthey weren't showing up in the web UI/&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/reindex-nextcloud-after-adding-data-via-cli</guid><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate></item><item><title>Add colored indicators to your dataframes html representation</title><link>https://pype.dev/til/add-colored-indicators-to-your-dataframes-html-representation</link><description>First though... why? The docs for the  So we can write a function that returns  By default the function will be applied to all columns of the dataframe, but Con</description><content:encoded>&lt;p&gt;&lt;a href="https://twitter.com/driscollis"&gt;Mike Driscoll&lt;/a&gt; recently tweeted about makingcolored out with pandas DataFrames and I just had to try it for myself&lt;/p&gt;&lt;h1 id="use-case"&gt;Use Case&lt;/h1&gt;&lt;p&gt;First though... why?My biggest use case is a monitoring pipeline of mine... The details aside, theoutput of my pipeline is a dataframe where each row has information about afailed pipeline that I need to go look into. I dump that result to a simle htmlfile that's hosted on an internal site and the file is updated every couple ofhours. Adding some colored indicators automatically to the rows to help meassess severity of each record would be a handy way to quickly get anunderstanding the state of our pipelines.&lt;/p&gt;&lt;h1 id="how"&gt;How?&lt;/h1&gt;&lt;p&gt;The docs for the &lt;code&gt;applymap&lt;/code&gt; method state simply:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Apply a CSS-styling function elementwise.Updates the HTML representation with the result.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we can write a function that returns &lt;code&gt;color: {color}&lt;/code&gt; based on the dataframevalues and when we drop that dataframe to html we'll have some simple cssstyling applied automagically!&lt;/p&gt;&lt;p&gt;By default the function will be applied to all columns of the dataframe, butthat's not useful if the columns are different types which is usually the case.Luckily there is a &lt;code&gt;subset&lt;/code&gt; keyword to only apply to the columns you need!&lt;/p&gt;&lt;p&gt;Consider my example&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cars.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mpg_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;color: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt; &lt;span class="err"&gt;&lt;/span&gt;  &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;3.8.11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sandbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mpg_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;color.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I want to quickly see if the &lt;code&gt;mpg&lt;/code&gt; is any good for the cars in the cars datasetand I'll define "good" as better than 21 mpg (not great I know but just for thesake of discussion...)&lt;/p&gt;&lt;p&gt;The function returns an appropriate css string and after I &lt;code&gt;style.applymap&lt;/code&gt; on just the &lt;code&gt;mpg&lt;/code&gt; column we get this!&lt;/p&gt;&lt;style type="text/css"&gt;#T_95e99_row0_col1, #T_95e99_row1_col1, #T_95e99_row2_col1, #T_95e99_row3_col1 {  color: green;}#T_95e99_row4_col1 {  color: red;}&lt;/style&gt;&lt;table id="T_95e99"&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th class="blank level0" &gt;&amp;nbsp;&lt;/th&gt;      &lt;th id="T_95e99_level0_col0" class="col_heading level0 col0" &gt;Unnamed: 0&lt;/th&gt;      &lt;th id="T_95e99_level0_col1" class="col_heading level0 col1" &gt;mpg&lt;/th&gt;      &lt;th id="T_95e99_level0_col2" class="col_heading level0 col2" &gt;cyl&lt;/th&gt;      &lt;th id="T_95e99_level0_col3" class="col_heading level0 col3" &gt;disp&lt;/th&gt;      &lt;th id="T_95e99_level0_col4" class="col_heading level0 col4" &gt;hp&lt;/th&gt;      &lt;th id="T_95e99_level0_col5" class="col_heading level0 col5" &gt;drat&lt;/th&gt;      &lt;th id="T_95e99_level0_col6" class="col_heading level0 col6" &gt;wt&lt;/th&gt;      &lt;th id="T_95e99_level0_col7" class="col_heading level0 col7" &gt;qsec&lt;/th&gt;      &lt;th id="T_95e99_level0_col8" class="col_heading level0 col8" &gt;vs&lt;/th&gt;      &lt;th id="T_95e99_level0_col9" class="col_heading level0 col9" &gt;am&lt;/th&gt;      &lt;th id="T_95e99_level0_col10" class="col_heading level0 col10" &gt;gear&lt;/th&gt;      &lt;th id="T_95e99_level0_col11" class="col_heading level0 col11" &gt;carb&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th id="T_95e99_level0_row0" class="row_heading level0 row0" &gt;0&lt;/th&gt;      &lt;td id="T_95e99_row0_col0" class="data row0 col0" &gt;Mazda RX4&lt;/td&gt;      &lt;td id="T_95e99_row0_col1" class="data row0 col1" &gt;21.000000&lt;/td&gt;      &lt;td id="T_95e99_row0_col2" class="data row0 col2" &gt;6&lt;/td&gt;      &lt;td id="T_95e99_row0_col3" class="data row0 col3" &gt;160.000000&lt;/td&gt;      &lt;td id="T_95e99_row0_col4" class="data row0 col4" &gt;110&lt;/td&gt;      &lt;td id="T_95e99_row0_col5" class="data row0 col5" &gt;3.900000&lt;/td&gt;      &lt;td id="T_95e99_row0_col6" class="data row0 col6" &gt;2.620000&lt;/td&gt;      &lt;td id="T_95e99_row0_col7" class="data row0 col7" &gt;16.460000&lt;/td&gt;      &lt;td id="T_95e99_row0_col8" class="data row0 col8" &gt;0&lt;/td&gt;      &lt;td id="T_95e99_row0_col9" class="data row0 col9" &gt;1&lt;/td&gt;      &lt;td id="T_95e99_row0_col10" class="data row0 col10" &gt;4&lt;/td&gt;      &lt;td id="T_95e99_row0_col11" class="data row0 col11" &gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th id="T_95e99_level0_row1" class="row_heading level0 row1" &gt;1&lt;/th&gt;      &lt;td id="T_95e99_row1_col0" class="data row1 col0" &gt;Mazda RX4 Wag&lt;/td&gt;      &lt;td id="T_95e99_row1_col1" class="data row1 col1" &gt;21.000000&lt;/td&gt;      &lt;td id="T_95e99_row1_col2" class="data row1 col2" &gt;6&lt;/td&gt;      &lt;td id="T_95e99_row1_col3" class="data row1 col3" &gt;160.000000&lt;/td&gt;      &lt;td id="T_95e99_row1_col4" class="data row1 col4" &gt;110&lt;/td&gt;      &lt;td id="T_95e99_row1_col5" class="data row1 col5" &gt;3.900000&lt;/td&gt;      &lt;td id="T_95e99_row1_col6" class="data row1 col6" &gt;2.875000&lt;/td&gt;      &lt;td id="T_95e99_row1_col7" class="data row1 col7" &gt;17.020000&lt;/td&gt;      &lt;td id="T_95e99_row1_col8" class="data row1 col8" &gt;0&lt;/td&gt;      &lt;td id="T_95e99_row1_col9" class="data row1 col9" &gt;1&lt;/td&gt;      &lt;td id="T_95e99_row1_col10" class="data row1 col10" &gt;4&lt;/td&gt;      &lt;td id="T_95e99_row1_col11" class="data row1 col11" &gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th id="T_95e99_level0_row2" class="row_heading level0 row2" &gt;2&lt;/th&gt;      &lt;td id="T_95e99_row2_col0" class="data row2 col0" &gt;Datsun 710&lt;/td&gt;      &lt;td id="T_95e99_row2_col1" class="data row2 col1" &gt;22.800000&lt;/td&gt;      &lt;td id="T_95e99_row2_col2" class="data row2 col2" &gt;4&lt;/td&gt;      &lt;td id="T_95e99_row2_col3" class="data row2 col3" &gt;108.000000&lt;/td&gt;      &lt;td id="T_95e99_row2_col4" class="data row2 col4" &gt;93&lt;/td&gt;      &lt;td id="T_95e99_row2_col5" class="data row2 col5" &gt;3.850000&lt;/td&gt;      &lt;td id="T_95e99_row2_col6" class="data row2 col6" &gt;2.320000&lt;/td&gt;      &lt;td id="T_95e99_row2_col7" class="data row2 col7" &gt;18.610000&lt;/td&gt;      &lt;td id="T_95e99_row2_col8" class="data row2 col8" &gt;1&lt;/td&gt;      &lt;td id="T_95e99_row2_col9" class="data row2 col9" &gt;1&lt;/td&gt;      &lt;td id="T_95e99_row2_col10" class="data row2 col10" &gt;4&lt;/td&gt;      &lt;td id="T_95e99_row2_col11" class="data row2 col11" &gt;1&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th id="T_95e99_level0_row3" class="row_heading level0 row3" &gt;3&lt;/th&gt;      &lt;td id="T_95e99_row3_col0" class="data row3 col0" &gt;Hornet 4 Drive&lt;/td&gt;      &lt;td id="T_95e99_row3_col1" class="data row3 col1" &gt;21.400000&lt;/td&gt;      &lt;td id="T_95e99_row3_col2" class="data row3 col2" &gt;6&lt;/td&gt;      &lt;td id="T_95e99_row3_col3" class="data row3 col3" &gt;258.000000&lt;/td&gt;      &lt;td id="T_95e99_row3_col4" class="data row3 col4" &gt;110&lt;/td&gt;      &lt;td id="T_95e99_row3_col5" class="data row3 col5" &gt;3.080000&lt;/td&gt;      &lt;td id="T_95e99_row3_col6" class="data row3 col6" &gt;3.215000&lt;/td&gt;      &lt;td id="T_95e99_row3_col7" class="data row3 col7" &gt;19.440000&lt;/td&gt;      &lt;td id="T_95e99_row3_col8" class="data row3 col8" &gt;1&lt;/td&gt;      &lt;td id="T_95e99_row3_col9" class="data row3 col9" &gt;0&lt;/td&gt;      &lt;td id="T_95e99_row3_col10" class="data row3 col10" &gt;3&lt;/td&gt;      &lt;td id="T_95e99_row3_col11" class="data row3 col11" &gt;1&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th id="T_95e99_level0_row4" class="row_heading level0 row4" &gt;4&lt;/th&gt;      &lt;td id="T_95e99_row4_col0" class="data row4 col0" &gt;Hornet Sportabout&lt;/td&gt;      &lt;td id="T_95e99_row4_col1" class="data row4 col1" &gt;18.700000&lt;/td&gt;      &lt;td id="T_95e99_row4_col2" class="data row4 col2" &gt;8&lt;/td&gt;      &lt;td id="T_95e99_row4_col3" class="data row4 col3" &gt;360.000000&lt;/td&gt;      &lt;td id="T_95e99_row4_col4" class="data row4 col4" &gt;175&lt;/td&gt;      &lt;td id="T_95e99_row4_col5" class="data row4 col5" &gt;3.150000&lt;/td&gt;      &lt;td id="T_95e99_row4_col6" class="data row4 col6" &gt;3.440000&lt;/td&gt;      &lt;td id="T_95e99_row4_col7" class="data row4 col7" &gt;17.020000&lt;/td&gt;      &lt;td id="T_95e99_row4_col8" class="data row4 col8" &gt;0&lt;/td&gt;      &lt;td id="T_95e99_row4_col9" class="data row4 col9" &gt;0&lt;/td&gt;      &lt;td id="T_95e99_row4_col10" class="data row4 col10" &gt;3&lt;/td&gt;      &lt;td id="T_95e99_row4_col11" class="data row4 col11" &gt;2&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/add-colored-indicators-to-your-dataframes-html-representation</guid><pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate></item><item><title>Reset SSH key passphrase</title><link>https://pype.dev/til/reset-ssh-key-passphrase</link><description>I got into a pickle where I encrypted the ssh keys I use for my SSH connections on LAN, but then I couldn ssh-keygen -p But I needed to remove the passphrase to</description><content:encoded>&lt;p&gt;I got into a pickle where I encrypted the ssh keys I use for my SSH connections on LAN, but then I couldn't run my ansible playbook on my server! ssh-keygen -p and leave the new passphrase blank saved my day (although password protected key files are safer!)&lt;/p&gt;&lt;h1 id="tldr-just-reset-it-to-nothing"&gt;TL;DR - just reset it to nothing&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ssh-keygen -p&lt;/code&gt; will let you reset the passphrase on your ssh keys (good for you! yay security!)&lt;/p&gt;&lt;p&gt;But I needed to remove the passphrase to quickly deploy an ansible playbook 🤓&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/reset-ssh-key-passphrase</guid><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate></item><item><title>cheat on your man</title><link>https://pype.dev/til/cheat-on-your-man</link><description>man man man cheat man You get tiny examples to remind you of what you </description><content:encoded>&lt;p&gt;&lt;code&gt;man&lt;/code&gt; can be a pain to read... and there's lots of alternatives out there and one I've just started playing with is &lt;a href="https://github.com/cheat/cheat"&gt;cheat&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;man man&lt;/code&gt; will give you this plus a billion more lines of docs, which is useful when you need it...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;MAN&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;                                                                                                                       Manual pager utils                                                                                                                      MAN&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;NAME       man - an interface to the on-line reference manualsSYNOPSIS       man  &lt;span class="o"&gt;[&lt;/span&gt;-C  file&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;[&lt;/span&gt;-d&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-D&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--warnings&lt;span class="o"&gt;[=&lt;/span&gt;warnings&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-R encoding&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-L locale&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-m system&lt;span class="o"&gt;[&lt;/span&gt;,...&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-M path&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-S list&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-e extension&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-i&lt;span class="p"&gt;|&lt;/span&gt;-I&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--regex&lt;span class="p"&gt;|&lt;/span&gt;--wildcard&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--names-only&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-a&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-u&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--no-subpages&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-P pager&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-r prompt&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-7&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-E encoding&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--no-hyphenation&lt;span class="o"&gt;]&lt;/span&gt;       &lt;span class="o"&gt;[&lt;/span&gt;--no-justification&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-p string&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-t&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-T&lt;span class="o"&gt;[&lt;/span&gt;device&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-H&lt;span class="o"&gt;[&lt;/span&gt;browser&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-X&lt;span class="o"&gt;[&lt;/span&gt;dpi&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-Z&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt;section&lt;span class="o"&gt;]&lt;/span&gt; page&lt;span class="o"&gt;[&lt;/span&gt;.section&lt;span class="o"&gt;]&lt;/span&gt; ...&lt;span class="o"&gt;]&lt;/span&gt; ...       man -k &lt;span class="o"&gt;[&lt;/span&gt;apropos options&lt;span class="o"&gt;]&lt;/span&gt; regexp ...       man -K &lt;span class="o"&gt;[&lt;/span&gt;-w&lt;span class="p"&gt;|&lt;/span&gt;-W&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-S list&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-i&lt;span class="p"&gt;|&lt;/span&gt;-I&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--regex&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;section&lt;span class="o"&gt;]&lt;/span&gt; term ...       man -f &lt;span class="o"&gt;[&lt;/span&gt;whatis options&lt;span class="o"&gt;]&lt;/span&gt; page ...       man -l &lt;span class="o"&gt;[&lt;/span&gt;-C file&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-d&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-D&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--warnings&lt;span class="o"&gt;[=&lt;/span&gt;warnings&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-R encoding&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-L locale&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-P pager&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-r prompt&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-7&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-E encoding&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-p string&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-t&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-T&lt;span class="o"&gt;[&lt;/span&gt;device&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-H&lt;span class="o"&gt;[&lt;/span&gt;browser&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-X&lt;span class="o"&gt;[&lt;/span&gt;dpi&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-Z&lt;span class="o"&gt;]&lt;/span&gt; file ...       man -w&lt;span class="p"&gt;|&lt;/span&gt;-W &lt;span class="o"&gt;[&lt;/span&gt;-C file&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-d&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-D&lt;span class="o"&gt;]&lt;/span&gt; page ...       man -c &lt;span class="o"&gt;[&lt;/span&gt;-C file&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-d&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-D&lt;span class="o"&gt;]&lt;/span&gt; page ...       man &lt;span class="o"&gt;[&lt;/span&gt;-?V&lt;span class="o"&gt;]&lt;/span&gt;DESCRIPTION       man is the system&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s manual pager.  Each page argument given to man is normally the name of a program, utility or &lt;span class="k"&gt;function&lt;/span&gt;.  The manual page associated with each of these arguments is &lt;span class="k"&gt;then&lt;/span&gt; found and displayed.  A section, &lt;span class="k"&gt;if&lt;/span&gt; provided, will direct  man  to  look       only  &lt;span class="k"&gt;in&lt;/span&gt;  that  section of the manual.  The default action is to search &lt;span class="k"&gt;in&lt;/span&gt; all of the available sections following a pre-defined order &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 n l 8 3 2 3posix 3pm 3perl 3am 5 4 9 6 7&amp;quot;&lt;/span&gt; by default, unless overridden by the SECTION directive &lt;span class="k"&gt;in&lt;/span&gt; /etc/manpath.config&lt;span class="o"&gt;)&lt;/span&gt;,       and to show only the first page found, even &lt;span class="k"&gt;if&lt;/span&gt; page exists &lt;span class="k"&gt;in&lt;/span&gt; several sections.       The table below shows the section numbers of the manual followed by the types of pages they contain.       &lt;span class="m"&gt;1&lt;/span&gt;   Executable programs or shell commands       &lt;span class="m"&gt;2&lt;/span&gt;   System calls &lt;span class="o"&gt;(&lt;/span&gt;functions provided by the kernel&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;   Library calls &lt;span class="o"&gt;(&lt;/span&gt;functions within program libraries&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   Special files &lt;span class="o"&gt;(&lt;/span&gt;usually found &lt;span class="k"&gt;in&lt;/span&gt; /dev&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="m"&gt;5&lt;/span&gt;   File formats and conventions eg /etc/passwd       &lt;span class="m"&gt;6&lt;/span&gt;   Games       &lt;span class="m"&gt;7&lt;/span&gt;   Miscellaneous &lt;span class="o"&gt;(&lt;/span&gt;including macro packages and conventions&lt;span class="o"&gt;)&lt;/span&gt;, e.g. man&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, groff&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   System administration commands &lt;span class="o"&gt;(&lt;/span&gt;usually only &lt;span class="k"&gt;for&lt;/span&gt; root&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="m"&gt;9&lt;/span&gt;   Kernel routines &lt;span class="o"&gt;[&lt;/span&gt;Non standard&lt;span class="o"&gt;]&lt;/span&gt;       A manual page consists of several sections.       Conventional section names include NAME, SYNOPSIS, CONFIGURATION, DESCRIPTION, OPTIONS, EXIT STATUS, RETURN VALUE, ERRORS, ENVIRONMENT, FILES, VERSIONS, CONFORMING TO, NOTES, BUGS, EXAMPLE, AUTHORS, and SEE ALSO.       The following conventions apply to the SYNOPSIS section and can be used as a guide &lt;span class="k"&gt;in&lt;/span&gt; other sections.       bold text          &lt;span class="nb"&gt;type&lt;/span&gt; exactly as shown.       italic text        replace with appropriate argument.       &lt;span class="o"&gt;[&lt;/span&gt;-abc&lt;span class="o"&gt;]&lt;/span&gt;             any or all arguments within &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; are optional.       -a&lt;span class="p"&gt;|&lt;/span&gt;-b              options delimited by &lt;span class="p"&gt;|&lt;/span&gt; cannot be used together.       argument ...       argument is repeatable.       &lt;span class="o"&gt;[&lt;/span&gt;expression&lt;span class="o"&gt;]&lt;/span&gt; ...   entire expression within &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; is repeatable.       Exact rendering may vary depending on the output device.  For instance, man will usually not be able to render italics when running &lt;span class="k"&gt;in&lt;/span&gt; a terminal, and will typically use underlined or coloured text instead.       The &lt;span class="nb"&gt;command&lt;/span&gt; or &lt;span class="k"&gt;function&lt;/span&gt; illustration is a pattern that should match all possible invocations.  In some cases it is advisable to illustrate several exclusive invocations as is shown &lt;span class="k"&gt;in&lt;/span&gt; the SYNOPSIS section of this manual page.EXAMPLES       man ls           Display the manual page &lt;span class="k"&gt;for&lt;/span&gt; the item &lt;span class="o"&gt;(&lt;/span&gt;program&lt;span class="o"&gt;)&lt;/span&gt; ls.       man man.7           Display the manual page &lt;span class="k"&gt;for&lt;/span&gt; macro package man from section &lt;span class="m"&gt;7&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="but-what-if-you-dont"&gt;But what if you don't?&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cheat man&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# To convert a man page to pdf:&lt;/span&gt;man -t bash &lt;span class="p"&gt;|&lt;/span&gt; ps2pdf - bash.pdf&lt;span class="c1"&gt;# To view the ascii chart:&lt;/span&gt;man &lt;span class="m"&gt;7&lt;/span&gt; ascii&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You get tiny examples to remind you of what you &lt;strong&gt;probably&lt;/strong&gt; are trying to do!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/til/cheat-on-your-man</guid><pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate></item><item><title>kvm-network-interface-via-nat-ubuntu-20</title><link>https://pype.dev/kvm-network-interface-via-nat-ubuntu-20</link><description>I have started using VMs more and more in my development workflow and it First thing There was a  These commands got me up and running without even turning the </description><content:encoded>&lt;p&gt;I have started using VMs more and more in my development workflow and it'simpossible to work in a VM without an internet connection for me most of thetime. Setting up the KVM networking is kind of confusing to me and I've done ittwo different ways. Here is how I set it up on my home desktop using NAT.&lt;/p&gt;&lt;h1 id="credit"&gt;Credit&lt;/h1&gt;&lt;p&gt;First thing's first: &lt;a href="https://computingforgeeks.com/managing-kvm-network-interfaces-in-linux/"&gt;credit to this post&lt;/a&gt;&lt;/p&gt;&lt;h1 id="commands"&gt;Commands&lt;/h1&gt;&lt;p&gt;There was a &lt;code&gt;default&lt;/code&gt; network already made by virt-manager but my VM couldn't connect over it at all...&lt;/p&gt;&lt;p&gt;These commands got me up and running without even turning the VM off&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I went full on &lt;code&gt;sudo -i&lt;/code&gt; for this just to make it easier - be careful&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="dump-an-existint-network-config"&gt;Dump an existint network config&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# as root&lt;/span&gt;virsh net-dumpxml default &amp;gt; br1.xmlvim br1.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="edit-it"&gt;Edit it&lt;/h2&gt;&lt;p&gt;I was unsure what the ip range should be so I just stuck with the original blog. The &lt;code&gt;default&lt;/code&gt; network had the CIDR block defined as &lt;code&gt;192.168.122.0/24&lt;/code&gt; which is different from my home network so I guess it's fine?&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;network&amp;gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;br1&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;forward&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nat&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="nt"&gt;&amp;lt;nat&amp;gt;&lt;/span&gt;      &lt;span class="nt"&gt;&amp;lt;port&lt;/span&gt; &lt;span class="na"&gt;start=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1024&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;end=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;65535&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class="nt"&gt;&amp;lt;/nat&amp;gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;/forward&amp;gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;bridge&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;br1&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;stp=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;on&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;delay=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;ip&lt;/span&gt; &lt;span class="na"&gt;address=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;192.168.10.1&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;netmask=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;255.255.255.0&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="nt"&gt;&amp;lt;dhcp&amp;gt;&lt;/span&gt;      &lt;span class="nt"&gt;&amp;lt;range&lt;/span&gt; &lt;span class="na"&gt;start=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;192.168.10.10&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;end=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;192.168.10.100&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class="nt"&gt;&amp;lt;/dhcp&amp;gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;/ip&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/network&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="define-a-network"&gt;Define a network&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virsh net-define br1.xmlvirsh net-autostart br1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then to check...&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virsh net-list --all Name      State    Autostart   Persistent-------------------------------------------- br1       active   yes         yes default   active   yes         yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="uuid"&gt;UUID&lt;/h2&gt;&lt;p&gt;&lt;code&gt;virsh net-uuid br1&lt;/code&gt;&lt;/p&gt;&lt;h2 id="magic"&gt;Magic&lt;/h2&gt;&lt;p&gt;&lt;code&gt;virsh attach-interface --domain &amp;lt;NAME OF VM&amp;gt; --type bridge --source br1 --model virtio --config --live&lt;/code&gt;&lt;/p&gt;&lt;p&gt;My VM, &lt;code&gt;ubuntu20.04&lt;/code&gt; was running and immediately connected to the newly attached device!&lt;/p&gt;&lt;h1 id="credit-again"&gt;Credit again&lt;/h1&gt;&lt;p&gt;Visit the original post for more details - this serves more as as a quicker set of notes for future me&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://pype.dev/kvm-network-interface-via-nat-ubuntu-20</guid><pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate></item></channel></rss>