[{"language": "python", "code": "data: Dict[str, MutableSequence[Optional[float]]] = defaultdict(deque)\n\narr_size = 10\n\ndata[\"time\"] = deque([None] * arr_size)\ndata[\"used_memory\"] = deque([None] * arr_size)\n", "hash": "0840a922124f52cef47e4d82271b731f"}, {"language": "python", "code": "def refresh_data():\n    global data\n    memory = psutil.virtual_memory()\n\n    data[\"time\"].append(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    data[\"used_memory\"].append(memory.used // (1024**3))\n\n    data[\"time\"].popleft()\n    data[\"used_memory\"].popleft()\n", "hash": "e7a9c8e3a36cbf85431eb90dae49d32a"}, {"language": "python", "code": "\nif __name__ == \"__main__\":\n    st.header(\"memory chart\")\n    stats = st.empty()\n    while True:\n        refresh_data()\n        stats.plotly_chart(\n            px.line(\n                data,\n                x=\"time\",\n                y=\"used_memory\",\n                title=f\"Memory usage stored in a deque!\",\n               )\n            )\n        time.sleep(0.5)\n", "hash": "76adffdce5a1b839e4709697df4aa8ab"}, {"language": "python", "code": "\nfrom collections import defaultdict, deque\nimport time\nfrom typing import Dict, MutableSequence, Optional\n\nfrom plotly import express as px\nimport psutil\nimport streamlit as st\n\ndata: Dict[str, MutableSequence[Optional[float]]] = defaultdict(deque)\n\narr_size = 10\n\ndata[\"time\"] = deque([None] * arr_size)\ndata[\"used_memory\"] = deque([None] * arr_size)\n\n\ndef refresh_data():\n    global data\n    memory = psutil.virtual_memory()\n\n    data[\"time\"].append(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    data[\"used_memory\"].append(memory.used // (1024**3))\n\n    data[\"time\"].popleft()\n    data[\"used_memory\"].popleft()\n\n\ndef memory_chart():\n    fig = px.line(\n        data,\n        x=\"time\",\n        y=\"used_memory\",\n        title=f\"Memory usage stored in a deque!\",\n    )\n    return fig\n\n\nif __name__ == \"__main__\":\n    st.header(\"memory chart\")\n    stats = st.empty()\n    while True:\n        refresh_data()\n        stats.plotly_chart(memory_chart())\n        time.sleep(0.5)\n", "hash": "038fc48b9af952423e18bc5390a54c52"}, {"language": "bash", "code": "\n~ on \ue33d (us-east-1)  NO PYTHON VENV SET\n\u276f pip install pandas\nERROR: Could not find an activated virtualenv (required).\n\n\n", "hash": "7ff27bc2bb5b5ebe4dbb015739d1617d"}, {"language": "python", "code": "\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///wishes.sqlite3\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n", "hash": "7727bb8c41dbd203826617e13b7bdf36"}, {"language": "python", "code": "from database import Base\nfrom sqlalchemy.schema import Column\nfrom sqlalchemy.types import Boolean, Integer, String, Text\n\n\nclass Wishes(Base):\n    __tablename__ = \"Wishes\"\n    id = Column(Integer, primary_key=True, index=True)\n    person = Column(String(20))\n    item = Column(Text())\n    link = Column(Text())\n    purchased = Column(Boolean())\n    purchased_by = Column(String(90))\n    date_added = Column(String(15))\n", "hash": "76d1909710dbad5176a287d51d747c06"}, {"language": "python", "code": "from pydantic import BaseModel\nimport time\nfrom typing import Optional\n\n\nclass wish_schema(BaseModel):\n\n    person: str\n    item: str\n    link: str\n    purchased: bool = False\n    purchased_by: Optional[str] = None\n    date_added: Optional[str] = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n\n    class Config:\n        orm_mode = True\n\n\nclass patch_schema(BaseModel):\n\n    purchased: bool\n    purchased_by: Optional[str] = None\n\n    class Config:\n        orm_mode = True\n\n", "hash": "c23d29a6934c6f709d7f4cd9e5840af6"}, {"language": "python", "code": "from database import SessionLocal, engine\nimport model\n\nmodel.Base.metadata.create_all(bind=engine)\n\n\ndef create_get_session():\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()\n", "hash": "112109aa1a7710333b6697df66ae1b2e"}, {"language": "python", "code": "from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom model import Wishes\nfrom schema import wish_schema, patch_schema\nfrom session import create_get_session\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"server is up!\"}\n\n\n@app.get(\"/wishes\", response_model=List[wish_schema], status_code=200)\nasync def read_wishes(db: Session = Depends(create_get_session)):\n    wishes = db.query(Wishes).all()\n    return wishes\n\n\n@app.post(\"/wishes\", response_model=wish_schema, status_code=201)\nasync def add_wish(wish: wish_schema, db: Session = Depends(create_get_session)):\n    new_wish = Wishes(\n        person=wish.person,\n        item=wish.item,\n        link=wish.link,\n        purchased=wish.purchased,\n        purchased_by=wish.purchased_by,\n        date_added=wish.date_added,\n    )\n    db.add(new_wish)\n    db.commit()\n\n    return new_wish\n\n\n@app.get(\"/wishes/{id}\", response_model=wish_schema, status_code=200)\nasync def get_wish(id: int, db: Session = Depends(create_get_session)):\n    wish = db.query(Wishes).get(id)\n    return wish\n\n\n@app.patch(\"/wishes/{id}\", response_model=wish_schema, status_code=200)\nasync def update_wish(\n    id: int, patch: patch_schema, db: Session = Depends(create_get_session)\n):\n    db_wish = db.query(Wishes).get(id)\n    db_wish.purchased = patch.purchased\n    db_wish.purchased_by = patch.purchased_by\n    db.commit()\n    db.refresh(db_wish)\n\n    return db_wish\n\n\n@app.delete(\"/wishes/{id}\", status_code=200)\nasync def delete_wish(id: int, db: Session = Depends(create_get_session)):\n    db_wish = db.query(Wishes).get(id)\n    if not db_wish:\n        raise HTTPException(status_code=\"404\", detail=\"Wish id does not exist\")\n\n    db.delete(db_wish)\n    db.commit()\n\n    return None\n\n", "hash": "84d9b2c9555e22f1891998285f8ebaa7"}, {"language": "bash", "code": "sandbox  \ud83c\udf31 main \ud83d\uddd1\ufe0f  \u00d73\ud83d\udee4\ufe0f  \u00d76via \ud83d\udc0d v3.8.11 (sandbox)  took 15s\n\u276f you-get https://archive.org/details/art_of_war_librivox -i\nSite:       Archive.org\nTitle:      The Art of War : Sun Tzu : Free Download, Borrow, and Streaming : Internet Archive\nType:       MP3 (audio/mpeg)\nSize:       3.87 MiB (4055167 Bytes)\n\n", "hash": "e181a3d940098dc463fdecd4dbd119fe"}, {"language": "bash", "code": "sandbox  \ud83c\udf31 main \ud83d\uddd1\ufe0f  \u00d73\ud83d\udee4\ufe0f  \u00d76via \ud83d\udc0d v3.8.11 (sandbox)\n\u276f you-get https://archive.org/details/art_of_war_librivox\nSite:       Archive.org\nTitle:      The Art of War : Sun Tzu : Free Download, Borrow, and Streaming : Internet Archive\nType:       MP3 (audio/mpeg)\nSize:       3.87 MiB (4055167 Bytes)\n\nDownloading The Art of War : Sun Tzu : Free Download, Borrow, and Streaming : Internet Archi.mp3 ...\n 100% (  3.9/  3.9MB) \u251c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2524[1/1]  917 kB/s\n\n", "hash": "c95c946520d55aad271b4b4f9d12119e"}, {"language": "bash", "code": "sandbox   main \ufe0f  \u00d73\ufe0f  \u00d77via  v3.8.11 (sandbox)  took 2m49s\n\u276f pytube https://www.youtube.com/watch\\?v\\=LDU_Txk06tM  --list\nLoading video...\n<Stream: itag=\"17\" mime_type=\"video/3gpp\" res=\"144p\" fps=\"8fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\">\n<Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\">\n<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\">\n<Stream: itag=\"313\" mime_type=\"video/webm\" res=\"2160p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"401\" mime_type=\"video/mp4\" res=\"2160p\" fps=\"30fps\" vcodec=\"av01.0.12M.08\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"271\" mime_type=\"video/webm\" res=\"1440p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"400\" mime_type=\"video/mp4\" res=\"1440p\" fps=\"30fps\" vcodec=\"av01.0.12M.08\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"avc1.640028\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"248\" mime_type=\"video/webm\" res=\"1080p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"399\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"av01.0.08M.08\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.4d401f\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"247\" mime_type=\"video/webm\" res=\"720p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"398\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"av01.0.05M.08\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"avc1.4d401f\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"244\" mime_type=\"video/webm\" res=\"480p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"397\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"av01.0.04M.08\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.4d401e\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"243\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"396\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"av01.0.01M.08\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"avc1.4d4015\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"242\" mime_type=\"video/webm\" res=\"240p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"395\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"av01.0.00M.08\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"avc1.4d400c\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"278\" mime_type=\"video/webm\" res=\"144p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"394\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"av01.0.00M.08\" progressive=\"False\" type=\"video\">\n<Stream: itag=\"139\" mime_type=\"audio/mp4\" abr=\"48kbps\" acodec=\"mp4a.40.5\" progressive=\"False\" type=\"audio\">\n<Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\" progressive=\"False\" type=\"audio\">\n<Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\">\n<Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\">\n<Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\">\n\n", "hash": "7421f6f05ea45a3b0f87117d4489d6cf"}, {"language": "python", "code": "sandbox \u21aa main v3.8.11 ipython\n\u276f from pytube import YouTube\n\nsandbox \u21aa main v3.8.11 ipython\n\u276f [x for x in YouTube(\"https://www.youtube.com/watch?v=LDU_Txk06tM\").streams]\n\n[\n    <Stream: itag=\"17\" mime_type=\"video/3gpp\" res=\"144p\" fps=\"8fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\">,\n    <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\">,\n    <Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\">,\n    <Stream: itag=\"313\" mime_type=\"video/webm\" res=\"2160p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"401\" mime_type=\"video/mp4\" res=\"2160p\" fps=\"30fps\" vcodec=\"av01.0.12M.08\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"271\" mime_type=\"video/webm\" res=\"1440p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"400\" mime_type=\"video/mp4\" res=\"1440p\" fps=\"30fps\" vcodec=\"av01.0.12M.08\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"avc1.640028\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"248\" mime_type=\"video/webm\" res=\"1080p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"399\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"av01.0.08M.08\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.4d401f\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"247\" mime_type=\"video/webm\" res=\"720p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"398\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"av01.0.05M.08\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"avc1.4d401f\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"244\" mime_type=\"video/webm\" res=\"480p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"397\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"av01.0.04M.08\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.4d401e\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"243\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"396\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"av01.0.01M.08\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"avc1.4d4015\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"242\" mime_type=\"video/webm\" res=\"240p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"395\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"av01.0.00M.08\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"avc1.4d400c\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"278\" mime_type=\"video/webm\" res=\"144p\" fps=\"30fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"394\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"av01.0.00M.08\" progressive=\"False\" type=\"video\">,\n    <Stream: itag=\"139\" mime_type=\"audio/mp4\" abr=\"48kbps\" acodec=\"mp4a.40.5\" progressive=\"False\" type=\"audio\">,\n    <Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\" progressive=\"False\" type=\"audio\">,\n    <Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\">,\n    <Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\">,\n    <Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\">\n]\n\n\n", "hash": "248161fbe48fd2bcc12894d55e07c079"}, {"language": "", "code": "! Static IPs on Linux\n\n//Ubuntu 20//\n\nSetting static IP on Ubuntu 20.04\n\n# Navigate to /etc/netplan\n# Open the yaml file (the name seems to be kind of random but it seems to starts with 00 or 05)\n# Change the file as below with your desired settings\n# Run `sudo netplan apply` to have changes reflected\n\n    ```yaml\n    network:\n      version: 2\n      ethernets:\n        enp0s4:\n          addresses: [192.168.1.{Static IP}/24]\n          gateway4: 192.168.1.1\n          nameservers:\n            addresses: [8.8.4.4, 8.8.8.8]\n    ```\n\n", "hash": "df8f968d54d597143f947c91de62026b"}, {"language": "python", "code": "Token.Prompt \"\u276f \"\n", "hash": "79e570ab55e5966cbde66cc769ee1f58"}, {"language": "python", "code": "class MyPrompt(Prompts):\n    def in_prompt_tokens(self, cli=None):\n        return [\n            (Token, \"\"),\n            (Token.OutPrompt, Path().absolute().stem),\n            (Token, \" \"),\n            (Token.Generic.Subheading, get_branch()[0]),\n            (Token, \" \"),\n            (Token.Generic.Heading, get_branch()[1]),\n            (Token, \" \"),\n            (Token.Name.Class, \"via \" + get_venv()),\n            (Token, \" \"),\n            (Token.Name.Entity, \"ipython\"),\n            (Token, \"\\n\"),\n            (\n                Token.Prompt\n                if self.shell.last_execution_succeeded\n                else Token.Generic.Error,\n                \"\u276f \",\n            ),\n        ]\n\n", "hash": "8a7b3abe5317fbac44d32309ea09cf9e"}, {"language": "yaml", "code": "name: traefik\nimage: \"traefik:v2.4\"\nnetwork_mode: host\nvolumes:\n  - \"docker-data/traefik/traefik.toml:/etc/traefik/traefik.toml:ro\"\n  - \"docker-data/traefik/config.yml:/etc/traefik/config.yml:ro\"\n  - \"docker-data/traefik/letsencrypt:/letsencrypt:rw\"\n  - \"/var/run/docker.sock:/var/run/docker.sock:ro\"  # for auto-discovery\nenv: \"\"\nrestart_policy: unless-stopped\nmemory: \"1g\"\n", "hash": "f8e0e3bda2c7e24493ae7038f037725b"}, {"language": "toml", "code": "\n[entryPoints]\n[entryPoints.web]\naddress = \":80\"\n\n[entryPoints.web.http.redirections.entryPoint]\nto = \"websecure\"\n\n[entryPoints.websecure]\naddress = \":443\"\n\n[entryPoints.websecure.http.tls]\ncertResolver = \"letsencrypt\"\n\n[entryPoints.websecure.http.tls.domains]\nmain = \"example.com\"\nsans = [\n\"*.example.com\"\n]\n\n[entryPoints.traefik]\naddress = \":8080\"\n\n[providers]\nprovidersThrottleDuration = \"1s\"\n[providers.docker]\nexposedbydefault = false\n[providers.file]\nfilename = \"/etc/traefik/config.yml\"\n\n[api]\ninsecure = true\ndashboard = true\n\n[log]\nlevel = \"INFO\"\n\n[ping]\nterminatingStatusCode = 0\n\n[certificatesResolvers]\n[certificatesResolvers.letsencrypt]\n[certificatesResolvers.letsencrypt.acme]\nemail = \"my_email@example.com\"\nstorage = \"/letsencrypt/acme.json\"\ncaserver = \"https://acme-staging-v02.api.letsencrypt.org/directory\"  # le staging, not prod\n\n[certificatesResolvers.letsencrypt.acme.dnsChallenge]\nprovider = \"cloudflare\"\n", "hash": "fba124a4796cd151a958189b15e4b90d"}, {"language": "yaml", "code": "http:\n #region routers \n  routers:\n    pihole:\n      entryPoints:\n        - \"websecure\"\n      rule: \"Host(`pihole.example.com`)\"\n      middlewares:\n        # - default-headers\n        - addprefix-pihole\n        - default-whitelist\n      tls: \n        certResolver: letsencrypt\n      service: pihole\n  #region services\n  services:\n    pihole:\n      loadBalancer:\n        servers:\n          - url: \"http://192.168.1.3:80\"\n        passHostHeader: true\n  #endregion\n  middlewares:\n    addprefix-pihole:\n      addPrefix:\n        prefix: \"/admin\"\n    https-redirect:\n      redirectScheme:\n        scheme: https\n\n    default-headers:\n      headers:\n        frameDeny: true\n        sslRedirect: true\n        browserXssFilter: true\n        contentTypeNosniff: true\n        forceSTSHeader: true\n        stsIncludeSubdomains: true\n        stsPreload: true\n        stsSeconds: 15552000\n        customFrameOptionsValue: SAMEORIGIN\n\n    default-whitelist:\n      ipWhiteList:\n        sourceRange:\n        - \"10.6.0.0/24\"  # wg\n        - \"192.168.1.0/24\"  # lan\n        - \"172.17.0.0/16\"  # docker\n\n    secured:\n      chain:\n        middlewares:\n        - default-whitelist\n        - default-headers\n", "hash": "dd91465516cd62bd986793f70c6a104d"}, {"language": "yaml", "code": "name: jellyfin\nimage: linuxserver/jellyfin\nvolumes:\n  - \":/config:rw\"\n  - \":/movies:\"\n  - \":/music:\"\n  - \":/photos:\"\n  - \":/tv:\"\n  - \":/books:\"\n  - \":/audiobooks:\"\nports:\n  - \":8096\"\n  - \":8920\"\nenv:\n  TZ: \"\"\n  PUID: \"\"\n  PGID: \"\"\nrestart_policy: unless-stopped\nmemory: 1g\nlabels:\n  traefik.enable: \"\"\n  traefik.http.routers.jellyfin.rule: \"Host(`jellyfin.`)\"\n  traefik.http.routers.jellyfin.tls.certresolver: \"letsencrypt\"\n  traefik.http.routers.jellyfin.tls.domains[0].main: \"\"\n  traefik.http.routers.jellyfin.tls.domains[0].sans: \"*.\"\n  traefik.http.services.jellyfin.loadbalancer.server.port: \"8096\"\n", "hash": "f8157060736af33de881a91a6f03c5cd"}, {"language": "bash", "code": "terraform-dir\n\u251c\u2500\u2500 .auto.tfvars\n\u251c\u2500\u2500 databases.tf\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 schemas.tf\n\u251c\u2500\u2500 tables.tf\n\u251c\u2500\u2500 .terraform\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 providers\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 registry.terraform.io\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 chanzuckerberg\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 snowflake\n\u2502\u00a0\u00a0                 \u251c\u2500\u2500 0.25.6\n\u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2514\u2500\u2500 linux_amd64\n\u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENSE\n\u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u2514\u2500\u2500 terraform-provider-snowflake_v0.25.6\n\u2502\u00a0\u00a0                 \u2514\u2500\u2500 0.31.0\n\u2502\u00a0\u00a0                     \u2514\u2500\u2500 linux_amd64\n\u2502\u00a0\u00a0                         \u251c\u2500\u2500 CHANGELOG.md\n\u2502\u00a0\u00a0                         \u251c\u2500\u2500 LICENSE\n\u2502\u00a0\u00a0                         \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0                         \u2514\u2500\u2500 terraform-provider-snowflake_v0.31.0\n\u251c\u2500\u2500 .terraform.lock.hcl\n\u251c\u2500\u2500 terraform.tfstate\n", "hash": "6235ef8197dc8e2784587d4ea167a08e"}, {"language": "terraform", "code": "terraform {\n  required_providers {\n    snowflake = {\n      source  = \"chanzuckerberg/snowflake\"\n      version = \"0.31.0\"\n    }\n  }\n}\n\nprovider \"snowflake\" {\n  // required\n  username = \"SNOWFLAKE_USER\"\n  account  = \"URL\"\n\n  password = var.snowflake_password\n  role     = \"ROLE WITH DBA LIKE PERMISSIONS\"\n}\n\nvariable \"snowflake_password\" {\n  type      = string\n  sensitive = true\n}\n\nvariable \"public\" {\n  type = map(any)\n}\n\nvariable \"environment\" {\n  type = map(any)\n}\n\nvariable \"roles\" {\n  type = map(any)\n}\n\n", "hash": "6cb61db7a65358ab7a134e7e172e8164"}, {"language": "bash", "code": "./polybar\n\u251c\u2500\u2500 colors.ini\n\u251c\u2500\u2500 config.ini\n\u251c\u2500\u2500 fonts.ini\n\u251c\u2500\u2500 home-modules.ini\n\u251c\u2500\u2500 include-modules.ini\n\u251c\u2500\u2500 launch.sh\n\u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 aws.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 battery.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bluetooth.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cisco.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cpu.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 date.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eth.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eth_work.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 i3.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 memory.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nm-editor.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 powermenu.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pulseaudio-control.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pulseaudio.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rofi.ini\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 vpn.ini\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wlan.ini\n\u2514\u2500\u2500 work-modules.ini\n\n1 directory, 24 files\n", "hash": "a40925ab344b1d19f5128a03f521e315"}, {"language": "ini", "code": "include-file = $DOTFILES/polybar/include-modules.ini\n\n[bar/home]\nmonitor = ${env:MONITOR:}\nwidth = 100%\nheight = 25\nradius = 8.0\nfixed-center = true\nbottom = false\n\nbackground = ${colors.background}\nforeground = ${colors.foreground}\n\ninclude-file = $DOTFILES/polybar/fonts.ini\ninclude-file = $DOTFILES/polybar/home-modules.ini\n", "hash": "f79781dc77c83543f6c1a9f0ef9c76d8"}, {"language": "ini", "code": "[module/aws]\ninterval = 5.0\ntype = custom/script\nexec = has_aws_token\nclick-left = $HOME/.local/bin/auto_get_aws_token\nclick-right = rm -rf ~/.aws/credentials\n", "hash": "7380d2c8ebd5805893474ad8ffb62823"}, {"language": "bash", "code": "#!/bin/bash\nsource auto_proxy\naws sts get-caller-identity &> /dev/null && echo \"%{T5}%{F#00ff00}\ue26b  %{F-}%{T-}\"  ||( echo \"%{T5}%{F#ff0000}\uf12a %{F-}%{T-}\" )\n", "hash": "f8526a346b0db1b72ac9a9f3a05a3997"}, {"language": "ini", "code": "width = 90%\noffset-x = 5%  # set to (100 - width) / 2\n", "hash": "32ffbb6ee28ad85e3e642e317af2175a"}, {"language": "bash", "code": "dumbledore@pihole-vpn:~$ pivpn\n::: Control all PiVPN specific functions!\n:::\n::: Usage: pivpn <command> [option]\n:::\n::: Commands:\n:::    -a, add              Create a client conf profile\n:::    -c, clients          List any connected clients to the server\n:::    -d, debug            Start a debugging session if having trouble\n:::    -l, list             List all clients\n:::   -qr, qrcode           Show the qrcode of a client for use with the mobile app\n:::    -r, remove           Remove a client\n:::  -off, off              Disable a user\n:::   -on, on               Enable a user\n:::    -h, help             Show this help dialog\n:::    -u, uninstall        Uninstall pivpn from your system!\n:::   -up, update           Updates PiVPN Scripts\n:::   -bk, backup           Backup VPN configs and user profiles\n", "hash": "2e454ce946db9a707948d938086e02b9"}, {"language": "bash", "code": "\nssh user@vpn-server\n\npivpn -a\n\n<follow prompts>\n\nscp ~/configs/truenas.conf root@<truenas ip>:/root/wg0.conf\n\n", "hash": "5398448d58fb505319bd674729a4eb40"}, {"language": "bash", "code": "ssh root@<truenas ip>\n/usr/local/etc/rc.d/wireguard start\n", "hash": "71030c5212fa2759c70575f66e4afb39"}, {"language": "bash ", "code": "wg0: flags=8051<UP,POINTOPOINT,RUNNING,MULTICAST> metric 0 mtu 1420\n        options=80000<LINKSTATE>\n        inet x.x.x.x --> x.x.x.x netmask 0xffffff00\n        groups: tun\n        nd6 options=101<PERFORMNUD,NO_DAD>\n        Opened by PID 1325\n", "hash": "9249c0938f061eed9229a634460fca03"}, {"language": "bash", "code": "\nsudo apt update\nsudo apt install mpv \n\npipx install jellyfin-mpv-shim\npipx inject jellyfin-mpv-shim pystray\n\n#profit\n\n", "hash": "cc2a5b3f979c7ba2450eeb1870e8f90f"}, {"language": "bash", "code": "# as root\n\nvirsh net-dumpxml default > br1.xml\n\nvim br1.xml\n\n", "hash": "f854dfaf90915356f7901b432afe5167"}, {"language": "xml", "code": "<network>\n  <name>br1</name>\n  <forward mode='nat'>\n    <nat>\n      <port start='1024' end='65535'/>\n    </nat>\n  </forward>\n  <bridge name='br1' stp='on' delay='0'/>\n  <ip address='192.168.10.1' netmask='255.255.255.0'>\n    <dhcp>\n      <range start='192.168.10.10' end='192.168.10.100'/>\n    </dhcp>\n  </ip>\n</network>\n", "hash": "df58ece68fd5c257d240d26ec907aa93"}, {"language": "bash", "code": "virsh net-define br1.xml\nvirsh net-autostart br1\n", "hash": "ccb89ae1873e02fe513b93af31833030"}, {"language": "bash", "code": "virsh net-list --all\n\n Name      State    Autostart   Persistent\n--------------------------------------------\n br1       active   yes         yes\n default   active   yes         yes\n", "hash": "28f89c4af522b8e63f3db6e4624f4427"}, {"language": "python", "code": "sandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f my_list = [1, \"2\", \"foo\", [True], False]\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f bool(my_list)\nTrue\n", "hash": "69d3af9dd112c1a27bd2f9ed341e7600"}, {"language": "", "code": "if bool(my_list):\n    if bool(another_list):\n       <operation> \n    else:\n       break\n", "hash": "594bd3f807f76b756b201741b8091cf0"}, {"language": "python", "code": "sandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f another_list = [False, False]\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f my_list and another_list\n[False, False]\n", "hash": "f5ffa3bbe2a25ef336bf4c44b4ec0981"}, {"language": "python", "code": "sandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f if my_list and another_list:\n...:     print(\"foo\")\nfoo\n", "hash": "dcffc154e96d56f8b340b5354956c0bd"}, {"language": "python", "code": "sandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f my_list & another_list\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 <ipython-input-19-a2a16cebb3da>:1 in <cell line: 1>                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: unsupported operand type(s) for &: 'list' and 'list'\n\n", "hash": "7e1e235f6e12cb31334fada4a7cfeeba"}, {"language": "python", "code": "\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f arr = np.array([\"1\", 2, True, False])\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f arr\narray(['1', '2', 'True', 'False'], dtype='<U21')\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f bool(arr)\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 <ipython-input-25-4e8c5dd85b93>:1 in <cell line: 1>                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n\n", "hash": "e87b9019de845a781f966d0e724cc80e"}, {"language": "python", "code": "sandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f if arr.any():\n...:     print(\"foo\")\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 <ipython-input-48-25ecac52db96>:1 in <cell line: 1>                                              \u2502\n\u2502 /home/u_paynen3/personal/sandbox/.venv/sandbox/lib/python3.8/site-packages/numpy/core/_methods.p \u2502\n\u2502 y:57 in _any                                                                                     \u2502\n\u2502                                                                                                  \u2502\n\u2502    54 def _any(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):               \u2502\n\u2502    55 \u2502   # Parsing keyword arguments is currently fairly slow, so avoid it for now              \u2502\n\u2502    56 \u2502   if where is True:                                                                      \u2502\n\u2502 \u2771  57 \u2502   \u2502   return umr_any(a, axis, dtype, out, keepdims)                                      \u2502\n\u2502    58 \u2502   return umr_any(a, axis, dtype, out, keepdims, where=where)                             \u2502\n\u2502    59                                                                                            \u2502\n\u2502    60 def _all(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nUFuncTypeError: ufunc 'logical_or' did not contain a loop with signature matching types (None, <class 'numpy.dtype[str_]'>) -> None\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\n\u276f if all(arr):\n...:     print(\"foo\")\nfoo\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f if any(arr):\n...:     print(\"foo\")\nfoo\n", "hash": "790bc8725d0c17b45ea3314959bd99cc"}, {"language": "python", "code": "sandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f arr2 = np.array([1, True, False])\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f arr2\narray([1, 1, 0])\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f if arr2.any():\n...:     print(\"foo\")\nfoo\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f if arr2.all():\n...:     print(\"foo\")\n\n", "hash": "bcc3f47104c53d7867501341c784a64c"}, {"language": "python", "code": "\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f s = pd.Series([1, \"foo\", True, False])\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f s\n\n0        1\n1      foo\n2     True\n3    False\ndtype: object\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f bool(s)\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 <ipython-input-60-68e48e81da14>:1 in <cell line: 1>                                              \u2502\n\u2502 /home/u_paynen3/personal/sandbox/.venv/sandbox/lib/python3.8/site-packages/pandas/core/generic.p \u2502\n\u2502 y:1527 in __nonzero__                                                                            \u2502\n\u2502                                                                                                  \u2502\n\u2502    1524 \u2502                                                                                        \u2502\n\u2502    1525 \u2502   @final                                                                               \u2502\n\u2502    1526 \u2502   def __nonzero__(self):                                                               \u2502\n\u2502 \u2771  1527 \u2502   \u2502   raise ValueError(                                                                \u2502\n\u2502    1528 \u2502   \u2502   \u2502   f\"The truth value of a {type(self).__name__} is ambiguous. \"                 \u2502\n\u2502    1529 \u2502   \u2502   \u2502   \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"                       \u2502\n\u2502    1530 \u2502   \u2502   )                                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\n", "hash": "b5390ac015be85b4353cf67f944d2275"}, {"language": "python", "code": "\n\u276f if s.any():\n...:     print(\"foo\")\nfoo\n\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f if s.all():\n...:     print(\"foo\")\n\n", "hash": "07bb984d2016fe12f850a3db72621c8a"}, {"language": "python", "code": "\nsandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f df\n\n   s s2   s3\n0  1  0  foo\n1  1  a  bar\n2  1  b  baz\n3  2  a  fee\n4  2  0   fi\n", "hash": "7f77df2cdb4268731fe314d319313bdf"}, {"language": "python", "code": "ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n", "hash": "fc265859c54893de1ca9cdf1271c3601"}, {"language": "python", "code": "sandbox NO VCS  via 3.8.11(sandbox) ipython\n\u276f df.s3[(df.s == 1) & (df.s2 == \"a\")]\n\n1    bar\nName: s3, dtype: object\n", "hash": "89f1e82427bb6dbf4644ce43c5a65844"}, {"language": "jinja", "code": "<form method=\"post\">\n    <div class=\"form-check \">\n        <input class=\"form-check-input\"  name=\"item_1\" id=\"itemOne\" value=\"1\" type=\"checkbox\">\n        <label class=\"form-check-label\" for=\"itemOne\" > A label for this item </label>\n    </div>\n    <div class=\"form-check \">\n        <input class=\"form-check-input\"  name=\"item_2\" id=\"itemTwo\" value=\"2\" type=\"checkbox\">\n        <label class=\"form-check-label\" for=\"itemTwo\" > A label for item 2 </label>\n    </div>\n\n<button type=\"submit\" class=\"submit btn btn-xl\" >Submit</button>\n</form>\n", "hash": "094dcbef602aac3e7aea9f2d5ff93c3f"}, {"language": "python", "code": "import starlette.status as status\nfrom fastapi import APIRouter, Depends, Form, Request\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom fastapi.templating import Jinja2Templates\nfrom sqlalchemy.orm import Session\n\nfrom app.session.session import create_get_session\n\nrouter = APIRouter()\ntemplates = Jinja2Templates(directory=\"templates/\")\n\n@router.post(\"/my_route/do_something_with_form\", response_class=HTMLResponse)\nasync def delete_rows(\n    request: Request,\n    item_1: int = Form(...),\n    item_2: int = Form(...)\n    db: Session = Depends(create_get_session),\n):\n    print(item_1)  # will just print 1 to the console where fastapi is running if the checkbox was checked\n    print(item_2)  # will just print 1 to the console where fastapi is running if the checkbox was checked\n    return RedirectResponse(\"/\", status_code=status.HTTP_302_FOUND)\n", "hash": "ac44e62ea26fa53dc7ad19a32298e8b4"}, {"language": "jinja", "code": "<form method=\"post\">\n  \n\n<button type=\"submit\" class=\"submit btn btn-xl btn-outline-danger\" >Remove</button>\n</form>\n\n", "hash": "32eb319417dde54da4379d37808dab13"}, {"language": "python", "code": "# same stuff as above, only showing post method here\n@router.post(\"/my_route/do_something_with_form\", response_class=HTMLResponse)\nasync def delete_rows(\n    request: Request,\n    db: Session = Depends(create_get_session),\n):\n    form_data = await request.get_form()\n    data = jsonable_encoder(form_data)\n    # data = {\"item_1\": 1, \"item_2\": 2, ... \"item_N\": N}\n    return RedirectResponse(\"/\", status_code=status.HTTP_302_FOUND)\n", "hash": "118604aeb8dbef71f94e56314a6bf19a"}, {"language": "python", "code": "df = pd.read_csv(\"./file-with-confusing-dtypes.csv\")\nfor c in df.columns:\n    if df[c].dtype == \"datetime64\":\n        df[c] = pd.to_datetime(df.c)\n\n", "hash": "644a3bc220fdf5ce9ead209342cf5660"}, {"language": "python", "code": "df = pd.read_csv(\"./file-with-confusing-dtypes.csv\")\nfor c in df.select_dtypes('datetime64'):\n    df[c] = pd.to_datetime(df.c)\n\n", "hash": "398e54863acf3dff9131ee30ad67c3b9"}, {"language": "python", "code": "sandbox \uf7a1  main via 3.8.11(sandbox) ipython\n\u276f df = pd.DataFrame({\"A\": [\"string1\", \"string2\", \"string3\"]})\n[PYFLYBY] import pandas as pd\n\nsandbox \uf7a1  main via 3.8.11(sandbox) ipython\n\u276f df\n\n         A\n0  string1\n1  string2\n2  string3\n\nsandbox \uf7a1  main via 3.8.11(sandbox) ipython\n\u276f df[df.A.str.contains('1') | df.A.str.contains('2')]\n\n         A\n0  string1\n1  string2\n\n", "hash": "97deccc36414e4d9839a187b7fcb16ca"}, {"language": "python", "code": "\nsandbox \uf7a1  main via 3.8.11(sandbox) ipython\n\u276f vals = [\"1\", \"2\"]  # iterable with whatever is appropriate for your use case\n\nsandbox \uf7a1  main via 3.8.11(sandbox) ipython\n\u276f df[df.A.str.contains(\"|\".join(vals), regex=True)]\n\n         A\n0  string1\n1  string2\n\n", "hash": "732c37e4781022f3dd5d3797718ed39b"}, {"language": "python", "code": "arr: Tuple[Union[int, str]] = (1, 2, 3, 'a', 'b', 'c')\n\n\nprint(arr)\n>>> (1, 2, 3, 'a', 'b', 'c')\n\n# the * unpacks the tuple into the individual elements\nprint(*arr)\n>>> 1, 2, 3, 'a', 'b', 'c'\n\nx, y, z, *alphas = arr\n\n# x = 1, y = 2, z = 3\n# alphas = [ 'a', 'b', 'c' ]\n\n", "hash": "91a0da6a469e6cec2fcc362678f7ad74"}, {"language": "python", "code": "x, y, *mixed, alpha = arr\n\n# x = 1, y = 2\n# mixed = [3, 'a', 'b']\n# alpha = 'c'\n", "hash": "1d34f205786a7c1a7995680207b579ee"}, {"language": "bash", "code": "  --- Logical volume ---\n  LV Path                /dev/ubuntu-vg/ubuntu-lv\n  LV Name                ubuntu-lv\n  VG Name                ubuntu-vg\n  LV Write Access        read/write\n  LV Status              available\n  ...\n", "hash": "d05756a061332cc807d53f5bc83ca047"}, {"language": "python", "code": "\u276f df.head()\n\n          Unnamed: 0   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb\n0          Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4\n1      Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4\n2         Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1\n3     Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1\n4  Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2\n\n", "hash": "c85a11dbee1583847667fb52c6d79084"}, {"language": "python", "code": "\nmental-data-lake \uf7a1  new-posts via 3.8.11(mental-data-lake) ipython\n\u276f df.head().to_markdown()\n'|    | Unnamed: 0        |   mpg |   cyl |   disp |   hp |   drat |    wt |   qsec |   vs |   am |   gear |   carb |\\n|---:|:------------------|------:|------:|-------:|-----:|-------:|------:|-------:|-----:|-----:|-------:|-------:|\\n|  0 | Mazda RX4         |  21   |     6 |    160 |  110 |   3.9  | 2.62  |  16.46 |    0 |    1 |      4 |      4 |\\n|  1 | Mazda RX4 Wag     |  21   |     6 |    160 |  110 |   3.9  | 2.875 |  17.02 |    0 |    1 |      4 |      4 |\\n|  2 | Datsun 710        |  22.8 |     4 |    108 |   93 |   3.85 | 2.32  |  18.61 |    1 |    1 |      4 |      1 |\\n|  3 | Hornet 4 Drive    |  21.4 |     6 |    258 |  110 |   3.08 | 3.215 |  19.44 |    1 |    0 |      3 |      1 |\\n|  4 | Hornet Sportabout |  18.7 |     8 |    360 |  175 |   3.15 | 3.44  |  17.02 |    0 |    0 |      3 |      2 |'\n\n", "hash": "c65d0ecd95cd4dda6052733dcdf8c9f3"}, {"language": "text", "code": "\n'<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>Unnamed: 0</th>\\n      <th>mpg</th>\\n      <th>cyl</th>\\n      <th>disp</th>\\n      <th>hp</th>\\n      <th>drat</th>\\n      <th>wt</th>\\n      <th>qsec</th>\\n      <th>vs</th>\\n      <th>am</th>\\n      <th>gear</th>\\n      <th>carb</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>Mazda RX4</td>\\n      <td>21.0</td>\\n      <td>6</td>\\n      <td>160.0</td>\\n      <td>110</td>\\n      <td>3.90</td>\\n      <td>2.620</td>\\n      <td>16.46</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>4</td>\\n      <td>4</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>Mazda RX4 Wag</td>\\n      <td>21.0</td>\\n      <td>6</td>\\n      <td>160.0</td>\\n      <td>110</td>\\n      <td>3.90</td>\\n      <td>2.875</td>\\n      <td>17.02</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>4</td>\\n      <td>4</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>Datsun 710</td>\\n      <td>22.8</td>\\n      <td>4</td>\\n      <td>108.0</td>\\n      <td>93</td>\\n      <td>3.85</td>\\n      <td>2.320</td>\\n      <td>18.61</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>4</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>Hornet 4 Drive</td>\\n      <td>21.4</td>\\n      <td>6</td>\\n      <td>258.0</td>\\n      <td>110</td>\\n      <td>3.08</td>\\n      <td>3.215</td>\\n      <td>19.44</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>Hornet Sportabout</td>\\n      <td>18.7</td>\\n      <td>8</td>\\n      <td>360.0</td>\\n      <td>175</td>\\n      <td>3.15</td>\\n      <td>3.440</td>\\n      <td>17.02</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>2</td>\\n    </tr>\\n  </tbody>\\n</table>'\n\n", "hash": "09388c7749b6bff799393275a55bb364"}, {"language": "bash", "code": "cd ~\ngit clone <my dotfiles repo>\ncd dotfiles\n# env variable stuff ignored here\nstow zsh  # This will symlink my .zshrc file which is in ~/dotfiles/zsh to ~/.zshrc\n", "hash": "9d3c69ddcfc43df3ac8a003954eb11d2"}, {"language": "", "code": ":retab\n", "hash": "b580600afb1934329cbc02323b61f6b0"}, {"language": "bash", "code": "MAN(1)                                                                                                                       Manual pager utils                                                                                                                      MAN(1)\n\nNAME\n       man - an interface to the on-line reference manuals\n\nSYNOPSIS\n       man  [-C  file]  [-d] [-D] [--warnings[=warnings]] [-R encoding] [-L locale] [-m system[,...]] [-M path] [-S list] [-e extension] [-i|-I] [--regex|--wildcard] [--names-only] [-a] [-u] [--no-subpages] [-P pager] [-r prompt] [-7] [-E encoding] [--no-hyphenation]\n       [--no-justification] [-p string] [-t] [-T[device]] [-H[browser]] [-X[dpi]] [-Z] [[section] page[.section] ...] ...\n       man -k [apropos options] regexp ...\n       man -K [-w|-W] [-S list] [-i|-I] [--regex] [section] term ...\n       man -f [whatis options] page ...\n       man -l [-C file] [-d] [-D] [--warnings[=warnings]] [-R encoding] [-L locale] [-P pager] [-r prompt] [-7] [-E encoding] [-p string] [-t] [-T[device]] [-H[browser]] [-X[dpi]] [-Z] file ...\n       man -w|-W [-C file] [-d] [-D] page ...\n       man -c [-C file] [-d] [-D] page ...\n       man [-?V]\n\nDESCRIPTION\n       man is the system's manual pager.  Each page argument given to man is normally the name of a program, utility or function.  The manual page associated with each of these arguments is then found and displayed.  A section, if provided, will direct  man  to  look\n       only  in  that  section of the manual.  The default action is to search in all of the available sections following a pre-defined order (\"1 n l 8 3 2 3posix 3pm 3perl 3am 5 4 9 6 7\" by default, unless overridden by the SECTION directive in /etc/manpath.config),\n       and to show only the first page found, even if page exists in several sections.\n\n       The table below shows the section numbers of the manual followed by the types of pages they contain.\n\n       1   Executable programs or shell commands\n       2   System calls (functions provided by the kernel)\n       3   Library calls (functions within program libraries)\n       4   Special files (usually found in /dev)\n       5   File formats and conventions eg /etc/passwd\n       6   Games\n       7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)\n       8   System administration commands (usually only for root)\n       9   Kernel routines [Non standard]\n\n       A manual page consists of several sections.\n\n       Conventional section names include NAME, SYNOPSIS, CONFIGURATION, DESCRIPTION, OPTIONS, EXIT STATUS, RETURN VALUE, ERRORS, ENVIRONMENT, FILES, VERSIONS, CONFORMING TO, NOTES, BUGS, EXAMPLE, AUTHORS, and SEE ALSO.\n\n       The following conventions apply to the SYNOPSIS section and can be used as a guide in other sections.\n\n       bold text          type exactly as shown.\n       italic text        replace with appropriate argument.\n       [-abc]             any or all arguments within [ ] are optional.\n       -a|-b              options delimited by | cannot be used together.\n       argument ...       argument is repeatable.\n       [expression] ...   entire expression within [ ] is repeatable.\n\n       Exact rendering may vary depending on the output device.  For instance, man will usually not be able to render italics when running in a terminal, and will typically use underlined or coloured text instead.\n\n       The command or function illustration is a pattern that should match all possible invocations.  In some cases it is advisable to illustrate several exclusive invocations as is shown in the SYNOPSIS section of this manual page.\n\nEXAMPLES\n       man ls\n           Display the manual page for the item (program) ls.\n\n       man man.7\n           Display the manual page for macro package man from section 7.\n", "hash": "5e8f4d1d67fbc96f44147e6e12bad3e7"}, {"language": "bash", "code": "# To convert a man page to pdf:\nman -t bash | ps2pdf - bash.pdf\n\n# To view the ascii chart:\nman 7 ascii\n", "hash": "5391188dcae5516515059c22606c0d52"}, {"language": "jinja", "code": "<form method=\"post\">\n  \n\n<button type=\"submit\" class=\"submit btn btn-xl btn-outline-danger\" >Remove</button>\n</form>\n\n", "hash": "32eb319417dde54da4379d37808dab13"}, {"language": "python", "code": "# I hate it when tutorials don't show ALL relevant pieces to the blurb\nimport starlette.status as status\nfrom fastapi import APIRouter, Depends, Form, Request\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom fastapi.templating import Jinja2Templates\nfrom sqlalchemy.orm import Session\n\nfrom app.session.session import create_get_session\n\nrouter = APIRouter()\ntemplates = Jinja2Templates(directory=\"templates/\")\n\n@router.post(\"/my_route/do_something_with_form\", response_class=HTMLResponse)\nasync def delete_rows(\n    request: Request,\n    db: Session = Depends(create_get_session),\n):\n    form_data = await request.get_form()\n    data = jsonable_encoder(form_data)\n    # data = {\"item_1\": 1, \"item_2\": 2, ... \"item_N\": N}\n    return RedirectResponse(\"/\", status_code=status.HTTP_302_FOUND)\n", "hash": "488aebe358903eb73ca5d62eed4eb6fd"}, {"language": "", "code": "./html-files\n\u251c\u2500\u2500 file1.html\n\u2514\u2500\u2500 file2.html\n", "hash": "5c0b1eb6d44ee31a8bfc8f7a8e98cbbc"}, {"language": "html", "code": "\n<!DOCTYPE html>\n<html>\n<head>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n <meta name=\"Author\" content=\"Made by 'tree'\">\n <meta name=\"GENERATOR\" content=\"$Version: $ tree v1.8.0 (c) 1996 - 2018 by Steve Baker, Thomas Moore, Francesc Rocher, Florian Sesser, Kyosuke Tokoro $\">\n <title>Directory Tree</title>\n <style type=\"text/css\">\n  <!--\n  BODY { font-family : ariel, monospace, sans-serif; }\n  P { font-weight: normal; font-family : ariel, monospace, sans-serif; color: black; background-color: transparent;}\n  B { font-weight: normal; color: black; background-color: transparent;}\n  A:visited { font-weight : normal; text-decoration : none; background-color : transparent; margin : 0px 0px 0px 0px; padding : 0px 0px 0px 0px; display: inline; }\n  A:link    { font-weight : normal; text-decoration : none; margin : 0px 0px 0px 0px; padding : 0px 0px 0px 0px; display: inline; }\n  A:hover   { color : #000000; font-weight : normal; text-decoration : underline; background-color : yellow; margin : 0px 0px 0px 0px; padding : 0px 0px 0px 0px; display: inline; }\n  A:active  { color : #000000; font-weight: normal; background-color : transparent; margin : 0px 0px 0px 0px; padding : 0px 0px 0px 0px; display: inline; }\n  .VERSION { font-size: small; font-family : arial, sans-serif; }\n  .NORM  { color: black;  background-color: transparent;}\n  .FIFO  { color: purple; background-color: transparent;}\n  .CHAR  { color: yellow; background-color: transparent;}\n  .DIR   { color: blue;   background-color: transparent;}\n  .BLOCK { color: yellow; background-color: transparent;}\n  .LINK  { color: aqua;   background-color: transparent;}\n  .SOCK  { color: fuchsia;background-color: transparent;}\n  .EXEC  { color: green;  background-color: transparent;}\n  -->\n </style>\n</head>\n<body>\n        <h1>Directory Tree</h1><p>\n        <a href=\".\">.</a><br>\n        \u251c\u2500\u2500 <a href=\"./file1.html\">file1.html</a><br>\n        \u2514\u2500\u2500 <a href=\"./file2.html\">file2.html</a><br>\n        <br><br>\n        </p>\n        <p>\n\n0 directories, 2 files\n        <br><br>\n        </p>\n        <hr>\n        <p class=\"VERSION\">\n                 tree v1.8.0 \u00a9 1996 - 2018 by Steve Baker and Thomas Moore <br>\n                 HTML output hacked and copyleft \u00a9 1998 by Francesc Rocher <br>\n                 JSON output hacked and copyleft \u00a9 2014 by Florian Sesser <br>\n                 Charsets / OS/2 support \u00a9 2001 by Kyosuke Tokoro\n        </p>\n</body>\n</html>\n\n", "hash": "0a1b534a5c60199bd7f033e6199a870c"}, {"language": "yaml", "code": "network:\n  version: 2\n  ethernets:\n    enp0s4:\n      addresses: [192.168.1.{Static IP}/24]\n      gateway4: 192.168.1.1  # <-- This changes!\n      nameservers:\n        addresses: [192.168.1.1, 1.1.1.1]\n", "hash": "80c1af6267037a696849e6d6d4548475"}, {"language": "yaml", "code": "network:\n  version: 2\n  ethernets:\n    enp0s4:\n      addresses: [192.168.1.{Static IP}/24]\n      routes:\n        - to: default\n          via: 192.168.1.1 \n      nameservers:\n        addresses: [192.168.1.1, 1.1.1.1]\n", "hash": "a3b941f68937d2c464300ad12975df24"}, {"language": "bash", "code": "sandbox/src  \ud83c\udf31 main \ud83d\uddd1\ufe0f  \u00d73\ud83d\udee4\ufe0f  \u00d72via \ud83d\udc0d v3.8.11 (sandbox)  took 9s\n\u276f ls\nabcmeta.py  __pycache__  python-print-align.py  system-monitor-psutils.py\n\nsandbox/src  \ud83c\udf31 main \ud83d\uddd1\ufe0f  \u00d73\ud83d\udee4\ufe0f  \u00d72via \ud83d\udc0d v3.8.11 (sandbox)\n\u276f pipx run pyclean .\n\u26a0\ufe0f  pyclean is already on your PATH and installed at /usr/bin/pyclean. Downloading and running anyway.\nCleaning directory .\nTotal 1 files, 1 directories removed.\n\nsandbox/src  \ud83c\udf31 main \ud83d\uddd1\ufe0f  \u00d73\ud83d\udee4\ufe0f  \u00d72via \ud83d\udc0d v3.8.11 (sandbox)\n\u276f ls\nabcmeta.py  python-print-align.py  system-monitor-psutils.py\n\n", "hash": "270305f6f859beb65931372575a68f22"}, {"language": "bash ", "code": "\n\u276f mu register proj1 proj2\nRepository: proj1 registered\nRepository: proj2 registered\n\n\u276f mu status\n\n  proj1 : git status\n    On branch main\n\n    No commits yet\n\n    Untracked files:\n    (use \"git add <file>...\" to include in what will be committed)\n    requirements.txt\n\n    nothing added to commit but untracked files present (use \"git add\" to track)\n\n  proj2 : git status\n    On branch main\n\n    No commits yet\n\n    Changes to be committed:\n    (use \"git rm --cached <file>...\" to unstage)\n    new file:   requirements.txt\n\n\n", "hash": "06ded8a497c755c7d5cda872bd26f7e0"}, {"language": "bash  ", "code": "\n\u276f mu add requirements.txt\n\n  proj1 : git add requirements.txt\n\n  proj2 : git add requirements.txt\n", "hash": "26080497cad9336340c8ad4fb0ea1f1d"}, {"language": "bash", "code": "\n\u276f mu commit -m \"Add requirements.txts\"\n\n  proj1 : git commit -m Add requirements.txts\n    [main (root-commit) 18376d7] Add requirements.txts\n    1 file changed, 1 insertion(+)\n    create mode 100644 requirements.txt\n\n  proj2 : git commit -m Add requirements.txts\n    [main (root-commit) 18376d7] Add requirements.txts\n    1 file changed, 1 insertion(+)\n    create mode 100644 requirements.txt\n", "hash": "ffea6735653531c4739c4d96428ffe5e"}, {"language": "bash", "code": "\n\u276f mu group add active --empty\n\n~/personal\n\u276f mu group add deprecated --empty\n\n~/personal\n\u276f mu group\n  active\n* deprecated\n\n", "hash": "9e1dbff87f21aedcf6979be8fd276de9"}, {"language": "bash", "code": "stow zsh -t ~/\n#or\nstow zsh -t $HOME\n", "hash": "f723c4a30da4b3a2f0bfb2962e5c91cc"}, {"language": "yaml", "code": "network:\n  version: 2\n  ethernets:\n    enp0s4:\n      addresses: [192.168.1.{Static IP}/24]\n      gateway4: 192.168.1.1\n      nameservers:\n        addresses: [192.168.1.1, 1.1.1.1]\n", "hash": "5e21d75f73e797c8e39076c84824fd38"}, {"language": "python", "code": "df = pd.read_csv(\"cars.csv\")\n\ndf.info(memory_usage=\"deep\")\n", "hash": "7134472b398aada5e8e7f4822d2e2b07"}, {"language": "python", "code": "title = \"my Title\"\neval('\"my\" in title')\n\n>>> True\n\n", "hash": "3fc3b3a74516315e06ca18429d715e6e"}, {"language": "bash", "code": "kedro our-liter | grep s3 >> orphaned_datasets.txt\n", "hash": "5f84f99becba74eabb90f95058f8053b"}, {"language": "", "code": "Apply a CSS-styling function elementwise.\n\nUpdates the HTML representation with the result.\n\n", "hash": "2451e5b058e09851b791d7e8c9016a83"}, {"language": "python ", "code": "sandbox \uf7a1  main via 3.8.11(sandbox) ipython\n\u276f df = pd.read_csv(\"cars.csv\")\n\nsandbox \uf7a1  main via 3.8.11(sandbox) ipython\n\u276f def mpg_color(val: float):\n...:     color = \"red\" if val < 21 else \"green\"\n...:     return f\"color: {color}\"\n\nsandbox \uf7a1  main via 3.8.11(sandbox) ipython\n\u276f df.style.applymap(mpg_color, subset=\"mpg\").to_html(\"color.html\")\n", "hash": "5826deedc8ae48860a9a90d5480acc27"}, {"language": "python", "code": "from collections import deque\n\nmy_deque = deque([1,2,3])\n", "hash": "9ab6d2aaf2caa8b73b4b28b5a55ed386"}, {"language": "python", "code": "my_deque.appendleft('a')\nprint(my_dequqe)\n>>> deque(['a', 1, 2, 3])\n\nmy_deque.popleft()\n>>> 'a'\nprint(my_deque)\n>>> deque([1, 2, 3])\n", "hash": "65cddbfe3e4247d398524195725bbd2d"}, {"language": "python", "code": "from typing import Dict, List, Union\n\nmy_dict: Dict[str, Union[List[str], str]] = {\n    \"key_1\": \"val_1\",\n    \"key_2\": [\"ls_1\", \"ls_2\"],\n}\n\nmy_dict[\"key_2\"].pop()\n", "hash": "e0515e6a436fad8b4671f822deeaad4b"}, {"language": "python", "code": "from typing import TypedDict\n\nMyDict = TypedDict(\"MyDict\", {\"key_1\": str, \"key_2\": List[str]})\n\nmy_typed_dict: MyDict = {\n    \"key_1\": \"val_1\",\n    \"key_2\": [\"ls_1\", \"ls_2\"],\n}\n\n\nmy_typed_dict[\"key_2\"].pop()\n", "hash": "cabf29da202969fdb2aad0e7214afe8c"}, {"language": "python", "code": "from typing import TypedDict\nclass MyDict(TypedDict):\n    key_1: str\n    key_2: List[str]\n\nmy_dict : MyDict = {'key_1': 'val_1', 'key_2': [\"ls_1\", \"ls_2\"]}\n\n", "hash": "c61083ceeb85300bb4b7911ec5c24f30"}, {"language": "bash", "code": "# stage other changes I missed\ngit commit --amend --no-edit\n", "hash": "44dded908e62aeebcbe28b6c863abfad"}, {"language": "lua", "code": "local cmp = require'cmp'\n\ncmp.setup({\n    -- removed rest of setup - see the rest in my dotfiles\n  sources = cmp.config.sources({\n    { name = 'path' },  -- This needs to be here!\n    })\n})\n", "hash": "a72adf0883406ad7048d84b5926a0b07"}, {"language": "vim", "code": "call plug#begin(s:plug_dir)\nPlug 'neovim/nvim-lspconfig'\nPlug 'hrsh7th/cmp-nvim-lsp'\nPlug 'hrsh7th/cmp-buffer'\nPlug 'hrsh7th/cmp-path'\nPlug 'hrsh7th/cmp-cmdline'\nPlug 'hrsh7th/nvim-cmp'\n\n\" For ultisnips users.\n<!-- \" Plug 'SirVer/ultisnips' -->\n<!-- \" Plug 'quangnguyen30192/cmp-nvim-ultisnips' -->\n\ncall plug#end()\n\n", "hash": "472da0ed0bd00d65ec69ff018098c8f3"}, {"language": "vim", "code": "\nset completeopt=menu,menuone,noselect\n\n", "hash": "e73246ea9221211d4ae8d0231eee6d15"}, {"language": "lua", "code": "\n  -- Setup nvim-cmp.\nlocal cmp = require'cmp'\n\ncmp.setup({\n  snippet = {\n    -- REQUIRED - you must specify a snippet engine\n    expand = function(args)\n      -- For `ultisnips` user.\n      vim.fn[\"UltiSnips#Anon\"](args.body)\n    end,\n  },\n  window = {\n      completion = cmp.config.window.bordered(),\n  },\n  mapping = {\n    ['<Down>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }),\n    ['<Up>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }),\n    ['<C-d>'] = cmp.mapping.scroll_docs(-4),\n    ['<C-f>'] = cmp.mapping.scroll_docs(4),\n    ['<C-Space>'] = cmp.mapping.complete(),\n    ['<C-e>'] = cmp.mapping.close(),\n    ['<Tab>'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 's' }),\n    ['<CR>'] = cmp.mapping.confirm({\n      behavior = cmp.ConfirmBehavior.Replace,\n      select = true,\n    })\n  },\n  sources = cmp.config.sources({\n    { name = 'nvim_lsp' },\n    { name = 'ultisnips' },\n    { name = 'buffer' },\n    { name = 'path' },\n    { name = 'tmux' },\n    })\n})\n\n", "hash": "5308960b4c76da24b86314d27c841326"}, {"language": "python", "code": "\nimport random\n\nvariables = \"Foo Bar Baz Bing\".split()\nscores = random.sample(range(1, 11), len(variables))\n\nprint(\"*\" * 30)\nprint(\"\\n\")\nprint(\"With 'varable' left aligned\")\nfor varable, score in zip(variables, scores):\n    print(f\"{varable:<10} | {score}\")\n\nprint(\"*\" * 30)\nprint(\"\\n\")\nprint(\"With 'varable' right aligned\")\nfor varable, score in zip(variables, scores):\n    print(f\"{varable:>15} | {score}\")\n\nprint(\"*\" * 30)\nprint(\"\\n\")\nprint(\"With 'varable' center aligned\")\nfor varable, score in zip(variables, scores):\n    print(f\"{varable:^5} | {score}\")\n\n", "hash": "7b3bd011472e64eae40b456ed3be5b65"}, {"language": "python", "code": "\nimport psutil\nimport socket\n\nprint(f\"System Memory used: {psutil.virtual_memory().used // (1024 ** 3)} GB\")\nprint(f\"System Memory available: {psutil.virtual_memory().available // (1024 ** 3)} GB\")\nprint(f\"System Memory total: {psutil.virtual_memory().total // (1024 ** 3)} GB\")\n\n\nprint(f\"Hostname: {socket.gethostname()}\")\n\npartitions = psutil.disk_partitions()\n\nfor part in partitions:\n    mnt = part.mountpoint\n    if \"snap\" in mnt or \"boot\" in mnt:\n        continue\n    disk = psutil.disk_usage(mnt)\n    print(f\"Usage at {mnt} on {part.device}: {disk.used // (1024 ** 3)} GB\")\n    print(f\"Free at {mnt} on {part.device}: {disk.free // (1024 ** 3)}GB\")\n    print(f\"Total at {mnt} on {part.device}: {disk.total // (1024 ** 3)}GB\")\n", "hash": "285bbae46e4a5662c905b295d6094dc2"}, {"language": "bash", "code": "project \u21aa main v3.8.11 ipython\n\u276f %run -m system-monitor-psutils\nSystem Memory used: 25 GB\nSystem Memory available: 5 GB\nSystem Memory total: 31 GB\nHostname: ryzen-3600x\nUsage at / on /dev/nvme1n1p2: 81 GB\nFree at / on /dev/nvme1n1p2: 351 GB\nTotal at / on /dev/nvme1n1p2: 456 GB\n", "hash": "ccc05a1476036fc5f979f79c4b451732"}, {"language": "bash", "code": "\nsandbox  \ue725 bisect-post  \uf21b \u00d71 via \ue235  v3.8.11(sandbox)  on \ue33d (us-east-1)\n\u276f git bisect start\n\nsandbox  \ue725 bisect-post (BISECTING)  \uf21b \u00d71 via \ue235  v3.8.11(sandbox)  on \ue33d (us-east-1)\n\u276f git bisect good 655332b\nbisect-post  HEAD         main         ORIG_HEAD\n5b31e1e  -- [HEAD]    add successful print (52 seconds ago)\n308247b  -- [HEAD^]   init another loop (77 seconds ago)\n4555c59  -- [HEAD^^]  introduce bug (2 minutes ago)\n9cf6d55  -- [HEAD~3]  add successful loop (3 minutes ago)\nbcb41c3  -- [HEAD~4]  change x to 10 (4 minutes ago)\n3c34aac  -- [HEAD~5]  init x to 1 (4 minutes ago)\n12e53bd  -- [HEAD~6]  print cwd (4 minutes ago)\n655332b  -- [HEAD~7]  add example.py (10 minutes ago)  # <- I want to start at this commit\n59e0048  -- [HEAD~8]  gitignore (23 hours ago)\nfb9e1fb  -- [HEAD~9]  add reqs (23 hours ago)\n\n", "hash": "db46a6ac793a5fa78b2437b684800b70"}, {"language": "bash", "code": "\nsandbox  \ue725 bisect-post (BISECTING)  \uf21b \u00d71 via \ue235  v3.8.11(sandbox)  on \ue33d (us-east-1)\n\u276f git bisect bad 5b31e1e\nbisect-post                                                ORIG_HEAD\nHEAD                                                       refs/bisect/good-655332b6c384934c2c00c3d4aba3011ccc1e5b57\nmain\n5b31e1e  -- [HEAD]    add successful print (5 minutes ago)  # <- I start here with the \"bad\" commit\n308247b  -- [HEAD^]   init another loop (6 minutes ago)\n4555c59  -- [HEAD^^]  introduce bug (6 minutes ago)\n9cf6d55  -- [HEAD~3]  add successful loop (7 minutes ago)\nbcb41c3  -- [HEAD~4]  change x to 10 (8 minutes ago)\n3c34aac  -- [HEAD~5]  init x to 1 (9 minutes ago)\n12e53bd  -- [HEAD~6]  print cwd (9 minutes ago)\n655332b  -- [HEAD~7]  add example.py (14 minutes ago)\n59e0048  -- [HEAD~8]  gitignore (23 hours ago)\nfb9e1fb  -- [HEAD~9]  add reqs (23 hours ago)\n\n", "hash": "4323dc942b5933467b3b915a30e5d085"}, {"language": "bash", "code": "\nsandbox  \ue725 bisect-post (BISECTING)  \uf21b \u00d71 via \ue235  v3.8.11(sandbox)  on \ue33d (us-east-1)\n\u276f git bisect bad 5b31e1e\nBisecting: 3 revisions left to test after this (roughly 2 steps)\n[bcb41c3854e343eade85353683f2c1c4ddde4e04] change x to 10\n\nsandbox  \ue725 HEAD (bcb41c38) (BISECTING)  \uf21b \u00d71 via \ue235  v3.8.11(sandbox)  on \ue33d (us-east-1)\n\u276f\n", "hash": "cb47088a2aab298b8f85c3911b709d3f"}, {"language": "bash", "code": "\nsandbox  \ue725 HEAD (bcb41c38) (BISECTING)  \uf21b \u00d71 via \ue235  v3.8.11(sandbox)  on \ue33d (us-east-1)\n\u276f git bisect good\nBisecting: 1 revision left to test after this (roughly 1 step)\n[4555c5979268dff6c475365fdc5ce1d4a12bd820] introduce bug\n\n", "hash": "767f0a522b112798bde8871a56d4f1a0"}, {"language": "bash", "code": "\nsandbox  \ue725 HEAD (4555c597) (BISECTING)  \uf21b \u00d71 via \ue235  v3.8.11(sandbox)  on \ue33d (us-east-1)\n\u276f git bisect bad\nBisecting: 0 revisions left to test after this (roughly 0 steps)\n[9cf6d55301560c51e2f55404d0d80b1f1e22a33d] add successful loop\n", "hash": "3dfd521944c215beee4c1e2c7255c5b2"}, {"language": "bash", "code": "sandbox  \ue725 HEAD (9cf6d553) (BISECTING)  \uf21b \u00d71 via \ue235  v3.8.11(sandbox)  on \ue33d (us-east-1)\n\u276f git bisect good\n4555c5979268dff6c475365fdc5ce1d4a12bd820 is the first bad commit\ncommit 4555c5979268dff6c475365fdc5ce1d4a12bd820\nAuthor: ########################### \nDate:   Tue May 3 09:00:00 2022 -0500\n\n    introduce bug\n\n example.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n", "hash": "157d109493f70bc48067834749b0be0b"}, {"language": "python", "code": "from abc import ABCMeta, abstractmethod\nclass Family(metaclass=ABCMeta):\n    @abstractmethod\n    def get_dad(self):\n        \"\"\"Any extension of the Family class must implement a `get_dad` method\"\"\"\n\nclass MyFamily(Family):\n    pass\n\n", "hash": "a9381225ccf94aae898713c4665f7676"}, {"language": "python", "code": "\n\u276f my_fam = MyFamily()\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 <ipython-input-8-ecb8e21ce815>:1 in <module>                                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: Can't instantiate abstract class MyFamily with abstract methods get_dad\n\n", "hash": "0753ea70b5151cb0b491e831d45beb5c"}, {"language": "python", "code": "class MyFamily(Family):\n    def get_dad(self):\n        return \"Me\"\n", "hash": "61159405f0cc9d1e13d93a6a58c57a0b"}, {"language": "python", "code": "\nmy_fam = MyFamily()\n\nmy_fam.get_dad()\n'Me'\n\n", "hash": "0ffb39938beb71344d03fd97c90ee9e5"}]